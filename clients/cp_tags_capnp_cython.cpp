/* Generated by Cython 0.29.21 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "/usr/local/lib/python3.9/dist-packages/capnp/helpers/asyncHelper.h",
            "/usr/local/lib/python3.9/dist-packages/capnp/helpers/asyncIoHelper.h",
            "/usr/local/lib/python3.9/dist-packages/capnp/helpers/capabilityHelper.h",
            "/usr/local/lib/python3.9/dist-packages/capnp/helpers/checkCompiler.h",
            "/usr/local/lib/python3.9/dist-packages/capnp/helpers/rpcHelper.h",
            "cp_tags.capnp.h"
        ],
        "include_dirs": [
            "/usr/local/lib/python3.9/dist-packages"
        ],
        "language": "c++",
        "libraries": [
            "capnpc",
            "capnp",
            "capnp-rpc"
        ],
        "name": "cp_tags_capnp_cython",
        "sources": [
            "cp_tags_capnp_cython.pyx",
            "cp_tags.capnp.cpp"
        ]
    },
    "module_name": "cp_tags_capnp_cython"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_21"
#define CYTHON_HEX_VERSION 0x001D15F0
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__cp_tags_capnp_cython
#define __PYX_HAVE_API__cp_tags_capnp_cython
/* Early includes */
#include <string.h>
#include <stdio.h>
#include <stdint.h>
#include "capnp/helpers/checkCompiler.h"
#include "capnp/helpers/capabilityHelper.h"
#include "capnp/helpers/rpcHelper.h"
#include "capnp/helpers/asyncHelper.h"
#include "capnp/dynamic.h"
#include "capnp/orphan.h"
#include "capnp/schema.h"
#include "capnp/any.h"
#include "capnp/blob.h"
#include "capnp/message.h"
#include "capnp/schema.capnp.h"
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include "capnp/common.h"
#include "kj/common.h"
#include "kj/array.h"
#include "capnp/serialize.h"
#include "capnp/serialize-packed.h"
#include "kj/string.h"
#include "kj/exception.h"
#include "kj/memory.h"
#include "kj/async.h"
#include "kj/string-tree.h"
#include "kj/time.h"
#include "kj/async-io.h"
#include "capnp/capability.h"
#include "capnp/rpc-twoparty.h"
#include "capnp/schema-parser.h"
#include "capnp/helpers/asyncIoHelper.h"
#include "capnp/helpers/fixMaybe.h"
#include "capnp/helpers/serialize.h"
#include "cp_tags.capnp.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 1
#define __Pyx_PyObject_FromString __Pyx_PyStr_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyStr_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "stringsource",
  "cp_tags_capnp_cython.pyx",
  "type.pxd",
  "capnp.pxd",
};

/* "capnp/includes/types.pxd":3
 * from cpython.ref cimport PyObject, Py_INCREF, Py_DECREF
 * from libc.stdint cimport *
 * ctypedef unsigned int uint             # <<<<<<<<<<<<<<
 * ctypedef uint8_t byte
 * ctypedef uint8_t UInt8
 */
typedef unsigned int __pyx_t_5capnp_8includes_5types_uint;

/* "capnp/includes/types.pxd":4
 * from libc.stdint cimport *
 * ctypedef unsigned int uint
 * ctypedef uint8_t byte             # <<<<<<<<<<<<<<
 * ctypedef uint8_t UInt8
 * ctypedef uint16_t UInt16
 */
typedef uint8_t __pyx_t_5capnp_8includes_5types_byte;

/* "capnp/includes/types.pxd":5
 * ctypedef unsigned int uint
 * ctypedef uint8_t byte
 * ctypedef uint8_t UInt8             # <<<<<<<<<<<<<<
 * ctypedef uint16_t UInt16
 * ctypedef uint32_t UInt32
 */
typedef uint8_t __pyx_t_5capnp_8includes_5types_UInt8;

/* "capnp/includes/types.pxd":6
 * ctypedef uint8_t byte
 * ctypedef uint8_t UInt8
 * ctypedef uint16_t UInt16             # <<<<<<<<<<<<<<
 * ctypedef uint32_t UInt32
 * ctypedef uint64_t UInt64
 */
typedef uint16_t __pyx_t_5capnp_8includes_5types_UInt16;

/* "capnp/includes/types.pxd":7
 * ctypedef uint8_t UInt8
 * ctypedef uint16_t UInt16
 * ctypedef uint32_t UInt32             # <<<<<<<<<<<<<<
 * ctypedef uint64_t UInt64
 * ctypedef int8_t Int8
 */
typedef uint32_t __pyx_t_5capnp_8includes_5types_UInt32;

/* "capnp/includes/types.pxd":8
 * ctypedef uint16_t UInt16
 * ctypedef uint32_t UInt32
 * ctypedef uint64_t UInt64             # <<<<<<<<<<<<<<
 * ctypedef int8_t Int8
 * ctypedef int16_t Int16
 */
typedef uint64_t __pyx_t_5capnp_8includes_5types_UInt64;

/* "capnp/includes/types.pxd":9
 * ctypedef uint32_t UInt32
 * ctypedef uint64_t UInt64
 * ctypedef int8_t Int8             # <<<<<<<<<<<<<<
 * ctypedef int16_t Int16
 * ctypedef int32_t Int32
 */
typedef int8_t __pyx_t_5capnp_8includes_5types_Int8;

/* "capnp/includes/types.pxd":10
 * ctypedef uint64_t UInt64
 * ctypedef int8_t Int8
 * ctypedef int16_t Int16             # <<<<<<<<<<<<<<
 * ctypedef int32_t Int32
 * ctypedef int64_t Int64
 */
typedef int16_t __pyx_t_5capnp_8includes_5types_Int16;

/* "capnp/includes/types.pxd":11
 * ctypedef int8_t Int8
 * ctypedef int16_t Int16
 * ctypedef int32_t Int32             # <<<<<<<<<<<<<<
 * ctypedef int64_t Int64
 * 
 */
typedef int32_t __pyx_t_5capnp_8includes_5types_Int32;

/* "capnp/includes/types.pxd":12
 * ctypedef int16_t Int16
 * ctypedef int32_t Int32
 * ctypedef int64_t Int64             # <<<<<<<<<<<<<<
 * 
 * ctypedef char * Object
 */
typedef int64_t __pyx_t_5capnp_8includes_5types_Int64;

/* "capnp/includes/types.pxd":15
 * 
 * ctypedef char * Object
 * ctypedef bint Bool             # <<<<<<<<<<<<<<
 * ctypedef float Float32
 * ctypedef double Float64
 */
typedef int __pyx_t_5capnp_8includes_5types_Bool;

/* "capnp/includes/types.pxd":16
 * ctypedef char * Object
 * ctypedef bint Bool
 * ctypedef float Float32             # <<<<<<<<<<<<<<
 * ctypedef double Float64
 * from libcpp cimport bool as cbool
 */
typedef float __pyx_t_5capnp_8includes_5types_Float32;

/* "capnp/includes/types.pxd":17
 * ctypedef bint Bool
 * ctypedef float Float32
 * ctypedef double Float64             # <<<<<<<<<<<<<<
 * from libcpp cimport bool as cbool
 */
typedef double __pyx_t_5capnp_8includes_5types_Float64;

/*--- Type declarations ---*/
struct __pyx_obj_5capnp_3lib_5capnp__StructSchemaField;
struct __pyx_obj_5capnp_3lib_5capnp__StringArrayPtr;
struct __pyx_obj_5capnp_3lib_5capnp_SchemaParser;
struct __pyx_obj_5capnp_3lib_5capnp__DynamicOrphan;
struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructReader;
struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder;
struct __pyx_obj_5capnp_3lib_5capnp__DynamicEnumField;
struct __pyx_obj_5capnp_3lib_5capnp__Schema;
struct __pyx_obj_5capnp_3lib_5capnp__InterfaceSchema;
struct __pyx_obj_5capnp_3lib_5capnp__DynamicEnum;
struct __pyx_obj_5capnp_3lib_5capnp__DynamicListBuilder;
struct __pyx_obj_5capnp_3lib_5capnp__MessageBuilder;
struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader;
struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder;

/* "capnp/includes/types.pxd":14
 * ctypedef int64_t Int64
 * 
 * ctypedef char * Object             # <<<<<<<<<<<<<<
 * ctypedef bint Bool
 * ctypedef float Float32
 */
typedef char *__pyx_t_5capnp_8includes_5types_Object;

/* "capnp/includes/capnp_cpp.pxd":76
 *         Promise[T] attach(Own[PyRefCounter] &, Own[PyRefCounter] &, Own[PyRefCounter] &, Own[PyRefCounter] &)
 * 
 * ctypedef Promise[PyObject *] PyPromise             # <<<<<<<<<<<<<<
 * ctypedef Promise[void] VoidPromise
 * 
 */
typedef  ::kj::Promise<PyObject *>  __pyx_t_5capnp_8includes_9capnp_cpp_PyPromise;

/* "capnp/includes/capnp_cpp.pxd":77
 * 
 * ctypedef Promise[PyObject *] PyPromise
 * ctypedef Promise[void] VoidPromise             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "kj/string-tree.h" namespace " ::kj":
 */
typedef  ::kj::Promise<void>  __pyx_t_5capnp_8includes_9capnp_cpp_VoidPromise;

/* "capnp/includes/capnp_cpp.pxd":108
 *     ctypedef Array[PyObject *] PyArray' ::kj::Array<PyObject *>'
 * 
 * ctypedef Promise[PyArray] PyPromiseArray             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "kj/time.h" namespace " ::kj":
 */
typedef  ::kj::Promise< ::kj::Array<PyObject *>>  __pyx_t_5capnp_8includes_9capnp_cpp_PyPromiseArray;
struct __pyx_opt_args_5capnp_3lib_5capnp_18_StructSchemaField__init;
struct __pyx_opt_args_5capnp_3lib_5capnp_20_DynamicStructReader__init;
struct __pyx_opt_args_5capnp_3lib_5capnp_20_DynamicStructReader_as_builder;
struct __pyx_opt_args_5capnp_3lib_5capnp_21_DynamicStructBuilder__init;
struct __pyx_opt_args_5capnp_3lib_5capnp_21_DynamicStructBuilder_init;
struct __pyx_opt_args_5capnp_3lib_5capnp_21_DynamicStructBuilder__init_by_field;
struct __pyx_opt_args_5capnp_3lib_5capnp_21_DynamicStructBuilder_copy;

/* "capnp/lib/capnp.pxd":26
 *     cdef C_StructSchema.Field thisptr
 *     cdef object _parent
 *     cdef _init(self, C_StructSchema.Field other, parent=?)             # <<<<<<<<<<<<<<
 * 
 * cdef class _StringArrayPtr:
 */
struct __pyx_opt_args_5capnp_3lib_5capnp_18_StructSchemaField__init {
  int __pyx_n;
  PyObject *parent;
};

/* "capnp/lib/capnp.pxd":58
 *     cdef object _schema
 * 
 *     cdef _init(self, C_DynamicStruct.Reader other, object parent, bint isRoot=?, bint tryRegistry=?)             # <<<<<<<<<<<<<<
 * 
 *     cpdef _get(self, field)
 */
struct __pyx_opt_args_5capnp_3lib_5capnp_20_DynamicStructReader__init {
  int __pyx_n;
  int isRoot;
  int tryRegistry;
};

/* "capnp/lib/capnp.pxd":67
 *     cpdef _has_by_field(self, _StructSchemaField field)
 * 
 *     cpdef as_builder(self, num_first_segment_words=?)             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_opt_args_5capnp_3lib_5capnp_20_DynamicStructReader_as_builder {
  int __pyx_n;
  PyObject *num_first_segment_words;
};

/* "capnp/lib/capnp.pxd":77
 *     cdef object _schema
 * 
 *     cdef _init(self, DynamicStruct_Builder other, object parent, bint isRoot=?, bint tryRegistry=?)             # <<<<<<<<<<<<<<
 * 
 *     cdef _check_write(self)
 */
struct __pyx_opt_args_5capnp_3lib_5capnp_21_DynamicStructBuilder__init {
  int __pyx_n;
  int isRoot;
  int tryRegistry;
};

/* "capnp/lib/capnp.pxd":88
 *     cpdef _set(self, field, value)
 *     cpdef _has(self, field)
 *     cpdef init(self, field, size=?)             # <<<<<<<<<<<<<<
 *     cpdef _get_by_field(self, _StructSchemaField field)
 *     cpdef _set_by_field(self, _StructSchemaField field, value)
 */
struct __pyx_opt_args_5capnp_3lib_5capnp_21_DynamicStructBuilder_init {
  int __pyx_n;
  PyObject *size;
};

/* "capnp/lib/capnp.pxd":92
 *     cpdef _set_by_field(self, _StructSchemaField field, value)
 *     cpdef _has_by_field(self, _StructSchemaField field)
 *     cpdef _init_by_field(self, _StructSchemaField field, size=?)             # <<<<<<<<<<<<<<
 *     cpdef init_resizable_list(self, field)
 *     cpdef _DynamicEnumField _which(self)
 */
struct __pyx_opt_args_5capnp_3lib_5capnp_21_DynamicStructBuilder__init_by_field {
  int __pyx_n;
  PyObject *size;
};

/* "capnp/lib/capnp.pxd":100
 * 
 *     cpdef as_reader(self)
 *     cpdef copy(self, num_first_segment_words=?)             # <<<<<<<<<<<<<<
 * 
 * cdef class _DynamicEnumField:
 */
struct __pyx_opt_args_5capnp_3lib_5capnp_21_DynamicStructBuilder_copy {
  int __pyx_n;
  PyObject *num_first_segment_words;
};

/* "capnp/lib/capnp.pxd":23
 * 
 * 
 * cdef class _StructSchemaField:             # <<<<<<<<<<<<<<
 *     cdef C_StructSchema.Field thisptr
 *     cdef object _parent
 */
struct __pyx_obj_5capnp_3lib_5capnp__StructSchemaField {
  PyObject_HEAD
  struct __pyx_vtabstruct_5capnp_3lib_5capnp__StructSchemaField *__pyx_vtab;
   ::capnp::StructSchema::Field thisptr;
  PyObject *_parent;
};


/* "capnp/lib/capnp.pxd":28
 *     cdef _init(self, C_StructSchema.Field other, parent=?)
 * 
 * cdef class _StringArrayPtr:             # <<<<<<<<<<<<<<
 *     cdef StringPtr * thisptr
 *     cdef object parent
 */
struct __pyx_obj_5capnp_3lib_5capnp__StringArrayPtr {
  PyObject_HEAD
  struct __pyx_vtabstruct_5capnp_3lib_5capnp__StringArrayPtr *__pyx_vtab;
   ::kj::StringPtr *thisptr;
  PyObject *parent;
  size_t size;
};


/* "capnp/lib/capnp.pxd":34
 *     cdef ArrayPtr[StringPtr] asArrayPtr(self) except +reraise_kj_exception
 * 
 * cdef class SchemaParser:             # <<<<<<<<<<<<<<
 *     cdef C_SchemaParser * thisptr
 *     cdef public dict modules_by_id
 */
struct __pyx_obj_5capnp_3lib_5capnp_SchemaParser {
  PyObject_HEAD
  struct __pyx_vtabstruct_5capnp_3lib_5capnp_SchemaParser *__pyx_vtab;
   ::capnp::SchemaParser *thisptr;
  PyObject *modules_by_id;
  PyObject *_all_imports;
  struct __pyx_obj_5capnp_3lib_5capnp__StringArrayPtr *_last_import_array;
};


/* "capnp/lib/capnp.pxd":41
 *     cpdef _parse_disk_file(self, displayName, diskPath, imports) except +reraise_kj_exception
 * 
 * cdef class _DynamicOrphan:             # <<<<<<<<<<<<<<
 *     cdef C_DynamicOrphan thisptr
 *     cdef public object _parent
 */
struct __pyx_obj_5capnp_3lib_5capnp__DynamicOrphan {
  PyObject_HEAD
  struct __pyx_vtabstruct_5capnp_3lib_5capnp__DynamicOrphan *__pyx_vtab;
   ::capnp::Orphan< ::capnp::DynamicValue> thisptr;
  PyObject *_parent;
};


/* "capnp/lib/capnp.pxd":51
 * 
 * 
 * cdef class _DynamicStructReader:             # <<<<<<<<<<<<<<
 *     cdef C_DynamicStruct.Reader thisptr
 *     cdef public object _parent
 */
struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructReader {
  PyObject_HEAD
  struct __pyx_vtabstruct_5capnp_3lib_5capnp__DynamicStructReader *__pyx_vtab;
   ::capnp::DynamicStruct::Reader thisptr;
  PyObject *_parent;
  int is_root;
  PyObject *_obj_to_pin;
  PyObject *_schema;
};


/* "capnp/lib/capnp.pxd":70
 * 
 * 
 * cdef class _DynamicStructBuilder:             # <<<<<<<<<<<<<<
 *     cdef DynamicStruct_Builder thisptr
 *     cdef public object _parent
 */
struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder {
  PyObject_HEAD
  struct __pyx_vtabstruct_5capnp_3lib_5capnp__DynamicStructBuilder *__pyx_vtab;
   ::capnp::DynamicStruct::Builder thisptr;
  PyObject *_parent;
  int is_root;
  int _is_written;
  PyObject *_schema;
};


/* "capnp/lib/capnp.pxd":102
 *     cpdef copy(self, num_first_segment_words=?)
 * 
 * cdef class _DynamicEnumField:             # <<<<<<<<<<<<<<
 *     cdef object thisptr
 * 
 */
struct __pyx_obj_5capnp_3lib_5capnp__DynamicEnumField {
  PyObject_HEAD
  struct __pyx_vtabstruct_5capnp_3lib_5capnp__DynamicEnumField *__pyx_vtab;
  PyObject *thisptr;
};


/* "capnp/lib/capnp.pxd":108
 *     cpdef _str(self)
 * 
 * cdef class _Schema:             # <<<<<<<<<<<<<<
 *     cdef C_Schema thisptr
 * 
 */
struct __pyx_obj_5capnp_3lib_5capnp__Schema {
  PyObject_HEAD
  struct __pyx_vtabstruct_5capnp_3lib_5capnp__Schema *__pyx_vtab;
   ::capnp::Schema thisptr;
};


/* "capnp/lib/capnp.pxd":119
 *     cpdef get_proto(self)
 * 
 * cdef class _InterfaceSchema:             # <<<<<<<<<<<<<<
 *     cdef C_InterfaceSchema thisptr
 *     cdef object __method_names, __method_names_inherited, __methods, __methods_inherited
 */
struct __pyx_obj_5capnp_3lib_5capnp__InterfaceSchema {
  PyObject_HEAD
  struct __pyx_vtabstruct_5capnp_3lib_5capnp__InterfaceSchema *__pyx_vtab;
   ::capnp::InterfaceSchema thisptr;
  PyObject *__pyx___method_names;
  PyObject *__pyx___method_names_inherited;
  PyObject *__pyx___methods;
  PyObject *__pyx___methods_inherited;
};


/* "capnp/lib/capnp.pxd":124
 *     cdef _init(self, C_InterfaceSchema other)
 * 
 * cdef class _DynamicEnum:             # <<<<<<<<<<<<<<
 *     cdef capnp.DynamicEnum thisptr
 *     cdef public object _parent
 */
struct __pyx_obj_5capnp_3lib_5capnp__DynamicEnum {
  PyObject_HEAD
  struct __pyx_vtabstruct_5capnp_3lib_5capnp__DynamicEnum *__pyx_vtab;
   ::capnp::DynamicEnum thisptr;
  PyObject *_parent;
};


/* "capnp/lib/capnp.pxd":131
 *     cpdef _as_str(self) except +reraise_kj_exception
 * 
 * cdef class _DynamicListBuilder:             # <<<<<<<<<<<<<<
 *     cdef C_DynamicList.Builder thisptr
 *     cdef public object _parent
 */
struct __pyx_obj_5capnp_3lib_5capnp__DynamicListBuilder {
  PyObject_HEAD
  struct __pyx_vtabstruct_5capnp_3lib_5capnp__DynamicListBuilder *__pyx_vtab;
   ::capnp::DynamicList::Builder thisptr;
  PyObject *_parent;
};


/* "capnp/lib/capnp.pxd":144
 *     cpdef init(self, index, size)
 * 
 * cdef class _MessageBuilder:             # <<<<<<<<<<<<<<
 *     cdef schema_cpp.MessageBuilder * thisptr
 *     cpdef init_root(self, schema)
 */
struct __pyx_obj_5capnp_3lib_5capnp__MessageBuilder {
  PyObject_HEAD
  struct __pyx_vtabstruct_5capnp_3lib_5capnp__MessageBuilder *__pyx_vtab;
   ::capnp::MessageBuilder *thisptr;
};


/* "cp_tags_capnp_cython.pyx":106
 * cp_tags_capnp.Job.schema = _Job_Schema
 * 
 * cdef class Job_Reader(_DynamicStructReader):             # <<<<<<<<<<<<<<
 *     cdef Job.Reader thisptr_child
 *     def __init__(self, _DynamicStructReader struct):
 */
struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader {
  struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructReader __pyx_base;
  Job::Reader thisptr_child;
};


/* "cp_tags_capnp_cython.pyx":225
 *         return ret
 * 
 * cdef class Job_Builder(_DynamicStructBuilder):             # <<<<<<<<<<<<<<
 *     cdef Job.Builder thisptr_child
 *     def __init__(self, _DynamicStructBuilder struct):
 */
struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder {
  struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder __pyx_base;
  Job::Builder thisptr_child;
};



/* "capnp/lib/capnp.pxd":23
 * 
 * 
 * cdef class _StructSchemaField:             # <<<<<<<<<<<<<<
 *     cdef C_StructSchema.Field thisptr
 *     cdef object _parent
 */

struct __pyx_vtabstruct_5capnp_3lib_5capnp__StructSchemaField {
  PyObject *(*_init)(struct __pyx_obj_5capnp_3lib_5capnp__StructSchemaField *,  ::capnp::StructSchema::Field, struct __pyx_opt_args_5capnp_3lib_5capnp_18_StructSchemaField__init *__pyx_optional_args);
};
static struct __pyx_vtabstruct_5capnp_3lib_5capnp__StructSchemaField *__pyx_vtabptr_5capnp_3lib_5capnp__StructSchemaField;


/* "capnp/lib/capnp.pxd":28
 *     cdef _init(self, C_StructSchema.Field other, parent=?)
 * 
 * cdef class _StringArrayPtr:             # <<<<<<<<<<<<<<
 *     cdef StringPtr * thisptr
 *     cdef object parent
 */

struct __pyx_vtabstruct_5capnp_3lib_5capnp__StringArrayPtr {
   ::kj::ArrayPtr< ::kj::StringPtr>  (*asArrayPtr)(struct __pyx_obj_5capnp_3lib_5capnp__StringArrayPtr *);
};
static struct __pyx_vtabstruct_5capnp_3lib_5capnp__StringArrayPtr *__pyx_vtabptr_5capnp_3lib_5capnp__StringArrayPtr;


/* "capnp/lib/capnp.pxd":34
 *     cdef ArrayPtr[StringPtr] asArrayPtr(self) except +reraise_kj_exception
 * 
 * cdef class SchemaParser:             # <<<<<<<<<<<<<<
 *     cdef C_SchemaParser * thisptr
 *     cdef public dict modules_by_id
 */

struct __pyx_vtabstruct_5capnp_3lib_5capnp_SchemaParser {
  PyObject *(*_parse_disk_file)(struct __pyx_obj_5capnp_3lib_5capnp_SchemaParser *, PyObject *, PyObject *, PyObject *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_5capnp_3lib_5capnp_SchemaParser *__pyx_vtabptr_5capnp_3lib_5capnp_SchemaParser;


/* "capnp/lib/capnp.pxd":41
 *     cpdef _parse_disk_file(self, displayName, diskPath, imports) except +reraise_kj_exception
 * 
 * cdef class _DynamicOrphan:             # <<<<<<<<<<<<<<
 *     cdef C_DynamicOrphan thisptr
 *     cdef public object _parent
 */

struct __pyx_vtabstruct_5capnp_3lib_5capnp__DynamicOrphan {
  PyObject *(*_init)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicOrphan *,  ::capnp::Orphan< ::capnp::DynamicValue>, PyObject *);
   ::capnp::Orphan< ::capnp::DynamicValue> (*move)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicOrphan *);
  PyObject *(*get)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicOrphan *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_5capnp_3lib_5capnp__DynamicOrphan *__pyx_vtabptr_5capnp_3lib_5capnp__DynamicOrphan;


/* "capnp/lib/capnp.pxd":51
 * 
 * 
 * cdef class _DynamicStructReader:             # <<<<<<<<<<<<<<
 *     cdef C_DynamicStruct.Reader thisptr
 *     cdef public object _parent
 */

struct __pyx_vtabstruct_5capnp_3lib_5capnp__DynamicStructReader {
  PyObject *(*_init)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructReader *,  ::capnp::DynamicStruct::Reader, PyObject *, struct __pyx_opt_args_5capnp_3lib_5capnp_20_DynamicStructReader__init *__pyx_optional_args);
  PyObject *(*_get)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructReader *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*_has)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructReader *, PyObject *, int __pyx_skip_dispatch);
  struct __pyx_obj_5capnp_3lib_5capnp__DynamicEnumField *(*_which)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructReader *, int __pyx_skip_dispatch);
  PyObject *(*_which_str)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructReader *, int __pyx_skip_dispatch);
  PyObject *(*_get_by_field)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructReader *, struct __pyx_obj_5capnp_3lib_5capnp__StructSchemaField *, int __pyx_skip_dispatch);
  PyObject *(*_has_by_field)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructReader *, struct __pyx_obj_5capnp_3lib_5capnp__StructSchemaField *, int __pyx_skip_dispatch);
  PyObject *(*as_builder)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_5capnp_3lib_5capnp_20_DynamicStructReader_as_builder *__pyx_optional_args);
};
static struct __pyx_vtabstruct_5capnp_3lib_5capnp__DynamicStructReader *__pyx_vtabptr_5capnp_3lib_5capnp__DynamicStructReader;


/* "capnp/lib/capnp.pxd":70
 * 
 * 
 * cdef class _DynamicStructBuilder:             # <<<<<<<<<<<<<<
 *     cdef DynamicStruct_Builder thisptr
 *     cdef public object _parent
 */

struct __pyx_vtabstruct_5capnp_3lib_5capnp__DynamicStructBuilder {
  PyObject *(*_init)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder *,  ::capnp::DynamicStruct::Builder, PyObject *, struct __pyx_opt_args_5capnp_3lib_5capnp_21_DynamicStructBuilder__init *__pyx_optional_args);
  PyObject *(*_check_write)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder *);
  PyObject *(*to_bytes)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder *, int __pyx_skip_dispatch);
  PyObject *(*to_segments)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder *, int __pyx_skip_dispatch);
  PyObject *(*_to_bytes_packed_helper)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*to_bytes_packed)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder *, int __pyx_skip_dispatch);
  PyObject *(*_get)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*_set)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder *, PyObject *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*_has)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*init)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_5capnp_3lib_5capnp_21_DynamicStructBuilder_init *__pyx_optional_args);
  PyObject *(*_get_by_field)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder *, struct __pyx_obj_5capnp_3lib_5capnp__StructSchemaField *, int __pyx_skip_dispatch);
  PyObject *(*_set_by_field)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder *, struct __pyx_obj_5capnp_3lib_5capnp__StructSchemaField *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*_has_by_field)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder *, struct __pyx_obj_5capnp_3lib_5capnp__StructSchemaField *, int __pyx_skip_dispatch);
  PyObject *(*_init_by_field)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder *, struct __pyx_obj_5capnp_3lib_5capnp__StructSchemaField *, int __pyx_skip_dispatch, struct __pyx_opt_args_5capnp_3lib_5capnp_21_DynamicStructBuilder__init_by_field *__pyx_optional_args);
  PyObject *(*init_resizable_list)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder *, PyObject *, int __pyx_skip_dispatch);
  struct __pyx_obj_5capnp_3lib_5capnp__DynamicEnumField *(*_which)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder *, int __pyx_skip_dispatch);
  PyObject *(*_which_str)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder *, int __pyx_skip_dispatch);
  PyObject *(*adopt)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder *, PyObject *, struct __pyx_obj_5capnp_3lib_5capnp__DynamicOrphan *, int __pyx_skip_dispatch);
  PyObject *(*disown)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*as_reader)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder *, int __pyx_skip_dispatch);
  PyObject *(*copy)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder *, int __pyx_skip_dispatch, struct __pyx_opt_args_5capnp_3lib_5capnp_21_DynamicStructBuilder_copy *__pyx_optional_args);
};
static struct __pyx_vtabstruct_5capnp_3lib_5capnp__DynamicStructBuilder *__pyx_vtabptr_5capnp_3lib_5capnp__DynamicStructBuilder;


/* "capnp/lib/capnp.pxd":102
 *     cpdef copy(self, num_first_segment_words=?)
 * 
 * cdef class _DynamicEnumField:             # <<<<<<<<<<<<<<
 *     cdef object thisptr
 * 
 */

struct __pyx_vtabstruct_5capnp_3lib_5capnp__DynamicEnumField {
  PyObject *(*_init)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicEnumField *, PyObject *);
  PyObject *(*_str)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicEnumField *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_5capnp_3lib_5capnp__DynamicEnumField *__pyx_vtabptr_5capnp_3lib_5capnp__DynamicEnumField;


/* "capnp/lib/capnp.pxd":108
 *     cpdef _str(self)
 * 
 * cdef class _Schema:             # <<<<<<<<<<<<<<
 *     cdef C_Schema thisptr
 * 
 */

struct __pyx_vtabstruct_5capnp_3lib_5capnp__Schema {
  PyObject *(*_init)(struct __pyx_obj_5capnp_3lib_5capnp__Schema *,  ::capnp::Schema);
  PyObject *(*as_const_value)(struct __pyx_obj_5capnp_3lib_5capnp__Schema *, int __pyx_skip_dispatch);
  PyObject *(*as_struct)(struct __pyx_obj_5capnp_3lib_5capnp__Schema *, int __pyx_skip_dispatch);
  PyObject *(*as_interface)(struct __pyx_obj_5capnp_3lib_5capnp__Schema *, int __pyx_skip_dispatch);
  PyObject *(*as_enum)(struct __pyx_obj_5capnp_3lib_5capnp__Schema *, int __pyx_skip_dispatch);
  PyObject *(*get_proto)(struct __pyx_obj_5capnp_3lib_5capnp__Schema *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_5capnp_3lib_5capnp__Schema *__pyx_vtabptr_5capnp_3lib_5capnp__Schema;


/* "capnp/lib/capnp.pxd":119
 *     cpdef get_proto(self)
 * 
 * cdef class _InterfaceSchema:             # <<<<<<<<<<<<<<
 *     cdef C_InterfaceSchema thisptr
 *     cdef object __method_names, __method_names_inherited, __methods, __methods_inherited
 */

struct __pyx_vtabstruct_5capnp_3lib_5capnp__InterfaceSchema {
  PyObject *(*_init)(struct __pyx_obj_5capnp_3lib_5capnp__InterfaceSchema *,  ::capnp::InterfaceSchema);
};
static struct __pyx_vtabstruct_5capnp_3lib_5capnp__InterfaceSchema *__pyx_vtabptr_5capnp_3lib_5capnp__InterfaceSchema;


/* "capnp/lib/capnp.pxd":124
 *     cdef _init(self, C_InterfaceSchema other)
 * 
 * cdef class _DynamicEnum:             # <<<<<<<<<<<<<<
 *     cdef capnp.DynamicEnum thisptr
 *     cdef public object _parent
 */

struct __pyx_vtabstruct_5capnp_3lib_5capnp__DynamicEnum {
  PyObject *(*_init)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicEnum *,  ::capnp::DynamicEnum, PyObject *);
  PyObject *(*_as_str)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicEnum *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_5capnp_3lib_5capnp__DynamicEnum *__pyx_vtabptr_5capnp_3lib_5capnp__DynamicEnum;


/* "capnp/lib/capnp.pxd":131
 *     cpdef _as_str(self) except +reraise_kj_exception
 * 
 * cdef class _DynamicListBuilder:             # <<<<<<<<<<<<<<
 *     cdef C_DynamicList.Builder thisptr
 *     cdef public object _parent
 */

struct __pyx_vtabstruct_5capnp_3lib_5capnp__DynamicListBuilder {
  PyObject *(*_init)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicListBuilder *,  ::capnp::DynamicList::Builder, PyObject *);
  PyObject *(*_get)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicListBuilder *, int64_t, int __pyx_skip_dispatch);
  PyObject *(*_set)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicListBuilder *, PyObject *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*adopt)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicListBuilder *, PyObject *, struct __pyx_obj_5capnp_3lib_5capnp__DynamicOrphan *, int __pyx_skip_dispatch);
  PyObject *(*disown)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicListBuilder *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*init)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicListBuilder *, PyObject *, PyObject *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_5capnp_3lib_5capnp__DynamicListBuilder *__pyx_vtabptr_5capnp_3lib_5capnp__DynamicListBuilder;


/* "capnp/lib/capnp.pxd":144
 *     cpdef init(self, index, size)
 * 
 * cdef class _MessageBuilder:             # <<<<<<<<<<<<<<
 *     cdef schema_cpp.MessageBuilder * thisptr
 *     cpdef init_root(self, schema)
 */

struct __pyx_vtabstruct_5capnp_3lib_5capnp__MessageBuilder {
  PyObject *(*init_root)(struct __pyx_obj_5capnp_3lib_5capnp__MessageBuilder *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*get_root)(struct __pyx_obj_5capnp_3lib_5capnp__MessageBuilder *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*get_root_as_any)(struct __pyx_obj_5capnp_3lib_5capnp__MessageBuilder *, int __pyx_skip_dispatch);
  PyObject *(*set_root)(struct __pyx_obj_5capnp_3lib_5capnp__MessageBuilder *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*get_segments_for_output)(struct __pyx_obj_5capnp_3lib_5capnp__MessageBuilder *, int __pyx_skip_dispatch);
  PyObject *(*new_orphan)(struct __pyx_obj_5capnp_3lib_5capnp__MessageBuilder *, PyObject *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_5capnp_3lib_5capnp__MessageBuilder *__pyx_vtabptr_5capnp_3lib_5capnp__MessageBuilder;


/* "cp_tags_capnp_cython.pyx":106
 * cp_tags_capnp.Job.schema = _Job_Schema
 * 
 * cdef class Job_Reader(_DynamicStructReader):             # <<<<<<<<<<<<<<
 *     cdef Job.Reader thisptr_child
 *     def __init__(self, _DynamicStructReader struct):
 */

struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Reader {
  struct __pyx_vtabstruct_5capnp_3lib_5capnp__DynamicStructReader __pyx_base;
  PyObject *(*_get_id)(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *, int __pyx_skip_dispatch);
  PyObject *(*_get_patterns)(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *, int __pyx_skip_dispatch);
  PyObject *(*_get_events)(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *, int __pyx_skip_dispatch);
  PyObject *(*_get_window)(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *, int __pyx_skip_dispatch);
  PyObject *(*_get_duration)(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *, int __pyx_skip_dispatch);
  PyObject *(*_get_finished)(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *, int __pyx_skip_dispatch);
  PyObject *(*_get_starttag)(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *, int __pyx_skip_dispatch);
  PyObject *(*_get_stoptag)(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *, int __pyx_skip_dispatch);
  PyObject *(*_get_err)(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Reader *__pyx_vtabptr_20cp_tags_capnp_cython_Job_Reader;


/* "cp_tags_capnp_cython.pyx":225
 *         return ret
 * 
 * cdef class Job_Builder(_DynamicStructBuilder):             # <<<<<<<<<<<<<<
 *     cdef Job.Builder thisptr_child
 *     def __init__(self, _DynamicStructBuilder struct):
 */

struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Builder {
  struct __pyx_vtabstruct_5capnp_3lib_5capnp__DynamicStructBuilder __pyx_base;
  PyObject *(*_get_id)(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *, int __pyx_skip_dispatch);
  PyObject *(*_set_id)(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *, uint64_t, int __pyx_skip_dispatch);
  PyObject *(*_get_patterns)(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *, int __pyx_skip_dispatch);
  PyObject *(*_set_patterns)(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*_get_events)(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *, int __pyx_skip_dispatch);
  PyObject *(*_set_events)(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*_get_window)(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *, int __pyx_skip_dispatch);
  PyObject *(*_set_window)(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *, uint16_t, int __pyx_skip_dispatch);
  PyObject *(*_get_duration)(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *, int __pyx_skip_dispatch);
  PyObject *(*_set_duration)(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*_get_finished)(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *, int __pyx_skip_dispatch);
  PyObject *(*_set_finished)(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *, bool, int __pyx_skip_dispatch);
  PyObject *(*_get_starttag)(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *, int __pyx_skip_dispatch);
  PyObject *(*_set_starttag)(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *, uint64_t, int __pyx_skip_dispatch);
  PyObject *(*_get_stoptag)(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *, int __pyx_skip_dispatch);
  PyObject *(*_set_stoptag)(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *, uint64_t, int __pyx_skip_dispatch);
  PyObject *(*_get_err)(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *, int __pyx_skip_dispatch);
  PyObject *(*_set_err)(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *, PyObject *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Builder *__pyx_vtabptr_20cp_tags_capnp_cython_Job_Builder;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* SetItemInt.proto */
#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) :\
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* UnpackTupleError.proto */
static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index);

/* UnpackTuple2.proto */
#define __Pyx_unpack_tuple2(tuple, value1, value2, is_tuple, has_known_size, decref_tuple)\
    (likely(is_tuple || PyTuple_Check(tuple)) ?\
        (likely(has_known_size || PyTuple_GET_SIZE(tuple) == 2) ?\
            __Pyx_unpack_tuple2_exact(tuple, value1, value2, decref_tuple) :\
            (__Pyx_UnpackTupleError(tuple, 2), -1)) :\
        __Pyx_unpack_tuple2_generic(tuple, value1, value2, has_known_size, decref_tuple))
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
    PyObject* tuple, PyObject** value1, PyObject** value2, int decref_tuple);
static int __Pyx_unpack_tuple2_generic(
    PyObject* tuple, PyObject** value1, PyObject** value2, int has_known_size, int decref_tuple);

/* dict_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* CallNextTpDealloc.proto */
static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc);

/* CallNextTpTraverse.proto */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse);

/* CallNextTpClear.proto */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_dealloc);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyObject *dict);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint64_t(uint64_t value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint16_t(uint16_t value);

/* CIntFromPy.proto */
static CYTHON_INLINE uint64_t __Pyx_PyInt_As_uint64_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE uint16_t __Pyx_PyInt_As_uint16_t(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* FunctionImport.proto */
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static PyObject *__pyx_f_20cp_tags_capnp_cython_10Job_Reader__get_id(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_20cp_tags_capnp_cython_10Job_Reader__get_patterns(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_20cp_tags_capnp_cython_10Job_Reader__get_events(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_20cp_tags_capnp_cython_10Job_Reader__get_window(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_20cp_tags_capnp_cython_10Job_Reader__get_duration(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_20cp_tags_capnp_cython_10Job_Reader__get_finished(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_20cp_tags_capnp_cython_10Job_Reader__get_starttag(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_20cp_tags_capnp_cython_10Job_Reader__get_stoptag(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_20cp_tags_capnp_cython_10Job_Reader__get_err(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_20cp_tags_capnp_cython_11Job_Builder__get_id(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_20cp_tags_capnp_cython_11Job_Builder__set_id(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, uint64_t __pyx_v_value, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_20cp_tags_capnp_cython_11Job_Builder__get_patterns(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_20cp_tags_capnp_cython_11Job_Builder__set_patterns(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, PyObject *__pyx_v_value, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_20cp_tags_capnp_cython_11Job_Builder__get_events(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_20cp_tags_capnp_cython_11Job_Builder__set_events(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, PyObject *__pyx_v_value, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_20cp_tags_capnp_cython_11Job_Builder__get_window(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_20cp_tags_capnp_cython_11Job_Builder__set_window(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, uint16_t __pyx_v_value, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_20cp_tags_capnp_cython_11Job_Builder__get_duration(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_20cp_tags_capnp_cython_11Job_Builder__set_duration(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, PyObject *__pyx_v_value, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_20cp_tags_capnp_cython_11Job_Builder__get_finished(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_20cp_tags_capnp_cython_11Job_Builder__set_finished(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, bool __pyx_v_value, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_20cp_tags_capnp_cython_11Job_Builder__get_starttag(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_20cp_tags_capnp_cython_11Job_Builder__set_starttag(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, uint64_t __pyx_v_value, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_20cp_tags_capnp_cython_11Job_Builder__get_stoptag(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_20cp_tags_capnp_cython_11Job_Builder__set_stoptag(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, uint64_t __pyx_v_value, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_20cp_tags_capnp_cython_11Job_Builder__get_err(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_20cp_tags_capnp_cython_11Job_Builder__set_err(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, PyObject *__pyx_v_value, int __pyx_skip_dispatch); /* proto*/

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'libc.stdint' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'capnp.includes.types' */

/* Module declarations from 'capnp' */

/* Module declarations from 'capnp.helpers' */

/* Module declarations from 'capnp.helpers.non_circular' */

/* Module declarations from 'capnp.includes.schema_cpp' */

/* Module declarations from 'capnp.includes.capnp_cpp' */

/* Module declarations from 'capnp.includes' */

/* Module declarations from 'capnp.helpers.helpers' */

/* Module declarations from 'capnp.lib.capnp' */
static PyTypeObject *__pyx_ptype_5capnp_3lib_5capnp__StructSchemaField = 0;
static PyTypeObject *__pyx_ptype_5capnp_3lib_5capnp__StringArrayPtr = 0;
static PyTypeObject *__pyx_ptype_5capnp_3lib_5capnp_SchemaParser = 0;
static PyTypeObject *__pyx_ptype_5capnp_3lib_5capnp__DynamicOrphan = 0;
static PyTypeObject *__pyx_ptype_5capnp_3lib_5capnp__DynamicStructReader = 0;
static PyTypeObject *__pyx_ptype_5capnp_3lib_5capnp__DynamicStructBuilder = 0;
static PyTypeObject *__pyx_ptype_5capnp_3lib_5capnp__DynamicEnumField = 0;
static PyTypeObject *__pyx_ptype_5capnp_3lib_5capnp__Schema = 0;
static PyTypeObject *__pyx_ptype_5capnp_3lib_5capnp__InterfaceSchema = 0;
static PyTypeObject *__pyx_ptype_5capnp_3lib_5capnp__DynamicEnum = 0;
static PyTypeObject *__pyx_ptype_5capnp_3lib_5capnp__DynamicListBuilder = 0;
static PyTypeObject *__pyx_ptype_5capnp_3lib_5capnp__MessageBuilder = 0;
static PyObject *(*__pyx_f_5capnp_3lib_5capnp_to_python_reader)( ::capnp::DynamicValue::Reader, PyObject *); /*proto*/
static PyObject *(*__pyx_f_5capnp_3lib_5capnp_to_python_builder)( ::capnp::DynamicValue::Builder, PyObject *); /*proto*/
static PyObject *(*__pyx_f_5capnp_3lib_5capnp__to_dict)(PyObject *, int, int); /*proto*/
static PyObject *(*__pyx_f_5capnp_3lib_5capnp__setDynamicFieldStatic)( ::capnp::DynamicStruct::Builder, PyObject *, PyObject *, PyObject *); /*proto*/
static PyObject *(*__pyx_f_5capnp_3lib_5capnp_wrap_dynamic_struct_reader)( ::capnp::Response< ::capnp::DynamicStruct> &); /*proto*/
static PyObject *(*__pyx_f_5capnp_3lib_5capnp_wrap_remote_call)(PyObject *,  ::capnp::Response< ::capnp::DynamicStruct> &); /*proto*/
static  ::kj::Promise<void>  *(*__pyx_f_5capnp_3lib_5capnp_call_server_method)(PyObject *, char *,  ::capnp::CallContext< ::capnp::DynamicStruct, ::capnp::DynamicStruct> &); /*proto*/
static PyObject *(*__pyx_f_5capnp_3lib_5capnp_convert_array_pyobject)( ::kj::Array<PyObject *> &); /*proto*/
static  ::kj::Promise<PyObject *>  *(*__pyx_f_5capnp_3lib_5capnp_extract_promise)(PyObject *); /*proto*/
static  ::capnp::RemotePromise< ::capnp::DynamicStruct> *(*__pyx_f_5capnp_3lib_5capnp_extract_remote_promise)(PyObject *); /*proto*/
static PyObject *(*__pyx_f_5capnp_3lib_5capnp_wrap_kj_exception)( ::kj::Exception &); /*proto*/
static PyObject *(*__pyx_f_5capnp_3lib_5capnp_wrap_kj_exception_for_reraise)( ::kj::Exception &); /*proto*/
static PyObject *(*__pyx_f_5capnp_3lib_5capnp_get_exception_info)(PyObject *, PyObject *, PyObject *); /*proto*/

/* Module declarations from 'cp_tags_capnp_cython' */
static PyTypeObject *__pyx_ptype_20cp_tags_capnp_cython_Job_Reader = 0;
static PyTypeObject *__pyx_ptype_20cp_tags_capnp_cython_Job_Builder = 0;
#define __Pyx_MODULE_NAME "cp_tags_capnp_cython"
extern int __pyx_module_is_main_cp_tags_capnp_cython;
int __pyx_module_is_main_cp_tags_capnp_cython = 0;

/* Implementation of 'cp_tags_capnp_cython' */
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_ValueError;
static const char __pyx_k_id[] = "id";
static const char __pyx_k_Job[] = "Job";
static const char __pyx_k_err[] = "err";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_capnp[] = "capnp";
static const char __pyx_k_utf_8[] = "utf-8";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_events[] = "events";
static const char __pyx_k_get_id[] = "_get_id";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_schema[] = "schema";
static const char __pyx_k_set_id[] = "_set_id";
static const char __pyx_k_struct[] = "struct";
static const char __pyx_k_window[] = "window";
static const char __pyx_k_get_err[] = "_get_err";
static const char __pyx_k_ordered[] = "ordered";
static const char __pyx_k_set_err[] = "_set_err";
static const char __pyx_k_stoptag[] = "stoptag";
static const char __pyx_k_verbose[] = "verbose";
static const char __pyx_k_duration[] = "duration";
static const char __pyx_k_finished[] = "finished";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_patterns[] = "patterns";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_starttag[] = "starttag";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_as_struct[] = "as_struct";
static const char __pyx_k_iteritems[] = "iteritems";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_Job_Reader[] = "Job_Reader";
static const char __pyx_k_Job_Schema[] = "_Job_Schema";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_get_events[] = "_get_events";
static const char __pyx_k_get_window[] = "_get_window";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_set_events[] = "_set_events";
static const char __pyx_k_set_window[] = "_set_window";
static const char __pyx_k_Job_Builder[] = "Job_Builder";
static const char __pyx_k_get_stoptag[] = "_get_stoptag";
static const char __pyx_k_set_stoptag[] = "_set_stoptag";
static const char __pyx_k_get_duration[] = "_get_duration";
static const char __pyx_k_get_finished[] = "_get_finished";
static const char __pyx_k_get_patterns[] = "_get_patterns";
static const char __pyx_k_get_starttag[] = "_get_starttag";
static const char __pyx_k_set_duration[] = "_set_duration";
static const char __pyx_k_set_finished[] = "_set_finished";
static const char __pyx_k_set_patterns[] = "_set_patterns";
static const char __pyx_k_set_starttag[] = "_set_starttag";
static const char __pyx_k_cp_tags_capnp[] = "cp_tags_capnp";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_register_type[] = "register_type";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_Key_not_found_in_struct[] = "Key not found in struct: ";
static const char __pyx_k_expected_isSetInUnion_field[] = "expected isSetInUnion(field)";
static const char __pyx_k_self_thisptr_self_thisptr_child[] = "self.thisptr,self.thisptr_child cannot be converted to a Python object for pickling";
static PyObject *__pyx_n_s_Job;
static PyObject *__pyx_n_s_Job_Builder;
static PyObject *__pyx_n_s_Job_Reader;
static PyObject *__pyx_n_s_Job_Schema;
static PyObject *__pyx_kp_s_Key_not_found_in_struct;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_as_struct;
static PyObject *__pyx_n_s_capnp;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_cp_tags_capnp;
static PyObject *__pyx_n_s_duration;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_err;
static PyObject *__pyx_n_s_events;
static PyObject *__pyx_kp_s_expected_isSetInUnion_field;
static PyObject *__pyx_n_s_finished;
static PyObject *__pyx_n_s_get_duration;
static PyObject *__pyx_n_s_get_err;
static PyObject *__pyx_n_s_get_events;
static PyObject *__pyx_n_s_get_finished;
static PyObject *__pyx_n_s_get_id;
static PyObject *__pyx_n_s_get_patterns;
static PyObject *__pyx_n_s_get_starttag;
static PyObject *__pyx_n_s_get_stoptag;
static PyObject *__pyx_n_s_get_window;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_id;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_iteritems;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_ordered;
static PyObject *__pyx_n_s_patterns;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_register_type;
static PyObject *__pyx_n_s_schema;
static PyObject *__pyx_kp_s_self_thisptr_self_thisptr_child;
static PyObject *__pyx_n_s_set_duration;
static PyObject *__pyx_n_s_set_err;
static PyObject *__pyx_n_s_set_events;
static PyObject *__pyx_n_s_set_finished;
static PyObject *__pyx_n_s_set_id;
static PyObject *__pyx_n_s_set_patterns;
static PyObject *__pyx_n_s_set_starttag;
static PyObject *__pyx_n_s_set_stoptag;
static PyObject *__pyx_n_s_set_window;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_starttag;
static PyObject *__pyx_n_s_stoptag;
static PyObject *__pyx_n_s_struct;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_kp_s_utf_8;
static PyObject *__pyx_n_s_verbose;
static PyObject *__pyx_n_s_window;
static int __pyx_pf_20cp_tags_capnp_cython_10Job_Reader___init__(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *__pyx_v_self, struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructReader *__pyx_v_struct); /* proto */
static PyObject *__pyx_pf_20cp_tags_capnp_cython_10Job_Reader_2_get_id(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_20cp_tags_capnp_cython_10Job_Reader_2id___get__(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_20cp_tags_capnp_cython_10Job_Reader_4_get_patterns(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_20cp_tags_capnp_cython_10Job_Reader_8patterns___get__(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_20cp_tags_capnp_cython_10Job_Reader_6_get_events(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_20cp_tags_capnp_cython_10Job_Reader_6events___get__(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_20cp_tags_capnp_cython_10Job_Reader_8_get_window(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_20cp_tags_capnp_cython_10Job_Reader_6window___get__(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_20cp_tags_capnp_cython_10Job_Reader_10_get_duration(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_20cp_tags_capnp_cython_10Job_Reader_8duration___get__(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_20cp_tags_capnp_cython_10Job_Reader_12_get_finished(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_20cp_tags_capnp_cython_10Job_Reader_8finished___get__(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_20cp_tags_capnp_cython_10Job_Reader_14_get_starttag(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_20cp_tags_capnp_cython_10Job_Reader_8starttag___get__(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_20cp_tags_capnp_cython_10Job_Reader_16_get_stoptag(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_20cp_tags_capnp_cython_10Job_Reader_7stoptag___get__(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_20cp_tags_capnp_cython_10Job_Reader_18_get_err(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_20cp_tags_capnp_cython_10Job_Reader_3err___get__(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_20cp_tags_capnp_cython_10Job_Reader_20to_dict(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *__pyx_v_self, PyObject *__pyx_v_verbose, PyObject *__pyx_v_ordered); /* proto */
static PyObject *__pyx_pf_20cp_tags_capnp_cython_10Job_Reader_22__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_20cp_tags_capnp_cython_10Job_Reader_24__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_20cp_tags_capnp_cython_11Job_Builder___init__(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder *__pyx_v_struct); /* proto */
static PyObject *__pyx_pf_20cp_tags_capnp_cython_11Job_Builder_2_get_id(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_20cp_tags_capnp_cython_11Job_Builder_4_set_id(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, uint64_t __pyx_v_value); /* proto */
static PyObject *__pyx_pf_20cp_tags_capnp_cython_11Job_Builder_2id___get__(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self); /* proto */
static int __pyx_pf_20cp_tags_capnp_cython_11Job_Builder_2id_2__set__(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_20cp_tags_capnp_cython_11Job_Builder_6_get_patterns(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_20cp_tags_capnp_cython_11Job_Builder_8_set_patterns(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_20cp_tags_capnp_cython_11Job_Builder_8patterns___get__(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self); /* proto */
static int __pyx_pf_20cp_tags_capnp_cython_11Job_Builder_8patterns_2__set__(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_20cp_tags_capnp_cython_11Job_Builder_10_get_events(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_20cp_tags_capnp_cython_11Job_Builder_12_set_events(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_20cp_tags_capnp_cython_11Job_Builder_6events___get__(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self); /* proto */
static int __pyx_pf_20cp_tags_capnp_cython_11Job_Builder_6events_2__set__(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_20cp_tags_capnp_cython_11Job_Builder_14_get_window(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_20cp_tags_capnp_cython_11Job_Builder_16_set_window(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, uint16_t __pyx_v_value); /* proto */
static PyObject *__pyx_pf_20cp_tags_capnp_cython_11Job_Builder_6window___get__(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self); /* proto */
static int __pyx_pf_20cp_tags_capnp_cython_11Job_Builder_6window_2__set__(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_20cp_tags_capnp_cython_11Job_Builder_18_get_duration(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_20cp_tags_capnp_cython_11Job_Builder_20_set_duration(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_20cp_tags_capnp_cython_11Job_Builder_8duration___get__(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self); /* proto */
static int __pyx_pf_20cp_tags_capnp_cython_11Job_Builder_8duration_2__set__(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_20cp_tags_capnp_cython_11Job_Builder_22_get_finished(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_20cp_tags_capnp_cython_11Job_Builder_24_set_finished(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, bool __pyx_v_value); /* proto */
static PyObject *__pyx_pf_20cp_tags_capnp_cython_11Job_Builder_8finished___get__(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self); /* proto */
static int __pyx_pf_20cp_tags_capnp_cython_11Job_Builder_8finished_2__set__(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_20cp_tags_capnp_cython_11Job_Builder_26_get_starttag(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_20cp_tags_capnp_cython_11Job_Builder_28_set_starttag(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, uint64_t __pyx_v_value); /* proto */
static PyObject *__pyx_pf_20cp_tags_capnp_cython_11Job_Builder_8starttag___get__(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self); /* proto */
static int __pyx_pf_20cp_tags_capnp_cython_11Job_Builder_8starttag_2__set__(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_20cp_tags_capnp_cython_11Job_Builder_30_get_stoptag(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_20cp_tags_capnp_cython_11Job_Builder_32_set_stoptag(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, uint64_t __pyx_v_value); /* proto */
static PyObject *__pyx_pf_20cp_tags_capnp_cython_11Job_Builder_7stoptag___get__(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self); /* proto */
static int __pyx_pf_20cp_tags_capnp_cython_11Job_Builder_7stoptag_2__set__(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_20cp_tags_capnp_cython_11Job_Builder_34_get_err(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_20cp_tags_capnp_cython_11Job_Builder_36_set_err(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_20cp_tags_capnp_cython_11Job_Builder_3err___get__(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self); /* proto */
static int __pyx_pf_20cp_tags_capnp_cython_11Job_Builder_3err_2__set__(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_20cp_tags_capnp_cython_11Job_Builder_38to_dict(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, PyObject *__pyx_v_verbose, PyObject *__pyx_v_ordered); /* proto */
static PyObject *__pyx_pf_20cp_tags_capnp_cython_11Job_Builder_40from_dict(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, PyObject *__pyx_v_d); /* proto */
static PyObject *__pyx_pf_20cp_tags_capnp_cython_11Job_Builder_42__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_20cp_tags_capnp_cython_11Job_Builder_44__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_20cp_tags_capnp_cython_Job_Reader(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_20cp_tags_capnp_cython_Job_Builder(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_int_10252874616994876655;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
/* Late includes */

/* "cp_tags_capnp_cython.pyx":29
 * from capnp.helpers.non_circular cimport reraise_kj_exception
 * 
 * cdef DynamicValue.Reader _extract_dynamic_struct_builder(_DynamicStructBuilder value):             # <<<<<<<<<<<<<<
 *     return DynamicValue.Reader(value.thisptr.asReader())
 * 
 */

static  ::capnp::DynamicValue::Reader __pyx_f_20cp_tags_capnp_cython__extract_dynamic_struct_builder(struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder *__pyx_v_value) {
   ::capnp::DynamicValue::Reader __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_extract_dynamic_struct_builder", 0);

  /* "cp_tags_capnp_cython.pyx":30
 * 
 * cdef DynamicValue.Reader _extract_dynamic_struct_builder(_DynamicStructBuilder value):
 *     return DynamicValue.Reader(value.thisptr.asReader())             # <<<<<<<<<<<<<<
 * 
 * cdef DynamicValue.Reader _extract_dynamic_struct_reader(_DynamicStructReader value):
 */
  __pyx_r =  ::capnp::DynamicValue::Reader(__pyx_v_value->thisptr.asReader());
  goto __pyx_L0;

  /* "cp_tags_capnp_cython.pyx":29
 * from capnp.helpers.non_circular cimport reraise_kj_exception
 * 
 * cdef DynamicValue.Reader _extract_dynamic_struct_builder(_DynamicStructBuilder value):             # <<<<<<<<<<<<<<
 *     return DynamicValue.Reader(value.thisptr.asReader())
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cp_tags_capnp_cython.pyx":32
 *     return DynamicValue.Reader(value.thisptr.asReader())
 * 
 * cdef DynamicValue.Reader _extract_dynamic_struct_reader(_DynamicStructReader value):             # <<<<<<<<<<<<<<
 *     return DynamicValue.Reader(value.thisptr)
 * 
 */

static  ::capnp::DynamicValue::Reader __pyx_f_20cp_tags_capnp_cython__extract_dynamic_struct_reader(struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructReader *__pyx_v_value) {
   ::capnp::DynamicValue::Reader __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_extract_dynamic_struct_reader", 0);

  /* "cp_tags_capnp_cython.pyx":33
 * 
 * cdef DynamicValue.Reader _extract_dynamic_struct_reader(_DynamicStructReader value):
 *     return DynamicValue.Reader(value.thisptr)             # <<<<<<<<<<<<<<
 * 
 * cdef DynamicValue.Reader _extract_dynamic_enum(_DynamicEnum value):
 */
  __pyx_r =  ::capnp::DynamicValue::Reader(__pyx_v_value->thisptr);
  goto __pyx_L0;

  /* "cp_tags_capnp_cython.pyx":32
 *     return DynamicValue.Reader(value.thisptr.asReader())
 * 
 * cdef DynamicValue.Reader _extract_dynamic_struct_reader(_DynamicStructReader value):             # <<<<<<<<<<<<<<
 *     return DynamicValue.Reader(value.thisptr)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cp_tags_capnp_cython.pyx":35
 *     return DynamicValue.Reader(value.thisptr)
 * 
 * cdef DynamicValue.Reader _extract_dynamic_enum(_DynamicEnum value):             # <<<<<<<<<<<<<<
 *     return DynamicValue.Reader(value.thisptr)
 * 
 */

static  ::capnp::DynamicValue::Reader __pyx_f_20cp_tags_capnp_cython__extract_dynamic_enum(struct __pyx_obj_5capnp_3lib_5capnp__DynamicEnum *__pyx_v_value) {
   ::capnp::DynamicValue::Reader __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_extract_dynamic_enum", 0);

  /* "cp_tags_capnp_cython.pyx":36
 * 
 * cdef DynamicValue.Reader _extract_dynamic_enum(_DynamicEnum value):
 *     return DynamicValue.Reader(value.thisptr)             # <<<<<<<<<<<<<<
 * 
 * cdef _from_list(_DynamicListBuilder msg, list d):
 */
  __pyx_r =  ::capnp::DynamicValue::Reader(__pyx_v_value->thisptr);
  goto __pyx_L0;

  /* "cp_tags_capnp_cython.pyx":35
 *     return DynamicValue.Reader(value.thisptr)
 * 
 * cdef DynamicValue.Reader _extract_dynamic_enum(_DynamicEnum value):             # <<<<<<<<<<<<<<
 *     return DynamicValue.Reader(value.thisptr)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cp_tags_capnp_cython.pyx":38
 *     return DynamicValue.Reader(value.thisptr)
 * 
 * cdef _from_list(_DynamicListBuilder msg, list d):             # <<<<<<<<<<<<<<
 *     cdef size_t count = 0
 *     for val in d:
 */

static PyObject *__pyx_f_20cp_tags_capnp_cython__from_list(struct __pyx_obj_5capnp_3lib_5capnp__DynamicListBuilder *__pyx_v_msg, PyObject *__pyx_v_d) {
  size_t __pyx_v_count;
  PyObject *__pyx_v_val = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_from_list", 0);

  /* "cp_tags_capnp_cython.pyx":39
 * 
 * cdef _from_list(_DynamicListBuilder msg, list d):
 *     cdef size_t count = 0             # <<<<<<<<<<<<<<
 *     for val in d:
 *         msg._set(count, val)
 */
  __pyx_v_count = 0;

  /* "cp_tags_capnp_cython.pyx":40
 * cdef _from_list(_DynamicListBuilder msg, list d):
 *     cdef size_t count = 0
 *     for val in d:             # <<<<<<<<<<<<<<
 *         msg._set(count, val)
 *         count += 1
 */
  if (unlikely(__pyx_v_d == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(1, 40, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_d; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 40, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 40, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_val, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "cp_tags_capnp_cython.pyx":41
 *     cdef size_t count = 0
 *     for val in d:
 *         msg._set(count, val)             # <<<<<<<<<<<<<<
 *         count += 1
 * 
 */
    __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_v_count); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 41, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = ((struct __pyx_vtabstruct_5capnp_3lib_5capnp__DynamicListBuilder *)__pyx_v_msg->__pyx_vtab)->_set(__pyx_v_msg, __pyx_t_3, __pyx_v_val, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 41, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "cp_tags_capnp_cython.pyx":42
 *     for val in d:
 *         msg._set(count, val)
 *         count += 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_count = (__pyx_v_count + 1);

    /* "cp_tags_capnp_cython.pyx":40
 * cdef _from_list(_DynamicListBuilder msg, list d):
 *     cdef size_t count = 0
 *     for val in d:             # <<<<<<<<<<<<<<
 *         msg._set(count, val)
 *         count += 1
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cp_tags_capnp_cython.pyx":38
 *     return DynamicValue.Reader(value.thisptr)
 * 
 * cdef _from_list(_DynamicListBuilder msg, list d):             # <<<<<<<<<<<<<<
 *     cdef size_t count = 0
 *     for val in d:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cp_tags_capnp_cython._from_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_val);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cp_tags_capnp_cython.pyx":108
 * cdef class Job_Reader(_DynamicStructReader):
 *     cdef Job.Reader thisptr_child
 *     def __init__(self, _DynamicStructReader struct):             # <<<<<<<<<<<<<<
 *         self._init(struct.thisptr, struct._parent, struct.is_root, False)
 *         self.thisptr_child = (<C_DynamicStruct_Reader>struct.thisptr).asJob()
 */

/* Python wrapper */
static int __pyx_pw_20cp_tags_capnp_cython_10Job_Reader_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_20cp_tags_capnp_cython_10Job_Reader_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructReader *__pyx_v_struct = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_struct,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_struct)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(1, 108, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_struct = ((struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructReader *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 108, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Reader.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_struct), __pyx_ptype_5capnp_3lib_5capnp__DynamicStructReader, 1, "struct", 0))) __PYX_ERR(1, 108, __pyx_L1_error)
  __pyx_r = __pyx_pf_20cp_tags_capnp_cython_10Job_Reader___init__(((struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *)__pyx_v_self), __pyx_v_struct);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_20cp_tags_capnp_cython_10Job_Reader___init__(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *__pyx_v_self, struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructReader *__pyx_v_struct) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  struct __pyx_opt_args_5capnp_3lib_5capnp_20_DynamicStructReader__init __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "cp_tags_capnp_cython.pyx":109
 *     cdef Job.Reader thisptr_child
 *     def __init__(self, _DynamicStructReader struct):
 *         self._init(struct.thisptr, struct._parent, struct.is_root, False)             # <<<<<<<<<<<<<<
 *         self.thisptr_child = (<C_DynamicStruct_Reader>struct.thisptr).asJob()
 * 
 */
  __pyx_t_1 = __pyx_v_struct->_parent;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_3.__pyx_n = 2;
  __pyx_t_3.isRoot = __pyx_v_struct->is_root;
  __pyx_t_3.tryRegistry = 0;
  __pyx_t_2 = ((struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Reader *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base._init(((struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructReader *)__pyx_v_self), __pyx_v_struct->thisptr, __pyx_t_1, &__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cp_tags_capnp_cython.pyx":110
 *     def __init__(self, _DynamicStructReader struct):
 *         self._init(struct.thisptr, struct._parent, struct.is_root, False)
 *         self.thisptr_child = (<C_DynamicStruct_Reader>struct.thisptr).asJob()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->thisptr_child = (( ::capnp::DynamicStruct::Reader)__pyx_v_struct->thisptr).as<Job>();

  /* "cp_tags_capnp_cython.pyx":108
 * cdef class Job_Reader(_DynamicStructReader):
 *     cdef Job.Reader thisptr_child
 *     def __init__(self, _DynamicStructReader struct):             # <<<<<<<<<<<<<<
 *         self._init(struct.thisptr, struct._parent, struct.is_root, False)
 *         self.thisptr_child = (<C_DynamicStruct_Reader>struct.thisptr).asJob()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Reader.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cp_tags_capnp_cython.pyx":113
 * 
 * 
 *     cpdef _get_id(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr_child.getId()
 * 
 */

static PyObject *__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_3_get_id(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_20cp_tags_capnp_cython_10Job_Reader__get_id(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  uint64_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_id", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 113, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_3_get_id)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 113, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "cp_tags_capnp_cython.pyx":114
 * 
 *     cpdef _get_id(self):
 *         return self.thisptr_child.getId()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_5 = __pyx_v_self->thisptr_child.getId();
  } catch(...) {
    reraise_kj_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(1, 114, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cp_tags_capnp_cython.pyx":113
 * 
 * 
 *     cpdef _get_id(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr_child.getId()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Reader._get_id", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_3_get_id(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_20cp_tags_capnp_cython_10Job_Reader_2_get_id[] = "Job_Reader._get_id(self)";
static PyObject *__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_3_get_id(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_id (wrapper)", 0);
  __pyx_r = __pyx_pf_20cp_tags_capnp_cython_10Job_Reader_2_get_id(((struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_20cp_tags_capnp_cython_10Job_Reader_2_get_id(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_id", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_20cp_tags_capnp_cython_10Job_Reader__get_id(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Reader._get_id", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cp_tags_capnp_cython.pyx":118
 * 
 *     property id:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._get_id()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_2id_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_2id_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_20cp_tags_capnp_cython_10Job_Reader_2id___get__(((struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_20cp_tags_capnp_cython_10Job_Reader_2id___get__(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cp_tags_capnp_cython.pyx":119
 *     property id:
 *         def __get__(self):
 *             return self._get_id()             # <<<<<<<<<<<<<<
 * 
 *     cpdef _get_patterns(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Reader *)__pyx_v_self->__pyx_base.__pyx_vtab)->_get_id(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cp_tags_capnp_cython.pyx":118
 * 
 *     property id:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._get_id()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Reader.id.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cp_tags_capnp_cython.pyx":121
 *             return self._get_id()
 * 
 *     cpdef _get_patterns(self):             # <<<<<<<<<<<<<<
 *         cdef DynamicValue.Reader temp = self.thisptr_child.getPatterns()
 *         return to_python_reader(temp, self._parent)
 */

static PyObject *__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_5_get_patterns(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_20cp_tags_capnp_cython_10Job_Reader__get_patterns(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *__pyx_v_self, int __pyx_skip_dispatch) {
   ::capnp::DynamicValue::Reader __pyx_v_temp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
   ::capnp::DynamicValue::Reader __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_patterns", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_patterns); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 121, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_5_get_patterns)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 121, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "cp_tags_capnp_cython.pyx":122
 * 
 *     cpdef _get_patterns(self):
 *         cdef DynamicValue.Reader temp = self.thisptr_child.getPatterns()             # <<<<<<<<<<<<<<
 *         return to_python_reader(temp, self._parent)
 * 
 */
  try {
    __pyx_t_5 = __pyx_v_self->thisptr_child.getPatterns();
  } catch(...) {
    reraise_kj_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(1, 122, __pyx_L1_error)
  }
  __pyx_v_temp = __pyx_t_5;

  /* "cp_tags_capnp_cython.pyx":123
 *     cpdef _get_patterns(self):
 *         cdef DynamicValue.Reader temp = self.thisptr_child.getPatterns()
 *         return to_python_reader(temp, self._parent)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_v_self->__pyx_base._parent;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_5capnp_3lib_5capnp_to_python_reader(__pyx_v_temp, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cp_tags_capnp_cython.pyx":121
 *             return self._get_id()
 * 
 *     cpdef _get_patterns(self):             # <<<<<<<<<<<<<<
 *         cdef DynamicValue.Reader temp = self.thisptr_child.getPatterns()
 *         return to_python_reader(temp, self._parent)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Reader._get_patterns", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_5_get_patterns(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_20cp_tags_capnp_cython_10Job_Reader_4_get_patterns[] = "Job_Reader._get_patterns(self)";
static PyObject *__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_5_get_patterns(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_patterns (wrapper)", 0);
  __pyx_r = __pyx_pf_20cp_tags_capnp_cython_10Job_Reader_4_get_patterns(((struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_20cp_tags_capnp_cython_10Job_Reader_4_get_patterns(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_patterns", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_20cp_tags_capnp_cython_10Job_Reader__get_patterns(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Reader._get_patterns", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cp_tags_capnp_cython.pyx":127
 * 
 *     property patterns:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._get_patterns()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_8patterns_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_8patterns_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_20cp_tags_capnp_cython_10Job_Reader_8patterns___get__(((struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_20cp_tags_capnp_cython_10Job_Reader_8patterns___get__(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cp_tags_capnp_cython.pyx":128
 *     property patterns:
 *         def __get__(self):
 *             return self._get_patterns()             # <<<<<<<<<<<<<<
 * 
 *     cpdef _get_events(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Reader *)__pyx_v_self->__pyx_base.__pyx_vtab)->_get_patterns(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cp_tags_capnp_cython.pyx":127
 * 
 *     property patterns:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._get_patterns()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Reader.patterns.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cp_tags_capnp_cython.pyx":130
 *             return self._get_patterns()
 * 
 *     cpdef _get_events(self):             # <<<<<<<<<<<<<<
 *         cdef DynamicValue.Reader temp = self.thisptr_child.getEvents()
 *         return to_python_reader(temp, self._parent)
 */

static PyObject *__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_7_get_events(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_20cp_tags_capnp_cython_10Job_Reader__get_events(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *__pyx_v_self, int __pyx_skip_dispatch) {
   ::capnp::DynamicValue::Reader __pyx_v_temp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
   ::capnp::DynamicValue::Reader __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_events", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_events); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 130, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_7_get_events)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 130, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "cp_tags_capnp_cython.pyx":131
 * 
 *     cpdef _get_events(self):
 *         cdef DynamicValue.Reader temp = self.thisptr_child.getEvents()             # <<<<<<<<<<<<<<
 *         return to_python_reader(temp, self._parent)
 * 
 */
  try {
    __pyx_t_5 = __pyx_v_self->thisptr_child.getEvents();
  } catch(...) {
    reraise_kj_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(1, 131, __pyx_L1_error)
  }
  __pyx_v_temp = __pyx_t_5;

  /* "cp_tags_capnp_cython.pyx":132
 *     cpdef _get_events(self):
 *         cdef DynamicValue.Reader temp = self.thisptr_child.getEvents()
 *         return to_python_reader(temp, self._parent)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_v_self->__pyx_base._parent;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_5capnp_3lib_5capnp_to_python_reader(__pyx_v_temp, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cp_tags_capnp_cython.pyx":130
 *             return self._get_patterns()
 * 
 *     cpdef _get_events(self):             # <<<<<<<<<<<<<<
 *         cdef DynamicValue.Reader temp = self.thisptr_child.getEvents()
 *         return to_python_reader(temp, self._parent)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Reader._get_events", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_7_get_events(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_20cp_tags_capnp_cython_10Job_Reader_6_get_events[] = "Job_Reader._get_events(self)";
static PyObject *__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_7_get_events(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_events (wrapper)", 0);
  __pyx_r = __pyx_pf_20cp_tags_capnp_cython_10Job_Reader_6_get_events(((struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_20cp_tags_capnp_cython_10Job_Reader_6_get_events(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_events", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_20cp_tags_capnp_cython_10Job_Reader__get_events(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Reader._get_events", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cp_tags_capnp_cython.pyx":136
 * 
 *     property events:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._get_events()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_6events_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_6events_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_20cp_tags_capnp_cython_10Job_Reader_6events___get__(((struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_20cp_tags_capnp_cython_10Job_Reader_6events___get__(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cp_tags_capnp_cython.pyx":137
 *     property events:
 *         def __get__(self):
 *             return self._get_events()             # <<<<<<<<<<<<<<
 * 
 *     cpdef _get_window(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Reader *)__pyx_v_self->__pyx_base.__pyx_vtab)->_get_events(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cp_tags_capnp_cython.pyx":136
 * 
 *     property events:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._get_events()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Reader.events.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cp_tags_capnp_cython.pyx":139
 *             return self._get_events()
 * 
 *     cpdef _get_window(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr_child.getWindow()
 * 
 */

static PyObject *__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_9_get_window(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_20cp_tags_capnp_cython_10Job_Reader__get_window(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  uint64_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_window", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_window); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 139, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_9_get_window)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 139, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "cp_tags_capnp_cython.pyx":140
 * 
 *     cpdef _get_window(self):
 *         return self.thisptr_child.getWindow()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_5 = __pyx_v_self->thisptr_child.getWindow();
  } catch(...) {
    reraise_kj_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(1, 140, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cp_tags_capnp_cython.pyx":139
 *             return self._get_events()
 * 
 *     cpdef _get_window(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr_child.getWindow()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Reader._get_window", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_9_get_window(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_20cp_tags_capnp_cython_10Job_Reader_8_get_window[] = "Job_Reader._get_window(self)";
static PyObject *__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_9_get_window(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_window (wrapper)", 0);
  __pyx_r = __pyx_pf_20cp_tags_capnp_cython_10Job_Reader_8_get_window(((struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_20cp_tags_capnp_cython_10Job_Reader_8_get_window(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_window", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_20cp_tags_capnp_cython_10Job_Reader__get_window(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Reader._get_window", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cp_tags_capnp_cython.pyx":144
 * 
 *     property window:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._get_window()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_6window_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_6window_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_20cp_tags_capnp_cython_10Job_Reader_6window___get__(((struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_20cp_tags_capnp_cython_10Job_Reader_6window___get__(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cp_tags_capnp_cython.pyx":145
 *     property window:
 *         def __get__(self):
 *             return self._get_window()             # <<<<<<<<<<<<<<
 * 
 *     cpdef _get_duration(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Reader *)__pyx_v_self->__pyx_base.__pyx_vtab)->_get_window(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cp_tags_capnp_cython.pyx":144
 * 
 *     property window:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._get_window()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Reader.window.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cp_tags_capnp_cython.pyx":147
 *             return self._get_window()
 * 
 *     cpdef _get_duration(self):             # <<<<<<<<<<<<<<
 *         cdef DynamicValue.Reader temp = self.thisptr_child.getDuration()
 *         return to_python_reader(temp, self._parent)
 */

static PyObject *__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_11_get_duration(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_20cp_tags_capnp_cython_10Job_Reader__get_duration(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *__pyx_v_self, int __pyx_skip_dispatch) {
   ::capnp::DynamicValue::Reader __pyx_v_temp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
   ::capnp::DynamicValue::Reader __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_duration", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_duration); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 147, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_11_get_duration)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 147, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "cp_tags_capnp_cython.pyx":148
 * 
 *     cpdef _get_duration(self):
 *         cdef DynamicValue.Reader temp = self.thisptr_child.getDuration()             # <<<<<<<<<<<<<<
 *         return to_python_reader(temp, self._parent)
 * 
 */
  try {
    __pyx_t_5 = __pyx_v_self->thisptr_child.getDuration();
  } catch(...) {
    reraise_kj_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(1, 148, __pyx_L1_error)
  }
  __pyx_v_temp = __pyx_t_5;

  /* "cp_tags_capnp_cython.pyx":149
 *     cpdef _get_duration(self):
 *         cdef DynamicValue.Reader temp = self.thisptr_child.getDuration()
 *         return to_python_reader(temp, self._parent)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_v_self->__pyx_base._parent;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_5capnp_3lib_5capnp_to_python_reader(__pyx_v_temp, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cp_tags_capnp_cython.pyx":147
 *             return self._get_window()
 * 
 *     cpdef _get_duration(self):             # <<<<<<<<<<<<<<
 *         cdef DynamicValue.Reader temp = self.thisptr_child.getDuration()
 *         return to_python_reader(temp, self._parent)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Reader._get_duration", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_11_get_duration(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_20cp_tags_capnp_cython_10Job_Reader_10_get_duration[] = "Job_Reader._get_duration(self)";
static PyObject *__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_11_get_duration(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_duration (wrapper)", 0);
  __pyx_r = __pyx_pf_20cp_tags_capnp_cython_10Job_Reader_10_get_duration(((struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_20cp_tags_capnp_cython_10Job_Reader_10_get_duration(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_duration", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_20cp_tags_capnp_cython_10Job_Reader__get_duration(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Reader._get_duration", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cp_tags_capnp_cython.pyx":153
 * 
 *     property duration:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._get_duration()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_8duration_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_8duration_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_20cp_tags_capnp_cython_10Job_Reader_8duration___get__(((struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_20cp_tags_capnp_cython_10Job_Reader_8duration___get__(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cp_tags_capnp_cython.pyx":154
 *     property duration:
 *         def __get__(self):
 *             return self._get_duration()             # <<<<<<<<<<<<<<
 * 
 *     cpdef _get_finished(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Reader *)__pyx_v_self->__pyx_base.__pyx_vtab)->_get_duration(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cp_tags_capnp_cython.pyx":153
 * 
 *     property duration:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._get_duration()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Reader.duration.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cp_tags_capnp_cython.pyx":156
 *             return self._get_duration()
 * 
 *     cpdef _get_finished(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr_child.getFinished()
 * 
 */

static PyObject *__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_13_get_finished(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_20cp_tags_capnp_cython_10Job_Reader__get_finished(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  bool __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_finished", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_finished); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 156, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_13_get_finished)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 156, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "cp_tags_capnp_cython.pyx":157
 * 
 *     cpdef _get_finished(self):
 *         return self.thisptr_child.getFinished()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_5 = __pyx_v_self->thisptr_child.getFinished();
  } catch(...) {
    reraise_kj_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(1, 157, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cp_tags_capnp_cython.pyx":156
 *             return self._get_duration()
 * 
 *     cpdef _get_finished(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr_child.getFinished()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Reader._get_finished", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_13_get_finished(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_20cp_tags_capnp_cython_10Job_Reader_12_get_finished[] = "Job_Reader._get_finished(self)";
static PyObject *__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_13_get_finished(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_finished (wrapper)", 0);
  __pyx_r = __pyx_pf_20cp_tags_capnp_cython_10Job_Reader_12_get_finished(((struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_20cp_tags_capnp_cython_10Job_Reader_12_get_finished(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_finished", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_20cp_tags_capnp_cython_10Job_Reader__get_finished(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Reader._get_finished", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cp_tags_capnp_cython.pyx":161
 * 
 *     property finished:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._get_finished()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_8finished_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_8finished_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_20cp_tags_capnp_cython_10Job_Reader_8finished___get__(((struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_20cp_tags_capnp_cython_10Job_Reader_8finished___get__(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cp_tags_capnp_cython.pyx":162
 *     property finished:
 *         def __get__(self):
 *             return self._get_finished()             # <<<<<<<<<<<<<<
 * 
 *     cpdef _get_starttag(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Reader *)__pyx_v_self->__pyx_base.__pyx_vtab)->_get_finished(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cp_tags_capnp_cython.pyx":161
 * 
 *     property finished:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._get_finished()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Reader.finished.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cp_tags_capnp_cython.pyx":164
 *             return self._get_finished()
 * 
 *     cpdef _get_starttag(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr_child.getStarttag()
 * 
 */

static PyObject *__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_15_get_starttag(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_20cp_tags_capnp_cython_10Job_Reader__get_starttag(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  uint64_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_starttag", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_starttag); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 164, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_15_get_starttag)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 164, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "cp_tags_capnp_cython.pyx":165
 * 
 *     cpdef _get_starttag(self):
 *         return self.thisptr_child.getStarttag()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_5 = __pyx_v_self->thisptr_child.getStarttag();
  } catch(...) {
    reraise_kj_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(1, 165, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cp_tags_capnp_cython.pyx":164
 *             return self._get_finished()
 * 
 *     cpdef _get_starttag(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr_child.getStarttag()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Reader._get_starttag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_15_get_starttag(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_20cp_tags_capnp_cython_10Job_Reader_14_get_starttag[] = "Job_Reader._get_starttag(self)";
static PyObject *__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_15_get_starttag(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_starttag (wrapper)", 0);
  __pyx_r = __pyx_pf_20cp_tags_capnp_cython_10Job_Reader_14_get_starttag(((struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_20cp_tags_capnp_cython_10Job_Reader_14_get_starttag(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_starttag", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_20cp_tags_capnp_cython_10Job_Reader__get_starttag(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Reader._get_starttag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cp_tags_capnp_cython.pyx":169
 * 
 *     property starttag:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._get_starttag()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_8starttag_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_8starttag_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_20cp_tags_capnp_cython_10Job_Reader_8starttag___get__(((struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_20cp_tags_capnp_cython_10Job_Reader_8starttag___get__(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cp_tags_capnp_cython.pyx":170
 *     property starttag:
 *         def __get__(self):
 *             return self._get_starttag()             # <<<<<<<<<<<<<<
 * 
 *     cpdef _get_stoptag(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Reader *)__pyx_v_self->__pyx_base.__pyx_vtab)->_get_starttag(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cp_tags_capnp_cython.pyx":169
 * 
 *     property starttag:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._get_starttag()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Reader.starttag.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cp_tags_capnp_cython.pyx":172
 *             return self._get_starttag()
 * 
 *     cpdef _get_stoptag(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr_child.getStoptag()
 * 
 */

static PyObject *__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_17_get_stoptag(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_20cp_tags_capnp_cython_10Job_Reader__get_stoptag(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  uint64_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_stoptag", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_stoptag); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 172, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_17_get_stoptag)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 172, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "cp_tags_capnp_cython.pyx":173
 * 
 *     cpdef _get_stoptag(self):
 *         return self.thisptr_child.getStoptag()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_5 = __pyx_v_self->thisptr_child.getStoptag();
  } catch(...) {
    reraise_kj_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(1, 173, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cp_tags_capnp_cython.pyx":172
 *             return self._get_starttag()
 * 
 *     cpdef _get_stoptag(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr_child.getStoptag()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Reader._get_stoptag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_17_get_stoptag(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_20cp_tags_capnp_cython_10Job_Reader_16_get_stoptag[] = "Job_Reader._get_stoptag(self)";
static PyObject *__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_17_get_stoptag(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_stoptag (wrapper)", 0);
  __pyx_r = __pyx_pf_20cp_tags_capnp_cython_10Job_Reader_16_get_stoptag(((struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_20cp_tags_capnp_cython_10Job_Reader_16_get_stoptag(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_stoptag", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_20cp_tags_capnp_cython_10Job_Reader__get_stoptag(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Reader._get_stoptag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cp_tags_capnp_cython.pyx":177
 * 
 *     property stoptag:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._get_stoptag()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_7stoptag_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_7stoptag_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_20cp_tags_capnp_cython_10Job_Reader_7stoptag___get__(((struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_20cp_tags_capnp_cython_10Job_Reader_7stoptag___get__(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cp_tags_capnp_cython.pyx":178
 *     property stoptag:
 *         def __get__(self):
 *             return self._get_stoptag()             # <<<<<<<<<<<<<<
 * 
 *     cpdef _get_err(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Reader *)__pyx_v_self->__pyx_base.__pyx_vtab)->_get_stoptag(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cp_tags_capnp_cython.pyx":177
 * 
 *     property stoptag:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._get_stoptag()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Reader.stoptag.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cp_tags_capnp_cython.pyx":180
 *             return self._get_stoptag()
 * 
 *     cpdef _get_err(self):             # <<<<<<<<<<<<<<
 *         temp = self.thisptr_child.getErr()
 *         return (<char*>temp.begin())[:temp.size()]
 */

static PyObject *__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_19_get_err(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_20cp_tags_capnp_cython_10Job_Reader__get_err(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *__pyx_v_self, int __pyx_skip_dispatch) {
   ::kj::StringPtr __pyx_v_temp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
   ::kj::StringPtr __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_err", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_err); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 180, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_19_get_err)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 180, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "cp_tags_capnp_cython.pyx":181
 * 
 *     cpdef _get_err(self):
 *         temp = self.thisptr_child.getErr()             # <<<<<<<<<<<<<<
 *         return (<char*>temp.begin())[:temp.size()]
 * 
 */
  try {
    __pyx_t_5 = __pyx_v_self->thisptr_child.getErr();
  } catch(...) {
    reraise_kj_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(1, 181, __pyx_L1_error)
  }
  __pyx_v_temp = __pyx_t_5;

  /* "cp_tags_capnp_cython.pyx":182
 *     cpdef _get_err(self):
 *         temp = self.thisptr_child.getErr()
 *         return (<char*>temp.begin())[:temp.size()]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(((char *)__pyx_v_temp.begin()) + 0, __pyx_v_temp.size() - 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cp_tags_capnp_cython.pyx":180
 *             return self._get_stoptag()
 * 
 *     cpdef _get_err(self):             # <<<<<<<<<<<<<<
 *         temp = self.thisptr_child.getErr()
 *         return (<char*>temp.begin())[:temp.size()]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Reader._get_err", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_19_get_err(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_20cp_tags_capnp_cython_10Job_Reader_18_get_err[] = "Job_Reader._get_err(self)";
static PyObject *__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_19_get_err(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_err (wrapper)", 0);
  __pyx_r = __pyx_pf_20cp_tags_capnp_cython_10Job_Reader_18_get_err(((struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_20cp_tags_capnp_cython_10Job_Reader_18_get_err(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_err", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_20cp_tags_capnp_cython_10Job_Reader__get_err(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Reader._get_err", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cp_tags_capnp_cython.pyx":186
 * 
 *     property err:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._get_err()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_3err_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_3err_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_20cp_tags_capnp_cython_10Job_Reader_3err___get__(((struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_20cp_tags_capnp_cython_10Job_Reader_3err___get__(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cp_tags_capnp_cython.pyx":187
 *     property err:
 *         def __get__(self):
 *             return self._get_err()             # <<<<<<<<<<<<<<
 * 
 *     def to_dict(self, verbose=False, ordered=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Reader *)__pyx_v_self->__pyx_base.__pyx_vtab)->_get_err(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 187, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cp_tags_capnp_cython.pyx":186
 * 
 *     property err:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._get_err()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Reader.err.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cp_tags_capnp_cython.pyx":189
 *             return self._get_err()
 * 
 *     def to_dict(self, verbose=False, ordered=False):             # <<<<<<<<<<<<<<
 *         ret = {
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_21to_dict(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_20cp_tags_capnp_cython_10Job_Reader_20to_dict[] = "Job_Reader.to_dict(self, verbose=False, ordered=False)";
static PyObject *__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_21to_dict(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_verbose = 0;
  PyObject *__pyx_v_ordered = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_dict (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_verbose,&__pyx_n_s_ordered,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)Py_False);
    values[1] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_verbose);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ordered);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "to_dict") < 0)) __PYX_ERR(1, 189, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_verbose = values[0];
    __pyx_v_ordered = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("to_dict", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 189, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Reader.to_dict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_20cp_tags_capnp_cython_10Job_Reader_20to_dict(((struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *)__pyx_v_self), __pyx_v_verbose, __pyx_v_ordered);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_20cp_tags_capnp_cython_10Job_Reader_20to_dict(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *__pyx_v_self, PyObject *__pyx_v_verbose, PyObject *__pyx_v_ordered) {
  PyObject *__pyx_v_ret = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("to_dict", 0);

  /* "cp_tags_capnp_cython.pyx":193
 * 
 * 
 *         'id': _to_dict(self.id, verbose, ordered),             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(9); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 193, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_ordered); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 193, __pyx_L1_error)
  __pyx_t_5 = __pyx_f_5capnp_3lib_5capnp__to_dict(__pyx_t_2, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_id, __pyx_t_5) < 0) __PYX_ERR(1, 193, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "cp_tags_capnp_cython.pyx":196
 * 
 * 
 *         'patterns': _to_dict(self.patterns, verbose, ordered),             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_patterns); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 196, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_ordered); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 196, __pyx_L1_error)
  __pyx_t_2 = __pyx_f_5capnp_3lib_5capnp__to_dict(__pyx_t_5, __pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_patterns, __pyx_t_2) < 0) __PYX_ERR(1, 193, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cp_tags_capnp_cython.pyx":199
 * 
 * 
 *         'events': _to_dict(self.events, verbose, ordered),             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_events); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 199, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_ordered); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 199, __pyx_L1_error)
  __pyx_t_5 = __pyx_f_5capnp_3lib_5capnp__to_dict(__pyx_t_2, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_events, __pyx_t_5) < 0) __PYX_ERR(1, 193, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "cp_tags_capnp_cython.pyx":202
 * 
 * 
 *         'window': _to_dict(self.window, verbose, ordered),             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_window); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 202, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_ordered); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 202, __pyx_L1_error)
  __pyx_t_2 = __pyx_f_5capnp_3lib_5capnp__to_dict(__pyx_t_5, __pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_window, __pyx_t_2) < 0) __PYX_ERR(1, 193, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cp_tags_capnp_cython.pyx":205
 * 
 * 
 *         'duration': _to_dict(self.duration, verbose, ordered),             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_duration); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 205, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_ordered); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 205, __pyx_L1_error)
  __pyx_t_5 = __pyx_f_5capnp_3lib_5capnp__to_dict(__pyx_t_2, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_duration, __pyx_t_5) < 0) __PYX_ERR(1, 193, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "cp_tags_capnp_cython.pyx":208
 * 
 * 
 *         'finished': _to_dict(self.finished, verbose, ordered),             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_finished); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 208, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_ordered); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 208, __pyx_L1_error)
  __pyx_t_2 = __pyx_f_5capnp_3lib_5capnp__to_dict(__pyx_t_5, __pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_finished, __pyx_t_2) < 0) __PYX_ERR(1, 193, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cp_tags_capnp_cython.pyx":211
 * 
 * 
 *         'starttag': _to_dict(self.starttag, verbose, ordered),             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_starttag); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 211, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_ordered); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 211, __pyx_L1_error)
  __pyx_t_5 = __pyx_f_5capnp_3lib_5capnp__to_dict(__pyx_t_2, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_starttag, __pyx_t_5) < 0) __PYX_ERR(1, 193, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "cp_tags_capnp_cython.pyx":214
 * 
 * 
 *         'stoptag': _to_dict(self.stoptag, verbose, ordered),             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_stoptag); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 214, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_ordered); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 214, __pyx_L1_error)
  __pyx_t_2 = __pyx_f_5capnp_3lib_5capnp__to_dict(__pyx_t_5, __pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_stoptag, __pyx_t_2) < 0) __PYX_ERR(1, 193, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cp_tags_capnp_cython.pyx":217
 * 
 * 
 *         'err': _to_dict(self.err, verbose, ordered),             # <<<<<<<<<<<<<<
 * 
 *         }
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_err); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 217, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_ordered); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 217, __pyx_L1_error)
  __pyx_t_5 = __pyx_f_5capnp_3lib_5capnp__to_dict(__pyx_t_2, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_err, __pyx_t_5) < 0) __PYX_ERR(1, 193, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_ret = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cp_tags_capnp_cython.pyx":223
 * 
 * 
 *         return ret             # <<<<<<<<<<<<<<
 * 
 * cdef class Job_Builder(_DynamicStructBuilder):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "cp_tags_capnp_cython.pyx":189
 *             return self._get_err()
 * 
 *     def to_dict(self, verbose=False, ordered=False):             # <<<<<<<<<<<<<<
 *         ret = {
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Reader.to_dict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr,self.thisptr_child cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_23__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_20cp_tags_capnp_cython_10Job_Reader_22__reduce_cython__[] = "Job_Reader.__reduce_cython__(self)";
static PyObject *__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_23__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_20cp_tags_capnp_cython_10Job_Reader_22__reduce_cython__(((struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_20cp_tags_capnp_cython_10Job_Reader_22__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr,self.thisptr_child cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr,self.thisptr_child cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr,self.thisptr_child cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Reader.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr,self.thisptr_child cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr,self.thisptr_child cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_25__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_20cp_tags_capnp_cython_10Job_Reader_24__setstate_cython__[] = "Job_Reader.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_25__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_20cp_tags_capnp_cython_10Job_Reader_24__setstate_cython__(((struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_20cp_tags_capnp_cython_10Job_Reader_24__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.thisptr,self.thisptr_child cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr,self.thisptr_child cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr,self.thisptr_child cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr,self.thisptr_child cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Reader.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cp_tags_capnp_cython.pyx":227
 * cdef class Job_Builder(_DynamicStructBuilder):
 *     cdef Job.Builder thisptr_child
 *     def __init__(self, _DynamicStructBuilder struct):             # <<<<<<<<<<<<<<
 *         self._init(struct.thisptr, struct._parent, struct.is_root, False)
 *         self.thisptr_child = (<C_DynamicStruct_Builder>struct.thisptr).asJob()
 */

/* Python wrapper */
static int __pyx_pw_20cp_tags_capnp_cython_11Job_Builder_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_20cp_tags_capnp_cython_11Job_Builder_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder *__pyx_v_struct = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_struct,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_struct)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(1, 227, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_struct = ((struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 227, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_struct), __pyx_ptype_5capnp_3lib_5capnp__DynamicStructBuilder, 1, "struct", 0))) __PYX_ERR(1, 227, __pyx_L1_error)
  __pyx_r = __pyx_pf_20cp_tags_capnp_cython_11Job_Builder___init__(((struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self), __pyx_v_struct);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_20cp_tags_capnp_cython_11Job_Builder___init__(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder *__pyx_v_struct) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  struct __pyx_opt_args_5capnp_3lib_5capnp_21_DynamicStructBuilder__init __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "cp_tags_capnp_cython.pyx":228
 *     cdef Job.Builder thisptr_child
 *     def __init__(self, _DynamicStructBuilder struct):
 *         self._init(struct.thisptr, struct._parent, struct.is_root, False)             # <<<<<<<<<<<<<<
 *         self.thisptr_child = (<C_DynamicStruct_Builder>struct.thisptr).asJob()
 * 
 */
  __pyx_t_1 = __pyx_v_struct->_parent;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_3.__pyx_n = 2;
  __pyx_t_3.isRoot = __pyx_v_struct->is_root;
  __pyx_t_3.tryRegistry = 0;
  __pyx_t_2 = ((struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base._init(((struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder *)__pyx_v_self), __pyx_v_struct->thisptr, __pyx_t_1, &__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cp_tags_capnp_cython.pyx":229
 *     def __init__(self, _DynamicStructBuilder struct):
 *         self._init(struct.thisptr, struct._parent, struct.is_root, False)
 *         self.thisptr_child = (<C_DynamicStruct_Builder>struct.thisptr).asJob()             # <<<<<<<<<<<<<<
 * 
 *     cpdef _get_id(self):
 */
  __pyx_v_self->thisptr_child = (( ::capnp::DynamicStruct::Builder)__pyx_v_struct->thisptr).as<Job>();

  /* "cp_tags_capnp_cython.pyx":227
 * cdef class Job_Builder(_DynamicStructBuilder):
 *     cdef Job.Builder thisptr_child
 *     def __init__(self, _DynamicStructBuilder struct):             # <<<<<<<<<<<<<<
 *         self._init(struct.thisptr, struct._parent, struct.is_root, False)
 *         self.thisptr_child = (<C_DynamicStruct_Builder>struct.thisptr).asJob()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cp_tags_capnp_cython.pyx":231
 *         self.thisptr_child = (<C_DynamicStruct_Builder>struct.thisptr).asJob()
 * 
 *     cpdef _get_id(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr_child.getId()
 * 
 */

static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_3_get_id(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_20cp_tags_capnp_cython_11Job_Builder__get_id(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  uint64_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_id", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 231, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_3_get_id)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 231, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "cp_tags_capnp_cython.pyx":232
 * 
 *     cpdef _get_id(self):
 *         return self.thisptr_child.getId()             # <<<<<<<<<<<<<<
 * 
 *     cpdef _set_id(self, uint64_t value):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_5 = __pyx_v_self->thisptr_child.getId();
  } catch(...) {
    reraise_kj_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(1, 232, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cp_tags_capnp_cython.pyx":231
 *         self.thisptr_child = (<C_DynamicStruct_Builder>struct.thisptr).asJob()
 * 
 *     cpdef _get_id(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr_child.getId()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder._get_id", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_3_get_id(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_20cp_tags_capnp_cython_11Job_Builder_2_get_id[] = "Job_Builder._get_id(self)";
static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_3_get_id(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_id (wrapper)", 0);
  __pyx_r = __pyx_pf_20cp_tags_capnp_cython_11Job_Builder_2_get_id(((struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_20cp_tags_capnp_cython_11Job_Builder_2_get_id(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_id", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_20cp_tags_capnp_cython_11Job_Builder__get_id(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder._get_id", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cp_tags_capnp_cython.pyx":234
 *         return self.thisptr_child.getId()
 * 
 *     cpdef _set_id(self, uint64_t value):             # <<<<<<<<<<<<<<
 *         self.thisptr_child.setId(value)
 * 
 */

static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_5_set_id(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static PyObject *__pyx_f_20cp_tags_capnp_cython_11Job_Builder__set_id(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, uint64_t __pyx_v_value, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_set_id", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 234, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_5_set_id)) {
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_3 = __Pyx_PyInt_From_uint64_t(__pyx_v_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 234, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_4 = __pyx_t_1; __pyx_t_5 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
          }
        }
        __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 234, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "cp_tags_capnp_cython.pyx":235
 * 
 *     cpdef _set_id(self, uint64_t value):
 *         self.thisptr_child.setId(value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    __pyx_v_self->thisptr_child.setId(__pyx_v_value);
  } catch(...) {
    reraise_kj_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(1, 235, __pyx_L1_error)
  }

  /* "cp_tags_capnp_cython.pyx":234
 *         return self.thisptr_child.getId()
 * 
 *     cpdef _set_id(self, uint64_t value):             # <<<<<<<<<<<<<<
 *         self.thisptr_child.setId(value)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder._set_id", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_5_set_id(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static char __pyx_doc_20cp_tags_capnp_cython_11Job_Builder_4_set_id[] = "Job_Builder._set_id(self, uint64_t value)";
static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_5_set_id(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  uint64_t __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_set_id (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyInt_As_uint64_t(__pyx_arg_value); if (unlikely((__pyx_v_value == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 234, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder._set_id", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_20cp_tags_capnp_cython_11Job_Builder_4_set_id(((struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self), ((uint64_t)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_20cp_tags_capnp_cython_11Job_Builder_4_set_id(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, uint64_t __pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_set_id", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_20cp_tags_capnp_cython_11Job_Builder__set_id(__pyx_v_self, __pyx_v_value, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder._set_id", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cp_tags_capnp_cython.pyx":239
 * 
 *     property id:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._get_id()
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_2id_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_2id_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_20cp_tags_capnp_cython_11Job_Builder_2id___get__(((struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_20cp_tags_capnp_cython_11Job_Builder_2id___get__(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cp_tags_capnp_cython.pyx":240
 *     property id:
 *         def __get__(self):
 *             return self._get_id()             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self._set_id(value)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self->__pyx_base.__pyx_vtab)->_get_id(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cp_tags_capnp_cython.pyx":239
 * 
 *     property id:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._get_id()
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder.id.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cp_tags_capnp_cython.pyx":241
 *         def __get__(self):
 *             return self._get_id()
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self._set_id(value)
 *     cpdef _get_patterns(self):
 */

/* Python wrapper */
static int __pyx_pw_20cp_tags_capnp_cython_11Job_Builder_2id_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_20cp_tags_capnp_cython_11Job_Builder_2id_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_20cp_tags_capnp_cython_11Job_Builder_2id_2__set__(((struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_20cp_tags_capnp_cython_11Job_Builder_2id_2__set__(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cp_tags_capnp_cython.pyx":242
 *             return self._get_id()
 *         def __set__(self, value):
 *             self._set_id(value)             # <<<<<<<<<<<<<<
 *     cpdef _get_patterns(self):
 *         cdef DynamicValue.Builder temp = self.thisptr_child.getPatterns()
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_value); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 242, __pyx_L1_error)
  __pyx_t_2 = ((struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self->__pyx_base.__pyx_vtab)->_set_id(__pyx_v_self, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cp_tags_capnp_cython.pyx":241
 *         def __get__(self):
 *             return self._get_id()
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self._set_id(value)
 *     cpdef _get_patterns(self):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder.id.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cp_tags_capnp_cython.pyx":243
 *         def __set__(self, value):
 *             self._set_id(value)
 *     cpdef _get_patterns(self):             # <<<<<<<<<<<<<<
 *         cdef DynamicValue.Builder temp = self.thisptr_child.getPatterns()
 *         return to_python_builder(temp, self._parent)
 */

static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_7_get_patterns(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_20cp_tags_capnp_cython_11Job_Builder__get_patterns(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, int __pyx_skip_dispatch) {
   ::capnp::DynamicValue::Builder __pyx_v_temp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
   ::capnp::DynamicValue::Builder __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_patterns", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_patterns); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 243, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_7_get_patterns)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 243, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "cp_tags_capnp_cython.pyx":244
 *             self._set_id(value)
 *     cpdef _get_patterns(self):
 *         cdef DynamicValue.Builder temp = self.thisptr_child.getPatterns()             # <<<<<<<<<<<<<<
 *         return to_python_builder(temp, self._parent)
 * 
 */
  try {
    __pyx_t_5 = __pyx_v_self->thisptr_child.getPatterns();
  } catch(...) {
    reraise_kj_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(1, 244, __pyx_L1_error)
  }
  __pyx_v_temp = __pyx_t_5;

  /* "cp_tags_capnp_cython.pyx":245
 *     cpdef _get_patterns(self):
 *         cdef DynamicValue.Builder temp = self.thisptr_child.getPatterns()
 *         return to_python_builder(temp, self._parent)             # <<<<<<<<<<<<<<
 * 
 *     cpdef _set_patterns(self, list value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_v_self->__pyx_base._parent;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_5capnp_3lib_5capnp_to_python_builder(__pyx_v_temp, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cp_tags_capnp_cython.pyx":243
 *         def __set__(self, value):
 *             self._set_id(value)
 *     cpdef _get_patterns(self):             # <<<<<<<<<<<<<<
 *         cdef DynamicValue.Builder temp = self.thisptr_child.getPatterns()
 *         return to_python_builder(temp, self._parent)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder._get_patterns", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_7_get_patterns(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_20cp_tags_capnp_cython_11Job_Builder_6_get_patterns[] = "Job_Builder._get_patterns(self)";
static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_7_get_patterns(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_patterns (wrapper)", 0);
  __pyx_r = __pyx_pf_20cp_tags_capnp_cython_11Job_Builder_6_get_patterns(((struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_20cp_tags_capnp_cython_11Job_Builder_6_get_patterns(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_patterns", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_20cp_tags_capnp_cython_11Job_Builder__get_patterns(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder._get_patterns", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cp_tags_capnp_cython.pyx":247
 *         return to_python_builder(temp, self._parent)
 * 
 *     cpdef _set_patterns(self, list value):             # <<<<<<<<<<<<<<
 *         cdef uint i = 0
 *         self.init("patterns", len(value))
 */

static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_9_set_patterns(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static PyObject *__pyx_f_20cp_tags_capnp_cython_11Job_Builder__set_patterns(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, PyObject *__pyx_v_value, int __pyx_skip_dispatch) {
  __pyx_t_5capnp_8includes_5types_uint __pyx_v_i;
  struct __pyx_obj_5capnp_3lib_5capnp__DynamicListBuilder *__pyx_v_temp = 0;
  PyObject *__pyx_v_elem = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  struct __pyx_opt_args_5capnp_3lib_5capnp_21_DynamicStructBuilder_init __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_set_patterns", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_patterns); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 247, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_9_set_patterns)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_v_value) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_value);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 247, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "cp_tags_capnp_cython.pyx":248
 * 
 *     cpdef _set_patterns(self, list value):
 *         cdef uint i = 0             # <<<<<<<<<<<<<<
 *         self.init("patterns", len(value))
 *         cdef _DynamicListBuilder temp =  self._get_patterns()
 */
  __pyx_v_i = 0;

  /* "cp_tags_capnp_cython.pyx":249
 *     cpdef _set_patterns(self, list value):
 *         cdef uint i = 0
 *         self.init("patterns", len(value))             # <<<<<<<<<<<<<<
 *         cdef _DynamicListBuilder temp =  self._get_patterns()
 *         for elem in value:
 */
  if (unlikely(__pyx_v_value == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 249, __pyx_L1_error)
  }
  __pyx_t_5 = PyList_GET_SIZE(__pyx_v_value); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(1, 249, __pyx_L1_error)
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6.__pyx_n = 1;
  __pyx_t_6.size = __pyx_t_1;
  __pyx_t_2 = ((struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.init(((struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder *)__pyx_v_self), __pyx_n_s_patterns, 0, &__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cp_tags_capnp_cython.pyx":250
 *         cdef uint i = 0
 *         self.init("patterns", len(value))
 *         cdef _DynamicListBuilder temp =  self._get_patterns()             # <<<<<<<<<<<<<<
 *         for elem in value:
 *             temp[i] = elem
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self->__pyx_base.__pyx_vtab)->_get_patterns(__pyx_v_self, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5capnp_3lib_5capnp__DynamicListBuilder))))) __PYX_ERR(1, 250, __pyx_L1_error)
  __pyx_v_temp = ((struct __pyx_obj_5capnp_3lib_5capnp__DynamicListBuilder *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "cp_tags_capnp_cython.pyx":251
 *         self.init("patterns", len(value))
 *         cdef _DynamicListBuilder temp =  self._get_patterns()
 *         for elem in value:             # <<<<<<<<<<<<<<
 *             temp[i] = elem
 *             i += 1
 */
  if (unlikely(__pyx_v_value == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(1, 251, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_v_value; __Pyx_INCREF(__pyx_t_2); __pyx_t_5 = 0;
  for (;;) {
    if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_2)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(1, 251, __pyx_L1_error)
    #else
    __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_elem, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "cp_tags_capnp_cython.pyx":252
 *         cdef _DynamicListBuilder temp =  self._get_patterns()
 *         for elem in value:
 *             temp[i] = elem             # <<<<<<<<<<<<<<
 *             i += 1
 * 
 */
    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_temp), __pyx_v_i, __pyx_v_elem, __pyx_t_5capnp_8includes_5types_uint, 0, __Pyx_PyInt_From_unsigned_int, 0, 0, 1) < 0)) __PYX_ERR(1, 252, __pyx_L1_error)

    /* "cp_tags_capnp_cython.pyx":253
 *         for elem in value:
 *             temp[i] = elem
 *             i += 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_i = (__pyx_v_i + 1);

    /* "cp_tags_capnp_cython.pyx":251
 *         self.init("patterns", len(value))
 *         cdef _DynamicListBuilder temp =  self._get_patterns()
 *         for elem in value:             # <<<<<<<<<<<<<<
 *             temp[i] = elem
 *             i += 1
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cp_tags_capnp_cython.pyx":247
 *         return to_python_builder(temp, self._parent)
 * 
 *     cpdef _set_patterns(self, list value):             # <<<<<<<<<<<<<<
 *         cdef uint i = 0
 *         self.init("patterns", len(value))
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder._set_patterns", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_temp);
  __Pyx_XDECREF(__pyx_v_elem);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_9_set_patterns(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static char __pyx_doc_20cp_tags_capnp_cython_11Job_Builder_8_set_patterns[] = "Job_Builder._set_patterns(self, list value)";
static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_9_set_patterns(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_set_patterns (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), (&PyList_Type), 1, "value", 1))) __PYX_ERR(1, 247, __pyx_L1_error)
  __pyx_r = __pyx_pf_20cp_tags_capnp_cython_11Job_Builder_8_set_patterns(((struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self), ((PyObject*)__pyx_v_value));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_20cp_tags_capnp_cython_11Job_Builder_8_set_patterns(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_set_patterns", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_20cp_tags_capnp_cython_11Job_Builder__set_patterns(__pyx_v_self, __pyx_v_value, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder._set_patterns", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cp_tags_capnp_cython.pyx":257
 * 
 *     property patterns:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._get_patterns()
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_8patterns_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_8patterns_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_20cp_tags_capnp_cython_11Job_Builder_8patterns___get__(((struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_20cp_tags_capnp_cython_11Job_Builder_8patterns___get__(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cp_tags_capnp_cython.pyx":258
 *     property patterns:
 *         def __get__(self):
 *             return self._get_patterns()             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self._set_patterns(value)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self->__pyx_base.__pyx_vtab)->_get_patterns(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cp_tags_capnp_cython.pyx":257
 * 
 *     property patterns:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._get_patterns()
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder.patterns.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cp_tags_capnp_cython.pyx":259
 *         def __get__(self):
 *             return self._get_patterns()
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self._set_patterns(value)
 *     cpdef _get_events(self):
 */

/* Python wrapper */
static int __pyx_pw_20cp_tags_capnp_cython_11Job_Builder_8patterns_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_20cp_tags_capnp_cython_11Job_Builder_8patterns_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_20cp_tags_capnp_cython_11Job_Builder_8patterns_2__set__(((struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_20cp_tags_capnp_cython_11Job_Builder_8patterns_2__set__(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cp_tags_capnp_cython.pyx":260
 *             return self._get_patterns()
 *         def __set__(self, value):
 *             self._set_patterns(value)             # <<<<<<<<<<<<<<
 *     cpdef _get_events(self):
 *         cdef DynamicValue.Builder temp = self.thisptr_child.getEvents()
 */
  if (!(likely(PyList_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(1, 260, __pyx_L1_error)
  __pyx_t_1 = ((struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self->__pyx_base.__pyx_vtab)->_set_patterns(__pyx_v_self, ((PyObject*)__pyx_v_value), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cp_tags_capnp_cython.pyx":259
 *         def __get__(self):
 *             return self._get_patterns()
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self._set_patterns(value)
 *     cpdef _get_events(self):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder.patterns.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cp_tags_capnp_cython.pyx":261
 *         def __set__(self, value):
 *             self._set_patterns(value)
 *     cpdef _get_events(self):             # <<<<<<<<<<<<<<
 *         cdef DynamicValue.Builder temp = self.thisptr_child.getEvents()
 *         return to_python_builder(temp, self._parent)
 */

static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_11_get_events(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_20cp_tags_capnp_cython_11Job_Builder__get_events(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, int __pyx_skip_dispatch) {
   ::capnp::DynamicValue::Builder __pyx_v_temp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
   ::capnp::DynamicValue::Builder __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_events", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_events); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 261, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_11_get_events)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 261, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "cp_tags_capnp_cython.pyx":262
 *             self._set_patterns(value)
 *     cpdef _get_events(self):
 *         cdef DynamicValue.Builder temp = self.thisptr_child.getEvents()             # <<<<<<<<<<<<<<
 *         return to_python_builder(temp, self._parent)
 * 
 */
  try {
    __pyx_t_5 = __pyx_v_self->thisptr_child.getEvents();
  } catch(...) {
    reraise_kj_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(1, 262, __pyx_L1_error)
  }
  __pyx_v_temp = __pyx_t_5;

  /* "cp_tags_capnp_cython.pyx":263
 *     cpdef _get_events(self):
 *         cdef DynamicValue.Builder temp = self.thisptr_child.getEvents()
 *         return to_python_builder(temp, self._parent)             # <<<<<<<<<<<<<<
 * 
 *     cpdef _set_events(self, list value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_v_self->__pyx_base._parent;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_5capnp_3lib_5capnp_to_python_builder(__pyx_v_temp, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cp_tags_capnp_cython.pyx":261
 *         def __set__(self, value):
 *             self._set_patterns(value)
 *     cpdef _get_events(self):             # <<<<<<<<<<<<<<
 *         cdef DynamicValue.Builder temp = self.thisptr_child.getEvents()
 *         return to_python_builder(temp, self._parent)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder._get_events", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_11_get_events(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_20cp_tags_capnp_cython_11Job_Builder_10_get_events[] = "Job_Builder._get_events(self)";
static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_11_get_events(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_events (wrapper)", 0);
  __pyx_r = __pyx_pf_20cp_tags_capnp_cython_11Job_Builder_10_get_events(((struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_20cp_tags_capnp_cython_11Job_Builder_10_get_events(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_events", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_20cp_tags_capnp_cython_11Job_Builder__get_events(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder._get_events", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cp_tags_capnp_cython.pyx":265
 *         return to_python_builder(temp, self._parent)
 * 
 *     cpdef _set_events(self, list value):             # <<<<<<<<<<<<<<
 *         cdef uint i = 0
 *         self.init("events", len(value))
 */

static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_13_set_events(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static PyObject *__pyx_f_20cp_tags_capnp_cython_11Job_Builder__set_events(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, PyObject *__pyx_v_value, int __pyx_skip_dispatch) {
  __pyx_t_5capnp_8includes_5types_uint __pyx_v_i;
  struct __pyx_obj_5capnp_3lib_5capnp__DynamicListBuilder *__pyx_v_temp = 0;
  PyObject *__pyx_v_elem = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  struct __pyx_opt_args_5capnp_3lib_5capnp_21_DynamicStructBuilder_init __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_set_events", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_events); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 265, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_13_set_events)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_v_value) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_value);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 265, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "cp_tags_capnp_cython.pyx":266
 * 
 *     cpdef _set_events(self, list value):
 *         cdef uint i = 0             # <<<<<<<<<<<<<<
 *         self.init("events", len(value))
 *         cdef _DynamicListBuilder temp =  self._get_events()
 */
  __pyx_v_i = 0;

  /* "cp_tags_capnp_cython.pyx":267
 *     cpdef _set_events(self, list value):
 *         cdef uint i = 0
 *         self.init("events", len(value))             # <<<<<<<<<<<<<<
 *         cdef _DynamicListBuilder temp =  self._get_events()
 *         for elem in value:
 */
  if (unlikely(__pyx_v_value == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 267, __pyx_L1_error)
  }
  __pyx_t_5 = PyList_GET_SIZE(__pyx_v_value); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(1, 267, __pyx_L1_error)
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6.__pyx_n = 1;
  __pyx_t_6.size = __pyx_t_1;
  __pyx_t_2 = ((struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.init(((struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder *)__pyx_v_self), __pyx_n_s_events, 0, &__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cp_tags_capnp_cython.pyx":268
 *         cdef uint i = 0
 *         self.init("events", len(value))
 *         cdef _DynamicListBuilder temp =  self._get_events()             # <<<<<<<<<<<<<<
 *         for elem in value:
 *             temp[i] = elem
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self->__pyx_base.__pyx_vtab)->_get_events(__pyx_v_self, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5capnp_3lib_5capnp__DynamicListBuilder))))) __PYX_ERR(1, 268, __pyx_L1_error)
  __pyx_v_temp = ((struct __pyx_obj_5capnp_3lib_5capnp__DynamicListBuilder *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "cp_tags_capnp_cython.pyx":269
 *         self.init("events", len(value))
 *         cdef _DynamicListBuilder temp =  self._get_events()
 *         for elem in value:             # <<<<<<<<<<<<<<
 *             temp[i] = elem
 *             i += 1
 */
  if (unlikely(__pyx_v_value == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(1, 269, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_v_value; __Pyx_INCREF(__pyx_t_2); __pyx_t_5 = 0;
  for (;;) {
    if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_2)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(1, 269, __pyx_L1_error)
    #else
    __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 269, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_elem, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "cp_tags_capnp_cython.pyx":270
 *         cdef _DynamicListBuilder temp =  self._get_events()
 *         for elem in value:
 *             temp[i] = elem             # <<<<<<<<<<<<<<
 *             i += 1
 * 
 */
    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_temp), __pyx_v_i, __pyx_v_elem, __pyx_t_5capnp_8includes_5types_uint, 0, __Pyx_PyInt_From_unsigned_int, 0, 0, 1) < 0)) __PYX_ERR(1, 270, __pyx_L1_error)

    /* "cp_tags_capnp_cython.pyx":271
 *         for elem in value:
 *             temp[i] = elem
 *             i += 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_i = (__pyx_v_i + 1);

    /* "cp_tags_capnp_cython.pyx":269
 *         self.init("events", len(value))
 *         cdef _DynamicListBuilder temp =  self._get_events()
 *         for elem in value:             # <<<<<<<<<<<<<<
 *             temp[i] = elem
 *             i += 1
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cp_tags_capnp_cython.pyx":265
 *         return to_python_builder(temp, self._parent)
 * 
 *     cpdef _set_events(self, list value):             # <<<<<<<<<<<<<<
 *         cdef uint i = 0
 *         self.init("events", len(value))
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder._set_events", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_temp);
  __Pyx_XDECREF(__pyx_v_elem);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_13_set_events(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static char __pyx_doc_20cp_tags_capnp_cython_11Job_Builder_12_set_events[] = "Job_Builder._set_events(self, list value)";
static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_13_set_events(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_set_events (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), (&PyList_Type), 1, "value", 1))) __PYX_ERR(1, 265, __pyx_L1_error)
  __pyx_r = __pyx_pf_20cp_tags_capnp_cython_11Job_Builder_12_set_events(((struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self), ((PyObject*)__pyx_v_value));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_20cp_tags_capnp_cython_11Job_Builder_12_set_events(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_set_events", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_20cp_tags_capnp_cython_11Job_Builder__set_events(__pyx_v_self, __pyx_v_value, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder._set_events", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cp_tags_capnp_cython.pyx":275
 * 
 *     property events:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._get_events()
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_6events_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_6events_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_20cp_tags_capnp_cython_11Job_Builder_6events___get__(((struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_20cp_tags_capnp_cython_11Job_Builder_6events___get__(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cp_tags_capnp_cython.pyx":276
 *     property events:
 *         def __get__(self):
 *             return self._get_events()             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self._set_events(value)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self->__pyx_base.__pyx_vtab)->_get_events(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cp_tags_capnp_cython.pyx":275
 * 
 *     property events:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._get_events()
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder.events.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cp_tags_capnp_cython.pyx":277
 *         def __get__(self):
 *             return self._get_events()
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self._set_events(value)
 *     cpdef _get_window(self):
 */

/* Python wrapper */
static int __pyx_pw_20cp_tags_capnp_cython_11Job_Builder_6events_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_20cp_tags_capnp_cython_11Job_Builder_6events_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_20cp_tags_capnp_cython_11Job_Builder_6events_2__set__(((struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_20cp_tags_capnp_cython_11Job_Builder_6events_2__set__(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cp_tags_capnp_cython.pyx":278
 *             return self._get_events()
 *         def __set__(self, value):
 *             self._set_events(value)             # <<<<<<<<<<<<<<
 *     cpdef _get_window(self):
 *         return self.thisptr_child.getWindow()
 */
  if (!(likely(PyList_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(1, 278, __pyx_L1_error)
  __pyx_t_1 = ((struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self->__pyx_base.__pyx_vtab)->_set_events(__pyx_v_self, ((PyObject*)__pyx_v_value), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cp_tags_capnp_cython.pyx":277
 *         def __get__(self):
 *             return self._get_events()
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self._set_events(value)
 *     cpdef _get_window(self):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder.events.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cp_tags_capnp_cython.pyx":279
 *         def __set__(self, value):
 *             self._set_events(value)
 *     cpdef _get_window(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr_child.getWindow()
 * 
 */

static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_15_get_window(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_20cp_tags_capnp_cython_11Job_Builder__get_window(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  uint64_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_window", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_window); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 279, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_15_get_window)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 279, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "cp_tags_capnp_cython.pyx":280
 *             self._set_events(value)
 *     cpdef _get_window(self):
 *         return self.thisptr_child.getWindow()             # <<<<<<<<<<<<<<
 * 
 *     cpdef _set_window(self, uint16_t value):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_5 = __pyx_v_self->thisptr_child.getWindow();
  } catch(...) {
    reraise_kj_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(1, 280, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cp_tags_capnp_cython.pyx":279
 *         def __set__(self, value):
 *             self._set_events(value)
 *     cpdef _get_window(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr_child.getWindow()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder._get_window", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_15_get_window(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_20cp_tags_capnp_cython_11Job_Builder_14_get_window[] = "Job_Builder._get_window(self)";
static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_15_get_window(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_window (wrapper)", 0);
  __pyx_r = __pyx_pf_20cp_tags_capnp_cython_11Job_Builder_14_get_window(((struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_20cp_tags_capnp_cython_11Job_Builder_14_get_window(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_window", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_20cp_tags_capnp_cython_11Job_Builder__get_window(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder._get_window", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cp_tags_capnp_cython.pyx":282
 *         return self.thisptr_child.getWindow()
 * 
 *     cpdef _set_window(self, uint16_t value):             # <<<<<<<<<<<<<<
 *         self.thisptr_child.setWindow(value)
 * 
 */

static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_17_set_window(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static PyObject *__pyx_f_20cp_tags_capnp_cython_11Job_Builder__set_window(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, uint16_t __pyx_v_value, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_set_window", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_window); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 282, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_17_set_window)) {
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_3 = __Pyx_PyInt_From_uint16_t(__pyx_v_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 282, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_4 = __pyx_t_1; __pyx_t_5 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
          }
        }
        __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 282, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "cp_tags_capnp_cython.pyx":283
 * 
 *     cpdef _set_window(self, uint16_t value):
 *         self.thisptr_child.setWindow(value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    __pyx_v_self->thisptr_child.setWindow(__pyx_v_value);
  } catch(...) {
    reraise_kj_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(1, 283, __pyx_L1_error)
  }

  /* "cp_tags_capnp_cython.pyx":282
 *         return self.thisptr_child.getWindow()
 * 
 *     cpdef _set_window(self, uint16_t value):             # <<<<<<<<<<<<<<
 *         self.thisptr_child.setWindow(value)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder._set_window", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_17_set_window(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static char __pyx_doc_20cp_tags_capnp_cython_11Job_Builder_16_set_window[] = "Job_Builder._set_window(self, uint16_t value)";
static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_17_set_window(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  uint16_t __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_set_window (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyInt_As_uint16_t(__pyx_arg_value); if (unlikely((__pyx_v_value == ((uint16_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 282, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder._set_window", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_20cp_tags_capnp_cython_11Job_Builder_16_set_window(((struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self), ((uint16_t)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_20cp_tags_capnp_cython_11Job_Builder_16_set_window(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, uint16_t __pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_set_window", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_20cp_tags_capnp_cython_11Job_Builder__set_window(__pyx_v_self, __pyx_v_value, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder._set_window", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cp_tags_capnp_cython.pyx":287
 * 
 *     property window:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._get_window()
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_6window_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_6window_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_20cp_tags_capnp_cython_11Job_Builder_6window___get__(((struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_20cp_tags_capnp_cython_11Job_Builder_6window___get__(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cp_tags_capnp_cython.pyx":288
 *     property window:
 *         def __get__(self):
 *             return self._get_window()             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self._set_window(value)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self->__pyx_base.__pyx_vtab)->_get_window(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cp_tags_capnp_cython.pyx":287
 * 
 *     property window:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._get_window()
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder.window.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cp_tags_capnp_cython.pyx":289
 *         def __get__(self):
 *             return self._get_window()
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self._set_window(value)
 *     cpdef _get_duration(self):
 */

/* Python wrapper */
static int __pyx_pw_20cp_tags_capnp_cython_11Job_Builder_6window_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_20cp_tags_capnp_cython_11Job_Builder_6window_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_20cp_tags_capnp_cython_11Job_Builder_6window_2__set__(((struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_20cp_tags_capnp_cython_11Job_Builder_6window_2__set__(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  uint16_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cp_tags_capnp_cython.pyx":290
 *             return self._get_window()
 *         def __set__(self, value):
 *             self._set_window(value)             # <<<<<<<<<<<<<<
 *     cpdef _get_duration(self):
 *         cdef DynamicValue.Builder temp = self.thisptr_child.getDuration()
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint16_t(__pyx_v_value); if (unlikely((__pyx_t_1 == ((uint16_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 290, __pyx_L1_error)
  __pyx_t_2 = ((struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self->__pyx_base.__pyx_vtab)->_set_window(__pyx_v_self, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cp_tags_capnp_cython.pyx":289
 *         def __get__(self):
 *             return self._get_window()
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self._set_window(value)
 *     cpdef _get_duration(self):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder.window.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cp_tags_capnp_cython.pyx":291
 *         def __set__(self, value):
 *             self._set_window(value)
 *     cpdef _get_duration(self):             # <<<<<<<<<<<<<<
 *         cdef DynamicValue.Builder temp = self.thisptr_child.getDuration()
 *         return to_python_builder(temp, self._parent)
 */

static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_19_get_duration(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_20cp_tags_capnp_cython_11Job_Builder__get_duration(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, int __pyx_skip_dispatch) {
   ::capnp::DynamicValue::Builder __pyx_v_temp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
   ::capnp::DynamicValue::Builder __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_duration", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_duration); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 291, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_19_get_duration)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 291, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "cp_tags_capnp_cython.pyx":292
 *             self._set_window(value)
 *     cpdef _get_duration(self):
 *         cdef DynamicValue.Builder temp = self.thisptr_child.getDuration()             # <<<<<<<<<<<<<<
 *         return to_python_builder(temp, self._parent)
 * 
 */
  try {
    __pyx_t_5 = __pyx_v_self->thisptr_child.getDuration();
  } catch(...) {
    reraise_kj_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(1, 292, __pyx_L1_error)
  }
  __pyx_v_temp = __pyx_t_5;

  /* "cp_tags_capnp_cython.pyx":293
 *     cpdef _get_duration(self):
 *         cdef DynamicValue.Builder temp = self.thisptr_child.getDuration()
 *         return to_python_builder(temp, self._parent)             # <<<<<<<<<<<<<<
 * 
 *     cpdef _set_duration(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_v_self->__pyx_base._parent;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_5capnp_3lib_5capnp_to_python_builder(__pyx_v_temp, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cp_tags_capnp_cython.pyx":291
 *         def __set__(self, value):
 *             self._set_window(value)
 *     cpdef _get_duration(self):             # <<<<<<<<<<<<<<
 *         cdef DynamicValue.Builder temp = self.thisptr_child.getDuration()
 *         return to_python_builder(temp, self._parent)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder._get_duration", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_19_get_duration(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_20cp_tags_capnp_cython_11Job_Builder_18_get_duration[] = "Job_Builder._get_duration(self)";
static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_19_get_duration(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_duration (wrapper)", 0);
  __pyx_r = __pyx_pf_20cp_tags_capnp_cython_11Job_Builder_18_get_duration(((struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_20cp_tags_capnp_cython_11Job_Builder_18_get_duration(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_duration", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_20cp_tags_capnp_cython_11Job_Builder__get_duration(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder._get_duration", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cp_tags_capnp_cython.pyx":295
 *         return to_python_builder(temp, self._parent)
 * 
 *     cpdef _set_duration(self, value):             # <<<<<<<<<<<<<<
 *         _setDynamicFieldStatic(self.thisptr, "duration", value, self._parent)
 * 
 */

static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_21_set_duration(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static PyObject *__pyx_f_20cp_tags_capnp_cython_11Job_Builder__set_duration(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, PyObject *__pyx_v_value, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_set_duration", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_duration); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 295, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_21_set_duration)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_v_value) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_value);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 295, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "cp_tags_capnp_cython.pyx":296
 * 
 *     cpdef _set_duration(self, value):
 *         _setDynamicFieldStatic(self.thisptr, "duration", value, self._parent)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_v_self->__pyx_base._parent;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_5capnp_3lib_5capnp__setDynamicFieldStatic(__pyx_v_self->__pyx_base.thisptr, __pyx_n_s_duration, __pyx_v_value, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 296, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cp_tags_capnp_cython.pyx":295
 *         return to_python_builder(temp, self._parent)
 * 
 *     cpdef _set_duration(self, value):             # <<<<<<<<<<<<<<
 *         _setDynamicFieldStatic(self.thisptr, "duration", value, self._parent)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder._set_duration", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_21_set_duration(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static char __pyx_doc_20cp_tags_capnp_cython_11Job_Builder_20_set_duration[] = "Job_Builder._set_duration(self, value)";
static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_21_set_duration(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_set_duration (wrapper)", 0);
  __pyx_r = __pyx_pf_20cp_tags_capnp_cython_11Job_Builder_20_set_duration(((struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_20cp_tags_capnp_cython_11Job_Builder_20_set_duration(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_set_duration", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_20cp_tags_capnp_cython_11Job_Builder__set_duration(__pyx_v_self, __pyx_v_value, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder._set_duration", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cp_tags_capnp_cython.pyx":300
 * 
 *     property duration:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._get_duration()
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_8duration_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_8duration_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_20cp_tags_capnp_cython_11Job_Builder_8duration___get__(((struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_20cp_tags_capnp_cython_11Job_Builder_8duration___get__(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cp_tags_capnp_cython.pyx":301
 *     property duration:
 *         def __get__(self):
 *             return self._get_duration()             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self._set_duration(value)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self->__pyx_base.__pyx_vtab)->_get_duration(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cp_tags_capnp_cython.pyx":300
 * 
 *     property duration:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._get_duration()
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder.duration.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cp_tags_capnp_cython.pyx":302
 *         def __get__(self):
 *             return self._get_duration()
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self._set_duration(value)
 *     cpdef _get_finished(self):
 */

/* Python wrapper */
static int __pyx_pw_20cp_tags_capnp_cython_11Job_Builder_8duration_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_20cp_tags_capnp_cython_11Job_Builder_8duration_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_20cp_tags_capnp_cython_11Job_Builder_8duration_2__set__(((struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_20cp_tags_capnp_cython_11Job_Builder_8duration_2__set__(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cp_tags_capnp_cython.pyx":303
 *             return self._get_duration()
 *         def __set__(self, value):
 *             self._set_duration(value)             # <<<<<<<<<<<<<<
 *     cpdef _get_finished(self):
 *         return self.thisptr_child.getFinished()
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self->__pyx_base.__pyx_vtab)->_set_duration(__pyx_v_self, __pyx_v_value, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cp_tags_capnp_cython.pyx":302
 *         def __get__(self):
 *             return self._get_duration()
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self._set_duration(value)
 *     cpdef _get_finished(self):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder.duration.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cp_tags_capnp_cython.pyx":304
 *         def __set__(self, value):
 *             self._set_duration(value)
 *     cpdef _get_finished(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr_child.getFinished()
 * 
 */

static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_23_get_finished(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_20cp_tags_capnp_cython_11Job_Builder__get_finished(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  bool __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_finished", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_finished); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 304, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_23_get_finished)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 304, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "cp_tags_capnp_cython.pyx":305
 *             self._set_duration(value)
 *     cpdef _get_finished(self):
 *         return self.thisptr_child.getFinished()             # <<<<<<<<<<<<<<
 * 
 *     cpdef _set_finished(self, cbool value):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_5 = __pyx_v_self->thisptr_child.getFinished();
  } catch(...) {
    reraise_kj_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(1, 305, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cp_tags_capnp_cython.pyx":304
 *         def __set__(self, value):
 *             self._set_duration(value)
 *     cpdef _get_finished(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr_child.getFinished()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder._get_finished", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_23_get_finished(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_20cp_tags_capnp_cython_11Job_Builder_22_get_finished[] = "Job_Builder._get_finished(self)";
static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_23_get_finished(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_finished (wrapper)", 0);
  __pyx_r = __pyx_pf_20cp_tags_capnp_cython_11Job_Builder_22_get_finished(((struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_20cp_tags_capnp_cython_11Job_Builder_22_get_finished(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_finished", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_20cp_tags_capnp_cython_11Job_Builder__get_finished(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder._get_finished", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cp_tags_capnp_cython.pyx":307
 *         return self.thisptr_child.getFinished()
 * 
 *     cpdef _set_finished(self, cbool value):             # <<<<<<<<<<<<<<
 *         self.thisptr_child.setFinished(value)
 * 
 */

static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_25_set_finished(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static PyObject *__pyx_f_20cp_tags_capnp_cython_11Job_Builder__set_finished(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, bool __pyx_v_value, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_set_finished", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_finished); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 307, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_25_set_finished)) {
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 307, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_4 = __pyx_t_1; __pyx_t_5 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
          }
        }
        __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 307, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "cp_tags_capnp_cython.pyx":308
 * 
 *     cpdef _set_finished(self, cbool value):
 *         self.thisptr_child.setFinished(value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    __pyx_v_self->thisptr_child.setFinished(__pyx_v_value);
  } catch(...) {
    reraise_kj_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(1, 308, __pyx_L1_error)
  }

  /* "cp_tags_capnp_cython.pyx":307
 *         return self.thisptr_child.getFinished()
 * 
 *     cpdef _set_finished(self, cbool value):             # <<<<<<<<<<<<<<
 *         self.thisptr_child.setFinished(value)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder._set_finished", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_25_set_finished(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static char __pyx_doc_20cp_tags_capnp_cython_11Job_Builder_24_set_finished[] = "Job_Builder._set_finished(self, bool value)";
static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_25_set_finished(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  bool __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_set_finished (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyObject_IsTrue(__pyx_arg_value); if (unlikely((__pyx_v_value == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 307, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder._set_finished", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_20cp_tags_capnp_cython_11Job_Builder_24_set_finished(((struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self), ((bool)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_20cp_tags_capnp_cython_11Job_Builder_24_set_finished(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, bool __pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_set_finished", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_20cp_tags_capnp_cython_11Job_Builder__set_finished(__pyx_v_self, __pyx_v_value, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder._set_finished", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cp_tags_capnp_cython.pyx":312
 * 
 *     property finished:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._get_finished()
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_8finished_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_8finished_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_20cp_tags_capnp_cython_11Job_Builder_8finished___get__(((struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_20cp_tags_capnp_cython_11Job_Builder_8finished___get__(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cp_tags_capnp_cython.pyx":313
 *     property finished:
 *         def __get__(self):
 *             return self._get_finished()             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self._set_finished(value)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self->__pyx_base.__pyx_vtab)->_get_finished(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cp_tags_capnp_cython.pyx":312
 * 
 *     property finished:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._get_finished()
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder.finished.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cp_tags_capnp_cython.pyx":314
 *         def __get__(self):
 *             return self._get_finished()
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self._set_finished(value)
 *     cpdef _get_starttag(self):
 */

/* Python wrapper */
static int __pyx_pw_20cp_tags_capnp_cython_11Job_Builder_8finished_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_20cp_tags_capnp_cython_11Job_Builder_8finished_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_20cp_tags_capnp_cython_11Job_Builder_8finished_2__set__(((struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_20cp_tags_capnp_cython_11Job_Builder_8finished_2__set__(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cp_tags_capnp_cython.pyx":315
 *             return self._get_finished()
 *         def __set__(self, value):
 *             self._set_finished(value)             # <<<<<<<<<<<<<<
 *     cpdef _get_starttag(self):
 *         return self.thisptr_child.getStarttag()
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 315, __pyx_L1_error)
  __pyx_t_2 = ((struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self->__pyx_base.__pyx_vtab)->_set_finished(__pyx_v_self, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cp_tags_capnp_cython.pyx":314
 *         def __get__(self):
 *             return self._get_finished()
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self._set_finished(value)
 *     cpdef _get_starttag(self):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder.finished.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cp_tags_capnp_cython.pyx":316
 *         def __set__(self, value):
 *             self._set_finished(value)
 *     cpdef _get_starttag(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr_child.getStarttag()
 * 
 */

static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_27_get_starttag(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_20cp_tags_capnp_cython_11Job_Builder__get_starttag(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  uint64_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_starttag", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_starttag); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 316, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_27_get_starttag)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 316, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "cp_tags_capnp_cython.pyx":317
 *             self._set_finished(value)
 *     cpdef _get_starttag(self):
 *         return self.thisptr_child.getStarttag()             # <<<<<<<<<<<<<<
 * 
 *     cpdef _set_starttag(self, uint64_t value):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_5 = __pyx_v_self->thisptr_child.getStarttag();
  } catch(...) {
    reraise_kj_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(1, 317, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 317, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cp_tags_capnp_cython.pyx":316
 *         def __set__(self, value):
 *             self._set_finished(value)
 *     cpdef _get_starttag(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr_child.getStarttag()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder._get_starttag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_27_get_starttag(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_20cp_tags_capnp_cython_11Job_Builder_26_get_starttag[] = "Job_Builder._get_starttag(self)";
static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_27_get_starttag(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_starttag (wrapper)", 0);
  __pyx_r = __pyx_pf_20cp_tags_capnp_cython_11Job_Builder_26_get_starttag(((struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_20cp_tags_capnp_cython_11Job_Builder_26_get_starttag(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_starttag", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_20cp_tags_capnp_cython_11Job_Builder__get_starttag(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder._get_starttag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cp_tags_capnp_cython.pyx":319
 *         return self.thisptr_child.getStarttag()
 * 
 *     cpdef _set_starttag(self, uint64_t value):             # <<<<<<<<<<<<<<
 *         self.thisptr_child.setStarttag(value)
 * 
 */

static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_29_set_starttag(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static PyObject *__pyx_f_20cp_tags_capnp_cython_11Job_Builder__set_starttag(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, uint64_t __pyx_v_value, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_set_starttag", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_starttag); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 319, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_29_set_starttag)) {
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_3 = __Pyx_PyInt_From_uint64_t(__pyx_v_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 319, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_4 = __pyx_t_1; __pyx_t_5 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
          }
        }
        __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 319, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "cp_tags_capnp_cython.pyx":320
 * 
 *     cpdef _set_starttag(self, uint64_t value):
 *         self.thisptr_child.setStarttag(value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    __pyx_v_self->thisptr_child.setStarttag(__pyx_v_value);
  } catch(...) {
    reraise_kj_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(1, 320, __pyx_L1_error)
  }

  /* "cp_tags_capnp_cython.pyx":319
 *         return self.thisptr_child.getStarttag()
 * 
 *     cpdef _set_starttag(self, uint64_t value):             # <<<<<<<<<<<<<<
 *         self.thisptr_child.setStarttag(value)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder._set_starttag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_29_set_starttag(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static char __pyx_doc_20cp_tags_capnp_cython_11Job_Builder_28_set_starttag[] = "Job_Builder._set_starttag(self, uint64_t value)";
static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_29_set_starttag(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  uint64_t __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_set_starttag (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyInt_As_uint64_t(__pyx_arg_value); if (unlikely((__pyx_v_value == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 319, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder._set_starttag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_20cp_tags_capnp_cython_11Job_Builder_28_set_starttag(((struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self), ((uint64_t)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_20cp_tags_capnp_cython_11Job_Builder_28_set_starttag(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, uint64_t __pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_set_starttag", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_20cp_tags_capnp_cython_11Job_Builder__set_starttag(__pyx_v_self, __pyx_v_value, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder._set_starttag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cp_tags_capnp_cython.pyx":324
 * 
 *     property starttag:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._get_starttag()
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_8starttag_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_8starttag_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_20cp_tags_capnp_cython_11Job_Builder_8starttag___get__(((struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_20cp_tags_capnp_cython_11Job_Builder_8starttag___get__(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cp_tags_capnp_cython.pyx":325
 *     property starttag:
 *         def __get__(self):
 *             return self._get_starttag()             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self._set_starttag(value)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self->__pyx_base.__pyx_vtab)->_get_starttag(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 325, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cp_tags_capnp_cython.pyx":324
 * 
 *     property starttag:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._get_starttag()
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder.starttag.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cp_tags_capnp_cython.pyx":326
 *         def __get__(self):
 *             return self._get_starttag()
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self._set_starttag(value)
 *     cpdef _get_stoptag(self):
 */

/* Python wrapper */
static int __pyx_pw_20cp_tags_capnp_cython_11Job_Builder_8starttag_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_20cp_tags_capnp_cython_11Job_Builder_8starttag_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_20cp_tags_capnp_cython_11Job_Builder_8starttag_2__set__(((struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_20cp_tags_capnp_cython_11Job_Builder_8starttag_2__set__(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cp_tags_capnp_cython.pyx":327
 *             return self._get_starttag()
 *         def __set__(self, value):
 *             self._set_starttag(value)             # <<<<<<<<<<<<<<
 *     cpdef _get_stoptag(self):
 *         return self.thisptr_child.getStoptag()
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_value); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 327, __pyx_L1_error)
  __pyx_t_2 = ((struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self->__pyx_base.__pyx_vtab)->_set_starttag(__pyx_v_self, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cp_tags_capnp_cython.pyx":326
 *         def __get__(self):
 *             return self._get_starttag()
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self._set_starttag(value)
 *     cpdef _get_stoptag(self):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder.starttag.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cp_tags_capnp_cython.pyx":328
 *         def __set__(self, value):
 *             self._set_starttag(value)
 *     cpdef _get_stoptag(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr_child.getStoptag()
 * 
 */

static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_31_get_stoptag(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_20cp_tags_capnp_cython_11Job_Builder__get_stoptag(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  uint64_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_stoptag", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_stoptag); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 328, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_31_get_stoptag)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 328, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "cp_tags_capnp_cython.pyx":329
 *             self._set_starttag(value)
 *     cpdef _get_stoptag(self):
 *         return self.thisptr_child.getStoptag()             # <<<<<<<<<<<<<<
 * 
 *     cpdef _set_stoptag(self, uint64_t value):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_5 = __pyx_v_self->thisptr_child.getStoptag();
  } catch(...) {
    reraise_kj_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(1, 329, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cp_tags_capnp_cython.pyx":328
 *         def __set__(self, value):
 *             self._set_starttag(value)
 *     cpdef _get_stoptag(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr_child.getStoptag()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder._get_stoptag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_31_get_stoptag(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_20cp_tags_capnp_cython_11Job_Builder_30_get_stoptag[] = "Job_Builder._get_stoptag(self)";
static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_31_get_stoptag(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_stoptag (wrapper)", 0);
  __pyx_r = __pyx_pf_20cp_tags_capnp_cython_11Job_Builder_30_get_stoptag(((struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_20cp_tags_capnp_cython_11Job_Builder_30_get_stoptag(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_stoptag", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_20cp_tags_capnp_cython_11Job_Builder__get_stoptag(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder._get_stoptag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cp_tags_capnp_cython.pyx":331
 *         return self.thisptr_child.getStoptag()
 * 
 *     cpdef _set_stoptag(self, uint64_t value):             # <<<<<<<<<<<<<<
 *         self.thisptr_child.setStoptag(value)
 * 
 */

static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_33_set_stoptag(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static PyObject *__pyx_f_20cp_tags_capnp_cython_11Job_Builder__set_stoptag(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, uint64_t __pyx_v_value, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_set_stoptag", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_stoptag); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 331, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_33_set_stoptag)) {
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_3 = __Pyx_PyInt_From_uint64_t(__pyx_v_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 331, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_4 = __pyx_t_1; __pyx_t_5 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
          }
        }
        __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 331, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "cp_tags_capnp_cython.pyx":332
 * 
 *     cpdef _set_stoptag(self, uint64_t value):
 *         self.thisptr_child.setStoptag(value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    __pyx_v_self->thisptr_child.setStoptag(__pyx_v_value);
  } catch(...) {
    reraise_kj_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(1, 332, __pyx_L1_error)
  }

  /* "cp_tags_capnp_cython.pyx":331
 *         return self.thisptr_child.getStoptag()
 * 
 *     cpdef _set_stoptag(self, uint64_t value):             # <<<<<<<<<<<<<<
 *         self.thisptr_child.setStoptag(value)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder._set_stoptag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_33_set_stoptag(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static char __pyx_doc_20cp_tags_capnp_cython_11Job_Builder_32_set_stoptag[] = "Job_Builder._set_stoptag(self, uint64_t value)";
static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_33_set_stoptag(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  uint64_t __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_set_stoptag (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyInt_As_uint64_t(__pyx_arg_value); if (unlikely((__pyx_v_value == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 331, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder._set_stoptag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_20cp_tags_capnp_cython_11Job_Builder_32_set_stoptag(((struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self), ((uint64_t)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_20cp_tags_capnp_cython_11Job_Builder_32_set_stoptag(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, uint64_t __pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_set_stoptag", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_20cp_tags_capnp_cython_11Job_Builder__set_stoptag(__pyx_v_self, __pyx_v_value, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder._set_stoptag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cp_tags_capnp_cython.pyx":336
 * 
 *     property stoptag:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._get_stoptag()
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_7stoptag_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_7stoptag_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_20cp_tags_capnp_cython_11Job_Builder_7stoptag___get__(((struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_20cp_tags_capnp_cython_11Job_Builder_7stoptag___get__(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cp_tags_capnp_cython.pyx":337
 *     property stoptag:
 *         def __get__(self):
 *             return self._get_stoptag()             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self._set_stoptag(value)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self->__pyx_base.__pyx_vtab)->_get_stoptag(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cp_tags_capnp_cython.pyx":336
 * 
 *     property stoptag:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._get_stoptag()
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder.stoptag.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cp_tags_capnp_cython.pyx":338
 *         def __get__(self):
 *             return self._get_stoptag()
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self._set_stoptag(value)
 *     cpdef _get_err(self):
 */

/* Python wrapper */
static int __pyx_pw_20cp_tags_capnp_cython_11Job_Builder_7stoptag_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_20cp_tags_capnp_cython_11Job_Builder_7stoptag_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_20cp_tags_capnp_cython_11Job_Builder_7stoptag_2__set__(((struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_20cp_tags_capnp_cython_11Job_Builder_7stoptag_2__set__(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cp_tags_capnp_cython.pyx":339
 *             return self._get_stoptag()
 *         def __set__(self, value):
 *             self._set_stoptag(value)             # <<<<<<<<<<<<<<
 *     cpdef _get_err(self):
 *         temp = self.thisptr_child.getErr()
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_value); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 339, __pyx_L1_error)
  __pyx_t_2 = ((struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self->__pyx_base.__pyx_vtab)->_set_stoptag(__pyx_v_self, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cp_tags_capnp_cython.pyx":338
 *         def __get__(self):
 *             return self._get_stoptag()
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self._set_stoptag(value)
 *     cpdef _get_err(self):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder.stoptag.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cp_tags_capnp_cython.pyx":340
 *         def __set__(self, value):
 *             self._set_stoptag(value)
 *     cpdef _get_err(self):             # <<<<<<<<<<<<<<
 *         temp = self.thisptr_child.getErr()
 *         return (<char*>temp.begin())[:temp.size()]
 */

static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_35_get_err(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_20cp_tags_capnp_cython_11Job_Builder__get_err(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, int __pyx_skip_dispatch) {
   ::kj::StringPtr __pyx_v_temp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
   ::kj::StringPtr __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_err", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_err); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 340, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_35_get_err)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 340, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "cp_tags_capnp_cython.pyx":341
 *             self._set_stoptag(value)
 *     cpdef _get_err(self):
 *         temp = self.thisptr_child.getErr()             # <<<<<<<<<<<<<<
 *         return (<char*>temp.begin())[:temp.size()]
 * 
 */
  try {
    __pyx_t_5 = __pyx_v_self->thisptr_child.getErr();
  } catch(...) {
    reraise_kj_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(1, 341, __pyx_L1_error)
  }
  __pyx_v_temp = __pyx_t_5;

  /* "cp_tags_capnp_cython.pyx":342
 *     cpdef _get_err(self):
 *         temp = self.thisptr_child.getErr()
 *         return (<char*>temp.begin())[:temp.size()]             # <<<<<<<<<<<<<<
 * 
 *     cpdef _set_err(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(((char *)__pyx_v_temp.begin()) + 0, __pyx_v_temp.size() - 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cp_tags_capnp_cython.pyx":340
 *         def __set__(self, value):
 *             self._set_stoptag(value)
 *     cpdef _get_err(self):             # <<<<<<<<<<<<<<
 *         temp = self.thisptr_child.getErr()
 *         return (<char*>temp.begin())[:temp.size()]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder._get_err", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_35_get_err(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_20cp_tags_capnp_cython_11Job_Builder_34_get_err[] = "Job_Builder._get_err(self)";
static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_35_get_err(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_err (wrapper)", 0);
  __pyx_r = __pyx_pf_20cp_tags_capnp_cython_11Job_Builder_34_get_err(((struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_20cp_tags_capnp_cython_11Job_Builder_34_get_err(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_err", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_20cp_tags_capnp_cython_11Job_Builder__get_err(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder._get_err", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cp_tags_capnp_cython.pyx":344
 *         return (<char*>temp.begin())[:temp.size()]
 * 
 *     cpdef _set_err(self, value):             # <<<<<<<<<<<<<<
 *         cdef StringPtr temp_string
 *         if type(value) is bytes:
 */

static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_37_set_err(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static PyObject *__pyx_f_20cp_tags_capnp_cython_11Job_Builder__set_err(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, PyObject *__pyx_v_value, int __pyx_skip_dispatch) {
   ::kj::StringPtr __pyx_v_temp_string;
  PyObject *__pyx_v_encoded_value = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  char *__pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_set_err", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_err); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 344, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_37_set_err)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_v_value) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_value);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 344, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "cp_tags_capnp_cython.pyx":346
 *     cpdef _set_err(self, value):
 *         cdef StringPtr temp_string
 *         if type(value) is bytes:             # <<<<<<<<<<<<<<
 *             temp_string = StringPtr(<char*>value, len(value))
 *         else:
 */
  __pyx_t_5 = (((PyObject *)Py_TYPE(__pyx_v_value)) == ((PyObject *)(&PyBytes_Type)));
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (__pyx_t_6) {

    /* "cp_tags_capnp_cython.pyx":347
 *         cdef StringPtr temp_string
 *         if type(value) is bytes:
 *             temp_string = StringPtr(<char*>value, len(value))             # <<<<<<<<<<<<<<
 *         else:
 *             encoded_value = value.encode('utf-8')
 */
    __pyx_t_7 = __Pyx_PyObject_AsWritableString(__pyx_v_value); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) __PYX_ERR(1, 347, __pyx_L1_error)
    __pyx_t_8 = PyObject_Length(__pyx_v_value); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(1, 347, __pyx_L1_error)
    __pyx_v_temp_string =  ::kj::StringPtr(((char *)__pyx_t_7), __pyx_t_8);

    /* "cp_tags_capnp_cython.pyx":346
 *     cpdef _set_err(self, value):
 *         cdef StringPtr temp_string
 *         if type(value) is bytes:             # <<<<<<<<<<<<<<
 *             temp_string = StringPtr(<char*>value, len(value))
 *         else:
 */
    goto __pyx_L3;
  }

  /* "cp_tags_capnp_cython.pyx":349
 *             temp_string = StringPtr(<char*>value, len(value))
 *         else:
 *             encoded_value = value.encode('utf-8')             # <<<<<<<<<<<<<<
 *             temp_string = StringPtr(<char*>encoded_value, len(encoded_value))
 *         self.thisptr_child.setErr(temp_string)
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 349, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_kp_s_utf_8) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_kp_s_utf_8);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 349, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_encoded_value = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "cp_tags_capnp_cython.pyx":350
 *         else:
 *             encoded_value = value.encode('utf-8')
 *             temp_string = StringPtr(<char*>encoded_value, len(encoded_value))             # <<<<<<<<<<<<<<
 *         self.thisptr_child.setErr(temp_string)
 * 
 */
    __pyx_t_7 = __Pyx_PyObject_AsWritableString(__pyx_v_encoded_value); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) __PYX_ERR(1, 350, __pyx_L1_error)
    __pyx_t_8 = PyObject_Length(__pyx_v_encoded_value); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(1, 350, __pyx_L1_error)
    __pyx_v_temp_string =  ::kj::StringPtr(((char *)__pyx_t_7), __pyx_t_8);
  }
  __pyx_L3:;

  /* "cp_tags_capnp_cython.pyx":351
 *             encoded_value = value.encode('utf-8')
 *             temp_string = StringPtr(<char*>encoded_value, len(encoded_value))
 *         self.thisptr_child.setErr(temp_string)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    __pyx_v_self->thisptr_child.setErr(__pyx_v_temp_string);
  } catch(...) {
    reraise_kj_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(1, 351, __pyx_L1_error)
  }

  /* "cp_tags_capnp_cython.pyx":344
 *         return (<char*>temp.begin())[:temp.size()]
 * 
 *     cpdef _set_err(self, value):             # <<<<<<<<<<<<<<
 *         cdef StringPtr temp_string
 *         if type(value) is bytes:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder._set_err", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_encoded_value);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_37_set_err(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static char __pyx_doc_20cp_tags_capnp_cython_11Job_Builder_36_set_err[] = "Job_Builder._set_err(self, value)";
static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_37_set_err(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_set_err (wrapper)", 0);
  __pyx_r = __pyx_pf_20cp_tags_capnp_cython_11Job_Builder_36_set_err(((struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_20cp_tags_capnp_cython_11Job_Builder_36_set_err(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_set_err", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_20cp_tags_capnp_cython_11Job_Builder__set_err(__pyx_v_self, __pyx_v_value, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder._set_err", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cp_tags_capnp_cython.pyx":355
 * 
 *     property err:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._get_err()
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_3err_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_3err_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_20cp_tags_capnp_cython_11Job_Builder_3err___get__(((struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_20cp_tags_capnp_cython_11Job_Builder_3err___get__(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cp_tags_capnp_cython.pyx":356
 *     property err:
 *         def __get__(self):
 *             return self._get_err()             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self._set_err(value)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self->__pyx_base.__pyx_vtab)->_get_err(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cp_tags_capnp_cython.pyx":355
 * 
 *     property err:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._get_err()
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder.err.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cp_tags_capnp_cython.pyx":357
 *         def __get__(self):
 *             return self._get_err()
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self._set_err(value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_20cp_tags_capnp_cython_11Job_Builder_3err_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_20cp_tags_capnp_cython_11Job_Builder_3err_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_20cp_tags_capnp_cython_11Job_Builder_3err_2__set__(((struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_20cp_tags_capnp_cython_11Job_Builder_3err_2__set__(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cp_tags_capnp_cython.pyx":358
 *             return self._get_err()
 *         def __set__(self, value):
 *             self._set_err(value)             # <<<<<<<<<<<<<<
 * 
 *     def to_dict(self, verbose=False, ordered=False):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self->__pyx_base.__pyx_vtab)->_set_err(__pyx_v_self, __pyx_v_value, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cp_tags_capnp_cython.pyx":357
 *         def __get__(self):
 *             return self._get_err()
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self._set_err(value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder.err.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cp_tags_capnp_cython.pyx":360
 *             self._set_err(value)
 * 
 *     def to_dict(self, verbose=False, ordered=False):             # <<<<<<<<<<<<<<
 *         ret = {
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_39to_dict(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_20cp_tags_capnp_cython_11Job_Builder_38to_dict[] = "Job_Builder.to_dict(self, verbose=False, ordered=False)";
static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_39to_dict(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_verbose = 0;
  PyObject *__pyx_v_ordered = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_dict (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_verbose,&__pyx_n_s_ordered,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)Py_False);
    values[1] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_verbose);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ordered);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "to_dict") < 0)) __PYX_ERR(1, 360, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_verbose = values[0];
    __pyx_v_ordered = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("to_dict", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 360, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder.to_dict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_20cp_tags_capnp_cython_11Job_Builder_38to_dict(((struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self), __pyx_v_verbose, __pyx_v_ordered);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_20cp_tags_capnp_cython_11Job_Builder_38to_dict(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, PyObject *__pyx_v_verbose, PyObject *__pyx_v_ordered) {
  PyObject *__pyx_v_ret = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("to_dict", 0);

  /* "cp_tags_capnp_cython.pyx":364
 * 
 * 
 *         'id': _to_dict(self.id, verbose, ordered),             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(9); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 364, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 364, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 364, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_ordered); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 364, __pyx_L1_error)
  __pyx_t_5 = __pyx_f_5capnp_3lib_5capnp__to_dict(__pyx_t_2, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 364, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_id, __pyx_t_5) < 0) __PYX_ERR(1, 364, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "cp_tags_capnp_cython.pyx":367
 * 
 * 
 *         'patterns': _to_dict(self.patterns, verbose, ordered),             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_patterns); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 367, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_ordered); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 367, __pyx_L1_error)
  __pyx_t_2 = __pyx_f_5capnp_3lib_5capnp__to_dict(__pyx_t_5, __pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_patterns, __pyx_t_2) < 0) __PYX_ERR(1, 364, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cp_tags_capnp_cython.pyx":370
 * 
 * 
 *         'events': _to_dict(self.events, verbose, ordered),             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_events); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 370, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_ordered); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 370, __pyx_L1_error)
  __pyx_t_5 = __pyx_f_5capnp_3lib_5capnp__to_dict(__pyx_t_2, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_events, __pyx_t_5) < 0) __PYX_ERR(1, 364, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "cp_tags_capnp_cython.pyx":373
 * 
 * 
 *         'window': _to_dict(self.window, verbose, ordered),             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_window); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 373, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_ordered); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 373, __pyx_L1_error)
  __pyx_t_2 = __pyx_f_5capnp_3lib_5capnp__to_dict(__pyx_t_5, __pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_window, __pyx_t_2) < 0) __PYX_ERR(1, 364, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cp_tags_capnp_cython.pyx":376
 * 
 * 
 *         'duration': _to_dict(self.duration, verbose, ordered),             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_duration); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 376, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_ordered); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 376, __pyx_L1_error)
  __pyx_t_5 = __pyx_f_5capnp_3lib_5capnp__to_dict(__pyx_t_2, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_duration, __pyx_t_5) < 0) __PYX_ERR(1, 364, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "cp_tags_capnp_cython.pyx":379
 * 
 * 
 *         'finished': _to_dict(self.finished, verbose, ordered),             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_finished); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 379, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_ordered); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 379, __pyx_L1_error)
  __pyx_t_2 = __pyx_f_5capnp_3lib_5capnp__to_dict(__pyx_t_5, __pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_finished, __pyx_t_2) < 0) __PYX_ERR(1, 364, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cp_tags_capnp_cython.pyx":382
 * 
 * 
 *         'starttag': _to_dict(self.starttag, verbose, ordered),             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_starttag); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 382, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_ordered); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 382, __pyx_L1_error)
  __pyx_t_5 = __pyx_f_5capnp_3lib_5capnp__to_dict(__pyx_t_2, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_starttag, __pyx_t_5) < 0) __PYX_ERR(1, 364, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "cp_tags_capnp_cython.pyx":385
 * 
 * 
 *         'stoptag': _to_dict(self.stoptag, verbose, ordered),             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_stoptag); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 385, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_ordered); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 385, __pyx_L1_error)
  __pyx_t_2 = __pyx_f_5capnp_3lib_5capnp__to_dict(__pyx_t_5, __pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_stoptag, __pyx_t_2) < 0) __PYX_ERR(1, 364, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cp_tags_capnp_cython.pyx":388
 * 
 * 
 *         'err': _to_dict(self.err, verbose, ordered),             # <<<<<<<<<<<<<<
 * 
 *         }
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_err); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 388, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_ordered); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 388, __pyx_L1_error)
  __pyx_t_5 = __pyx_f_5capnp_3lib_5capnp__to_dict(__pyx_t_2, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_err, __pyx_t_5) < 0) __PYX_ERR(1, 364, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_ret = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cp_tags_capnp_cython.pyx":394
 * 
 * 
 *         return ret             # <<<<<<<<<<<<<<
 * 
 *     def from_dict(self, dict d):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "cp_tags_capnp_cython.pyx":360
 *             self._set_err(value)
 * 
 *     def to_dict(self, verbose=False, ordered=False):             # <<<<<<<<<<<<<<
 *         ret = {
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder.to_dict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cp_tags_capnp_cython.pyx":396
 *         return ret
 * 
 *     def from_dict(self, dict d):             # <<<<<<<<<<<<<<
 *         cdef str key
 *         for key, val in d.iteritems():
 */

/* Python wrapper */
static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_41from_dict(PyObject *__pyx_v_self, PyObject *__pyx_v_d); /*proto*/
static char __pyx_doc_20cp_tags_capnp_cython_11Job_Builder_40from_dict[] = "Job_Builder.from_dict(self, dict d)";
static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_41from_dict(PyObject *__pyx_v_self, PyObject *__pyx_v_d) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_dict (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_d), (&PyDict_Type), 1, "d", 1))) __PYX_ERR(1, 396, __pyx_L1_error)
  __pyx_r = __pyx_pf_20cp_tags_capnp_cython_11Job_Builder_40from_dict(((struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self), ((PyObject*)__pyx_v_d));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_20cp_tags_capnp_cython_11Job_Builder_40from_dict(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, PyObject *__pyx_v_d) {
  PyObject *__pyx_v_key = 0;
  PyObject *__pyx_v_val = NULL;
  PyObject *__pyx_v_e = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  uint64_t __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  uint16_t __pyx_t_16;
  bool __pyx_t_17;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_dict", 0);

  /* "cp_tags_capnp_cython.pyx":398
 *     def from_dict(self, dict d):
 *         cdef str key
 *         for key, val in d.iteritems():             # <<<<<<<<<<<<<<
 *             if False: pass
 * 
 */
  __pyx_t_2 = 0;
  if (unlikely(__pyx_v_d == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "iteritems");
    __PYX_ERR(1, 398, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_dict_iterator(__pyx_v_d, 1, __pyx_n_s_iteritems, (&__pyx_t_3), (&__pyx_t_4)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_5;
  __pyx_t_5 = 0;
  while (1) {
    __pyx_t_7 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_3, &__pyx_t_2, &__pyx_t_5, &__pyx_t_6, NULL, __pyx_t_4);
    if (unlikely(__pyx_t_7 == 0)) break;
    if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(1, 398, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GOTREF(__pyx_t_6);
    if (!(likely(PyString_CheckExact(__pyx_t_5))||((__pyx_t_5) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_5)->tp_name), 0))) __PYX_ERR(1, 398, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_key, ((PyObject*)__pyx_t_5));
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_val, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "cp_tags_capnp_cython.pyx":401
 *             if False: pass
 * 
 *             elif key == "id":             # <<<<<<<<<<<<<<
 *                 try:
 *                     self._set_id(val)
 */
    __pyx_t_8 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_id, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(1, 401, __pyx_L1_error)
    __pyx_t_9 = (__pyx_t_8 != 0);
    if (__pyx_t_9) {

      /* "cp_tags_capnp_cython.pyx":402
 * 
 *             elif key == "id":
 *                 try:             # <<<<<<<<<<<<<<
 *                     self._set_id(val)
 *                 except Exception as e:
 */
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
        __Pyx_XGOTREF(__pyx_t_10);
        __Pyx_XGOTREF(__pyx_t_11);
        __Pyx_XGOTREF(__pyx_t_12);
        /*try:*/ {

          /* "cp_tags_capnp_cython.pyx":403
 *             elif key == "id":
 *                 try:
 *                     self._set_id(val)             # <<<<<<<<<<<<<<
 *                 except Exception as e:
 *                     if 'expected isSetInUnion(field)' in str(e):
 */
          __pyx_t_13 = __Pyx_PyInt_As_uint64_t(__pyx_v_val); if (unlikely((__pyx_t_13 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 403, __pyx_L6_error)
          __pyx_t_6 = ((struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self->__pyx_base.__pyx_vtab)->_set_id(__pyx_v_self, __pyx_t_13, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 403, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

          /* "cp_tags_capnp_cython.pyx":402
 * 
 *             elif key == "id":
 *                 try:             # <<<<<<<<<<<<<<
 *                     self._set_id(val)
 *                 except Exception as e:
 */
        }
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        goto __pyx_L13_try_end;
        __pyx_L6_error:;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "cp_tags_capnp_cython.pyx":404
 *                 try:
 *                     self._set_id(val)
 *                 except Exception as e:             # <<<<<<<<<<<<<<
 *                     if 'expected isSetInUnion(field)' in str(e):
 *                         self.init(key)
 */
        __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
        if (__pyx_t_7) {
          __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder.from_dict", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_5, &__pyx_t_14) < 0) __PYX_ERR(1, 404, __pyx_L8_except_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_XDECREF_SET(__pyx_v_e, __pyx_t_5);

          /* "cp_tags_capnp_cython.pyx":405
 *                     self._set_id(val)
 *                 except Exception as e:
 *                     if 'expected isSetInUnion(field)' in str(e):             # <<<<<<<<<<<<<<
 *                         self.init(key)
 *                         self._set_id(val)
 */
          __pyx_t_15 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_e); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 405, __pyx_L8_except_error)
          __Pyx_GOTREF(__pyx_t_15);
          __pyx_t_9 = (__Pyx_PySequence_ContainsTF(__pyx_kp_s_expected_isSetInUnion_field, __pyx_t_15, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(1, 405, __pyx_L8_except_error)
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __pyx_t_8 = (__pyx_t_9 != 0);
          if (likely(__pyx_t_8)) {

            /* "cp_tags_capnp_cython.pyx":406
 *                 except Exception as e:
 *                     if 'expected isSetInUnion(field)' in str(e):
 *                         self.init(key)             # <<<<<<<<<<<<<<
 *                         self._set_id(val)
 *                     else:
 */
            __pyx_t_15 = ((struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.init(((struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder *)__pyx_v_self), __pyx_v_key, 0, NULL); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 406, __pyx_L8_except_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

            /* "cp_tags_capnp_cython.pyx":407
 *                     if 'expected isSetInUnion(field)' in str(e):
 *                         self.init(key)
 *                         self._set_id(val)             # <<<<<<<<<<<<<<
 *                     else:
 *                         raise
 */
            __pyx_t_13 = __Pyx_PyInt_As_uint64_t(__pyx_v_val); if (unlikely((__pyx_t_13 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 407, __pyx_L8_except_error)
            __pyx_t_15 = ((struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self->__pyx_base.__pyx_vtab)->_set_id(__pyx_v_self, __pyx_t_13, 0); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 407, __pyx_L8_except_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

            /* "cp_tags_capnp_cython.pyx":405
 *                     self._set_id(val)
 *                 except Exception as e:
 *                     if 'expected isSetInUnion(field)' in str(e):             # <<<<<<<<<<<<<<
 *                         self.init(key)
 *                         self._set_id(val)
 */
            goto __pyx_L16;
          }

          /* "cp_tags_capnp_cython.pyx":409
 *                         self._set_id(val)
 *                     else:
 *                         raise             # <<<<<<<<<<<<<<
 *             elif key == "patterns":
 *                 try:
 */
          /*else*/ {
            __Pyx_GIVEREF(__pyx_t_6);
            __Pyx_GIVEREF(__pyx_t_5);
            __Pyx_XGIVEREF(__pyx_t_14);
            __Pyx_ErrRestoreWithState(__pyx_t_6, __pyx_t_5, __pyx_t_14);
            __pyx_t_6 = 0; __pyx_t_5 = 0; __pyx_t_14 = 0; 
            __PYX_ERR(1, 409, __pyx_L8_except_error)
          }
          __pyx_L16:;
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
          goto __pyx_L7_exception_handled;
        }
        goto __pyx_L8_except_error;
        __pyx_L8_except_error:;

        /* "cp_tags_capnp_cython.pyx":402
 * 
 *             elif key == "id":
 *                 try:             # <<<<<<<<<<<<<<
 *                     self._set_id(val)
 *                 except Exception as e:
 */
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
        goto __pyx_L1_error;
        __pyx_L7_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
        __pyx_L13_try_end:;
      }

      /* "cp_tags_capnp_cython.pyx":401
 *             if False: pass
 * 
 *             elif key == "id":             # <<<<<<<<<<<<<<
 *                 try:
 *                     self._set_id(val)
 */
      goto __pyx_L5;
    }

    /* "cp_tags_capnp_cython.pyx":410
 *                     else:
 *                         raise
 *             elif key == "patterns":             # <<<<<<<<<<<<<<
 *                 try:
 *                     self._set_patterns(val)
 */
    __pyx_t_8 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_patterns, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(1, 410, __pyx_L1_error)
    __pyx_t_9 = (__pyx_t_8 != 0);
    if (__pyx_t_9) {

      /* "cp_tags_capnp_cython.pyx":411
 *                         raise
 *             elif key == "patterns":
 *                 try:             # <<<<<<<<<<<<<<
 *                     self._set_patterns(val)
 *                 except Exception as e:
 */
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_12, &__pyx_t_11, &__pyx_t_10);
        __Pyx_XGOTREF(__pyx_t_12);
        __Pyx_XGOTREF(__pyx_t_11);
        __Pyx_XGOTREF(__pyx_t_10);
        /*try:*/ {

          /* "cp_tags_capnp_cython.pyx":412
 *             elif key == "patterns":
 *                 try:
 *                     self._set_patterns(val)             # <<<<<<<<<<<<<<
 *                 except Exception as e:
 *                     if 'expected isSetInUnion(field)' in str(e):
 */
          if (!(likely(PyList_CheckExact(__pyx_v_val))||((__pyx_v_val) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_val)->tp_name), 0))) __PYX_ERR(1, 412, __pyx_L17_error)
          __pyx_t_14 = ((struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self->__pyx_base.__pyx_vtab)->_set_patterns(__pyx_v_self, ((PyObject*)__pyx_v_val), 0); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 412, __pyx_L17_error)
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

          /* "cp_tags_capnp_cython.pyx":411
 *                         raise
 *             elif key == "patterns":
 *                 try:             # <<<<<<<<<<<<<<
 *                     self._set_patterns(val)
 *                 except Exception as e:
 */
        }
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        goto __pyx_L24_try_end;
        __pyx_L17_error:;
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "cp_tags_capnp_cython.pyx":413
 *                 try:
 *                     self._set_patterns(val)
 *                 except Exception as e:             # <<<<<<<<<<<<<<
 *                     if 'expected isSetInUnion(field)' in str(e):
 *                         self.init(key)
 */
        __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
        if (__pyx_t_7) {
          __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder.from_dict", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_14, &__pyx_t_5, &__pyx_t_6) < 0) __PYX_ERR(1, 413, __pyx_L19_except_error)
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_XDECREF_SET(__pyx_v_e, __pyx_t_5);

          /* "cp_tags_capnp_cython.pyx":414
 *                     self._set_patterns(val)
 *                 except Exception as e:
 *                     if 'expected isSetInUnion(field)' in str(e):             # <<<<<<<<<<<<<<
 *                         self.init(key)
 *                         self._set_patterns(val)
 */
          __pyx_t_15 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_e); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 414, __pyx_L19_except_error)
          __Pyx_GOTREF(__pyx_t_15);
          __pyx_t_9 = (__Pyx_PySequence_ContainsTF(__pyx_kp_s_expected_isSetInUnion_field, __pyx_t_15, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(1, 414, __pyx_L19_except_error)
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __pyx_t_8 = (__pyx_t_9 != 0);
          if (likely(__pyx_t_8)) {

            /* "cp_tags_capnp_cython.pyx":415
 *                 except Exception as e:
 *                     if 'expected isSetInUnion(field)' in str(e):
 *                         self.init(key)             # <<<<<<<<<<<<<<
 *                         self._set_patterns(val)
 *                     else:
 */
            __pyx_t_15 = ((struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.init(((struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder *)__pyx_v_self), __pyx_v_key, 0, NULL); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 415, __pyx_L19_except_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

            /* "cp_tags_capnp_cython.pyx":416
 *                     if 'expected isSetInUnion(field)' in str(e):
 *                         self.init(key)
 *                         self._set_patterns(val)             # <<<<<<<<<<<<<<
 *                     else:
 *                         raise
 */
            if (!(likely(PyList_CheckExact(__pyx_v_val))||((__pyx_v_val) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_val)->tp_name), 0))) __PYX_ERR(1, 416, __pyx_L19_except_error)
            __pyx_t_15 = ((struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self->__pyx_base.__pyx_vtab)->_set_patterns(__pyx_v_self, ((PyObject*)__pyx_v_val), 0); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 416, __pyx_L19_except_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

            /* "cp_tags_capnp_cython.pyx":414
 *                     self._set_patterns(val)
 *                 except Exception as e:
 *                     if 'expected isSetInUnion(field)' in str(e):             # <<<<<<<<<<<<<<
 *                         self.init(key)
 *                         self._set_patterns(val)
 */
            goto __pyx_L27;
          }

          /* "cp_tags_capnp_cython.pyx":418
 *                         self._set_patterns(val)
 *                     else:
 *                         raise             # <<<<<<<<<<<<<<
 *             elif key == "events":
 *                 try:
 */
          /*else*/ {
            __Pyx_GIVEREF(__pyx_t_14);
            __Pyx_GIVEREF(__pyx_t_5);
            __Pyx_XGIVEREF(__pyx_t_6);
            __Pyx_ErrRestoreWithState(__pyx_t_14, __pyx_t_5, __pyx_t_6);
            __pyx_t_14 = 0; __pyx_t_5 = 0; __pyx_t_6 = 0; 
            __PYX_ERR(1, 418, __pyx_L19_except_error)
          }
          __pyx_L27:;
          __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          goto __pyx_L18_exception_handled;
        }
        goto __pyx_L19_except_error;
        __pyx_L19_except_error:;

        /* "cp_tags_capnp_cython.pyx":411
 *                         raise
 *             elif key == "patterns":
 *                 try:             # <<<<<<<<<<<<<<
 *                     self._set_patterns(val)
 *                 except Exception as e:
 */
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_11, __pyx_t_10);
        goto __pyx_L1_error;
        __pyx_L18_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_11, __pyx_t_10);
        __pyx_L24_try_end:;
      }

      /* "cp_tags_capnp_cython.pyx":410
 *                     else:
 *                         raise
 *             elif key == "patterns":             # <<<<<<<<<<<<<<
 *                 try:
 *                     self._set_patterns(val)
 */
      goto __pyx_L5;
    }

    /* "cp_tags_capnp_cython.pyx":419
 *                     else:
 *                         raise
 *             elif key == "events":             # <<<<<<<<<<<<<<
 *                 try:
 *                     self._set_events(val)
 */
    __pyx_t_8 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_events, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(1, 419, __pyx_L1_error)
    __pyx_t_9 = (__pyx_t_8 != 0);
    if (__pyx_t_9) {

      /* "cp_tags_capnp_cython.pyx":420
 *                         raise
 *             elif key == "events":
 *                 try:             # <<<<<<<<<<<<<<
 *                     self._set_events(val)
 *                 except Exception as e:
 */
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
        __Pyx_XGOTREF(__pyx_t_10);
        __Pyx_XGOTREF(__pyx_t_11);
        __Pyx_XGOTREF(__pyx_t_12);
        /*try:*/ {

          /* "cp_tags_capnp_cython.pyx":421
 *             elif key == "events":
 *                 try:
 *                     self._set_events(val)             # <<<<<<<<<<<<<<
 *                 except Exception as e:
 *                     if 'expected isSetInUnion(field)' in str(e):
 */
          if (!(likely(PyList_CheckExact(__pyx_v_val))||((__pyx_v_val) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_val)->tp_name), 0))) __PYX_ERR(1, 421, __pyx_L28_error)
          __pyx_t_6 = ((struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self->__pyx_base.__pyx_vtab)->_set_events(__pyx_v_self, ((PyObject*)__pyx_v_val), 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 421, __pyx_L28_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

          /* "cp_tags_capnp_cython.pyx":420
 *                         raise
 *             elif key == "events":
 *                 try:             # <<<<<<<<<<<<<<
 *                     self._set_events(val)
 *                 except Exception as e:
 */
        }
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        goto __pyx_L35_try_end;
        __pyx_L28_error:;
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "cp_tags_capnp_cython.pyx":422
 *                 try:
 *                     self._set_events(val)
 *                 except Exception as e:             # <<<<<<<<<<<<<<
 *                     if 'expected isSetInUnion(field)' in str(e):
 *                         self.init(key)
 */
        __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
        if (__pyx_t_7) {
          __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder.from_dict", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_5, &__pyx_t_14) < 0) __PYX_ERR(1, 422, __pyx_L30_except_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_XDECREF_SET(__pyx_v_e, __pyx_t_5);

          /* "cp_tags_capnp_cython.pyx":423
 *                     self._set_events(val)
 *                 except Exception as e:
 *                     if 'expected isSetInUnion(field)' in str(e):             # <<<<<<<<<<<<<<
 *                         self.init(key)
 *                         self._set_events(val)
 */
          __pyx_t_15 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_e); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 423, __pyx_L30_except_error)
          __Pyx_GOTREF(__pyx_t_15);
          __pyx_t_9 = (__Pyx_PySequence_ContainsTF(__pyx_kp_s_expected_isSetInUnion_field, __pyx_t_15, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(1, 423, __pyx_L30_except_error)
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __pyx_t_8 = (__pyx_t_9 != 0);
          if (likely(__pyx_t_8)) {

            /* "cp_tags_capnp_cython.pyx":424
 *                 except Exception as e:
 *                     if 'expected isSetInUnion(field)' in str(e):
 *                         self.init(key)             # <<<<<<<<<<<<<<
 *                         self._set_events(val)
 *                     else:
 */
            __pyx_t_15 = ((struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.init(((struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder *)__pyx_v_self), __pyx_v_key, 0, NULL); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 424, __pyx_L30_except_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

            /* "cp_tags_capnp_cython.pyx":425
 *                     if 'expected isSetInUnion(field)' in str(e):
 *                         self.init(key)
 *                         self._set_events(val)             # <<<<<<<<<<<<<<
 *                     else:
 *                         raise
 */
            if (!(likely(PyList_CheckExact(__pyx_v_val))||((__pyx_v_val) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_val)->tp_name), 0))) __PYX_ERR(1, 425, __pyx_L30_except_error)
            __pyx_t_15 = ((struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self->__pyx_base.__pyx_vtab)->_set_events(__pyx_v_self, ((PyObject*)__pyx_v_val), 0); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 425, __pyx_L30_except_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

            /* "cp_tags_capnp_cython.pyx":423
 *                     self._set_events(val)
 *                 except Exception as e:
 *                     if 'expected isSetInUnion(field)' in str(e):             # <<<<<<<<<<<<<<
 *                         self.init(key)
 *                         self._set_events(val)
 */
            goto __pyx_L38;
          }

          /* "cp_tags_capnp_cython.pyx":427
 *                         self._set_events(val)
 *                     else:
 *                         raise             # <<<<<<<<<<<<<<
 *             elif key == "window":
 *                 try:
 */
          /*else*/ {
            __Pyx_GIVEREF(__pyx_t_6);
            __Pyx_GIVEREF(__pyx_t_5);
            __Pyx_XGIVEREF(__pyx_t_14);
            __Pyx_ErrRestoreWithState(__pyx_t_6, __pyx_t_5, __pyx_t_14);
            __pyx_t_6 = 0; __pyx_t_5 = 0; __pyx_t_14 = 0; 
            __PYX_ERR(1, 427, __pyx_L30_except_error)
          }
          __pyx_L38:;
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
          goto __pyx_L29_exception_handled;
        }
        goto __pyx_L30_except_error;
        __pyx_L30_except_error:;

        /* "cp_tags_capnp_cython.pyx":420
 *                         raise
 *             elif key == "events":
 *                 try:             # <<<<<<<<<<<<<<
 *                     self._set_events(val)
 *                 except Exception as e:
 */
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
        goto __pyx_L1_error;
        __pyx_L29_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
        __pyx_L35_try_end:;
      }

      /* "cp_tags_capnp_cython.pyx":419
 *                     else:
 *                         raise
 *             elif key == "events":             # <<<<<<<<<<<<<<
 *                 try:
 *                     self._set_events(val)
 */
      goto __pyx_L5;
    }

    /* "cp_tags_capnp_cython.pyx":428
 *                     else:
 *                         raise
 *             elif key == "window":             # <<<<<<<<<<<<<<
 *                 try:
 *                     self._set_window(val)
 */
    __pyx_t_8 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_window, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(1, 428, __pyx_L1_error)
    __pyx_t_9 = (__pyx_t_8 != 0);
    if (__pyx_t_9) {

      /* "cp_tags_capnp_cython.pyx":429
 *                         raise
 *             elif key == "window":
 *                 try:             # <<<<<<<<<<<<<<
 *                     self._set_window(val)
 *                 except Exception as e:
 */
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_12, &__pyx_t_11, &__pyx_t_10);
        __Pyx_XGOTREF(__pyx_t_12);
        __Pyx_XGOTREF(__pyx_t_11);
        __Pyx_XGOTREF(__pyx_t_10);
        /*try:*/ {

          /* "cp_tags_capnp_cython.pyx":430
 *             elif key == "window":
 *                 try:
 *                     self._set_window(val)             # <<<<<<<<<<<<<<
 *                 except Exception as e:
 *                     if 'expected isSetInUnion(field)' in str(e):
 */
          __pyx_t_16 = __Pyx_PyInt_As_uint16_t(__pyx_v_val); if (unlikely((__pyx_t_16 == ((uint16_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 430, __pyx_L39_error)
          __pyx_t_14 = ((struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self->__pyx_base.__pyx_vtab)->_set_window(__pyx_v_self, __pyx_t_16, 0); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 430, __pyx_L39_error)
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

          /* "cp_tags_capnp_cython.pyx":429
 *                         raise
 *             elif key == "window":
 *                 try:             # <<<<<<<<<<<<<<
 *                     self._set_window(val)
 *                 except Exception as e:
 */
        }
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        goto __pyx_L46_try_end;
        __pyx_L39_error:;
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "cp_tags_capnp_cython.pyx":431
 *                 try:
 *                     self._set_window(val)
 *                 except Exception as e:             # <<<<<<<<<<<<<<
 *                     if 'expected isSetInUnion(field)' in str(e):
 *                         self.init(key)
 */
        __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
        if (__pyx_t_7) {
          __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder.from_dict", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_14, &__pyx_t_5, &__pyx_t_6) < 0) __PYX_ERR(1, 431, __pyx_L41_except_error)
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_XDECREF_SET(__pyx_v_e, __pyx_t_5);

          /* "cp_tags_capnp_cython.pyx":432
 *                     self._set_window(val)
 *                 except Exception as e:
 *                     if 'expected isSetInUnion(field)' in str(e):             # <<<<<<<<<<<<<<
 *                         self.init(key)
 *                         self._set_window(val)
 */
          __pyx_t_15 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_e); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 432, __pyx_L41_except_error)
          __Pyx_GOTREF(__pyx_t_15);
          __pyx_t_9 = (__Pyx_PySequence_ContainsTF(__pyx_kp_s_expected_isSetInUnion_field, __pyx_t_15, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(1, 432, __pyx_L41_except_error)
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __pyx_t_8 = (__pyx_t_9 != 0);
          if (likely(__pyx_t_8)) {

            /* "cp_tags_capnp_cython.pyx":433
 *                 except Exception as e:
 *                     if 'expected isSetInUnion(field)' in str(e):
 *                         self.init(key)             # <<<<<<<<<<<<<<
 *                         self._set_window(val)
 *                     else:
 */
            __pyx_t_15 = ((struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.init(((struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder *)__pyx_v_self), __pyx_v_key, 0, NULL); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 433, __pyx_L41_except_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

            /* "cp_tags_capnp_cython.pyx":434
 *                     if 'expected isSetInUnion(field)' in str(e):
 *                         self.init(key)
 *                         self._set_window(val)             # <<<<<<<<<<<<<<
 *                     else:
 *                         raise
 */
            __pyx_t_16 = __Pyx_PyInt_As_uint16_t(__pyx_v_val); if (unlikely((__pyx_t_16 == ((uint16_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 434, __pyx_L41_except_error)
            __pyx_t_15 = ((struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self->__pyx_base.__pyx_vtab)->_set_window(__pyx_v_self, __pyx_t_16, 0); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 434, __pyx_L41_except_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

            /* "cp_tags_capnp_cython.pyx":432
 *                     self._set_window(val)
 *                 except Exception as e:
 *                     if 'expected isSetInUnion(field)' in str(e):             # <<<<<<<<<<<<<<
 *                         self.init(key)
 *                         self._set_window(val)
 */
            goto __pyx_L49;
          }

          /* "cp_tags_capnp_cython.pyx":436
 *                         self._set_window(val)
 *                     else:
 *                         raise             # <<<<<<<<<<<<<<
 *             elif key == "duration":
 *                 try:
 */
          /*else*/ {
            __Pyx_GIVEREF(__pyx_t_14);
            __Pyx_GIVEREF(__pyx_t_5);
            __Pyx_XGIVEREF(__pyx_t_6);
            __Pyx_ErrRestoreWithState(__pyx_t_14, __pyx_t_5, __pyx_t_6);
            __pyx_t_14 = 0; __pyx_t_5 = 0; __pyx_t_6 = 0; 
            __PYX_ERR(1, 436, __pyx_L41_except_error)
          }
          __pyx_L49:;
          __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          goto __pyx_L40_exception_handled;
        }
        goto __pyx_L41_except_error;
        __pyx_L41_except_error:;

        /* "cp_tags_capnp_cython.pyx":429
 *                         raise
 *             elif key == "window":
 *                 try:             # <<<<<<<<<<<<<<
 *                     self._set_window(val)
 *                 except Exception as e:
 */
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_11, __pyx_t_10);
        goto __pyx_L1_error;
        __pyx_L40_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_11, __pyx_t_10);
        __pyx_L46_try_end:;
      }

      /* "cp_tags_capnp_cython.pyx":428
 *                     else:
 *                         raise
 *             elif key == "window":             # <<<<<<<<<<<<<<
 *                 try:
 *                     self._set_window(val)
 */
      goto __pyx_L5;
    }

    /* "cp_tags_capnp_cython.pyx":437
 *                     else:
 *                         raise
 *             elif key == "duration":             # <<<<<<<<<<<<<<
 *                 try:
 *                     self._set_duration(val)
 */
    __pyx_t_8 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_duration, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(1, 437, __pyx_L1_error)
    __pyx_t_9 = (__pyx_t_8 != 0);
    if (__pyx_t_9) {

      /* "cp_tags_capnp_cython.pyx":438
 *                         raise
 *             elif key == "duration":
 *                 try:             # <<<<<<<<<<<<<<
 *                     self._set_duration(val)
 *                 except Exception as e:
 */
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
        __Pyx_XGOTREF(__pyx_t_10);
        __Pyx_XGOTREF(__pyx_t_11);
        __Pyx_XGOTREF(__pyx_t_12);
        /*try:*/ {

          /* "cp_tags_capnp_cython.pyx":439
 *             elif key == "duration":
 *                 try:
 *                     self._set_duration(val)             # <<<<<<<<<<<<<<
 *                 except Exception as e:
 *                     if 'expected isSetInUnion(field)' in str(e):
 */
          __pyx_t_6 = ((struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self->__pyx_base.__pyx_vtab)->_set_duration(__pyx_v_self, __pyx_v_val, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 439, __pyx_L50_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

          /* "cp_tags_capnp_cython.pyx":438
 *                         raise
 *             elif key == "duration":
 *                 try:             # <<<<<<<<<<<<<<
 *                     self._set_duration(val)
 *                 except Exception as e:
 */
        }
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        goto __pyx_L57_try_end;
        __pyx_L50_error:;
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "cp_tags_capnp_cython.pyx":440
 *                 try:
 *                     self._set_duration(val)
 *                 except Exception as e:             # <<<<<<<<<<<<<<
 *                     if 'expected isSetInUnion(field)' in str(e):
 *                         self.init(key)
 */
        __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
        if (__pyx_t_7) {
          __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder.from_dict", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_5, &__pyx_t_14) < 0) __PYX_ERR(1, 440, __pyx_L52_except_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_XDECREF_SET(__pyx_v_e, __pyx_t_5);

          /* "cp_tags_capnp_cython.pyx":441
 *                     self._set_duration(val)
 *                 except Exception as e:
 *                     if 'expected isSetInUnion(field)' in str(e):             # <<<<<<<<<<<<<<
 *                         self.init(key)
 *                         self._set_duration(val)
 */
          __pyx_t_15 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_e); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 441, __pyx_L52_except_error)
          __Pyx_GOTREF(__pyx_t_15);
          __pyx_t_9 = (__Pyx_PySequence_ContainsTF(__pyx_kp_s_expected_isSetInUnion_field, __pyx_t_15, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(1, 441, __pyx_L52_except_error)
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __pyx_t_8 = (__pyx_t_9 != 0);
          if (likely(__pyx_t_8)) {

            /* "cp_tags_capnp_cython.pyx":442
 *                 except Exception as e:
 *                     if 'expected isSetInUnion(field)' in str(e):
 *                         self.init(key)             # <<<<<<<<<<<<<<
 *                         self._set_duration(val)
 *                     else:
 */
            __pyx_t_15 = ((struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.init(((struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder *)__pyx_v_self), __pyx_v_key, 0, NULL); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 442, __pyx_L52_except_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

            /* "cp_tags_capnp_cython.pyx":443
 *                     if 'expected isSetInUnion(field)' in str(e):
 *                         self.init(key)
 *                         self._set_duration(val)             # <<<<<<<<<<<<<<
 *                     else:
 *                         raise
 */
            __pyx_t_15 = ((struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self->__pyx_base.__pyx_vtab)->_set_duration(__pyx_v_self, __pyx_v_val, 0); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 443, __pyx_L52_except_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

            /* "cp_tags_capnp_cython.pyx":441
 *                     self._set_duration(val)
 *                 except Exception as e:
 *                     if 'expected isSetInUnion(field)' in str(e):             # <<<<<<<<<<<<<<
 *                         self.init(key)
 *                         self._set_duration(val)
 */
            goto __pyx_L60;
          }

          /* "cp_tags_capnp_cython.pyx":445
 *                         self._set_duration(val)
 *                     else:
 *                         raise             # <<<<<<<<<<<<<<
 *             elif key == "finished":
 *                 try:
 */
          /*else*/ {
            __Pyx_GIVEREF(__pyx_t_6);
            __Pyx_GIVEREF(__pyx_t_5);
            __Pyx_XGIVEREF(__pyx_t_14);
            __Pyx_ErrRestoreWithState(__pyx_t_6, __pyx_t_5, __pyx_t_14);
            __pyx_t_6 = 0; __pyx_t_5 = 0; __pyx_t_14 = 0; 
            __PYX_ERR(1, 445, __pyx_L52_except_error)
          }
          __pyx_L60:;
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
          goto __pyx_L51_exception_handled;
        }
        goto __pyx_L52_except_error;
        __pyx_L52_except_error:;

        /* "cp_tags_capnp_cython.pyx":438
 *                         raise
 *             elif key == "duration":
 *                 try:             # <<<<<<<<<<<<<<
 *                     self._set_duration(val)
 *                 except Exception as e:
 */
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
        goto __pyx_L1_error;
        __pyx_L51_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
        __pyx_L57_try_end:;
      }

      /* "cp_tags_capnp_cython.pyx":437
 *                     else:
 *                         raise
 *             elif key == "duration":             # <<<<<<<<<<<<<<
 *                 try:
 *                     self._set_duration(val)
 */
      goto __pyx_L5;
    }

    /* "cp_tags_capnp_cython.pyx":446
 *                     else:
 *                         raise
 *             elif key == "finished":             # <<<<<<<<<<<<<<
 *                 try:
 *                     self._set_finished(val)
 */
    __pyx_t_8 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_finished, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(1, 446, __pyx_L1_error)
    __pyx_t_9 = (__pyx_t_8 != 0);
    if (__pyx_t_9) {

      /* "cp_tags_capnp_cython.pyx":447
 *                         raise
 *             elif key == "finished":
 *                 try:             # <<<<<<<<<<<<<<
 *                     self._set_finished(val)
 *                 except Exception as e:
 */
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_12, &__pyx_t_11, &__pyx_t_10);
        __Pyx_XGOTREF(__pyx_t_12);
        __Pyx_XGOTREF(__pyx_t_11);
        __Pyx_XGOTREF(__pyx_t_10);
        /*try:*/ {

          /* "cp_tags_capnp_cython.pyx":448
 *             elif key == "finished":
 *                 try:
 *                     self._set_finished(val)             # <<<<<<<<<<<<<<
 *                 except Exception as e:
 *                     if 'expected isSetInUnion(field)' in str(e):
 */
          __pyx_t_17 = __Pyx_PyObject_IsTrue(__pyx_v_val); if (unlikely((__pyx_t_17 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 448, __pyx_L61_error)
          __pyx_t_14 = ((struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self->__pyx_base.__pyx_vtab)->_set_finished(__pyx_v_self, __pyx_t_17, 0); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 448, __pyx_L61_error)
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

          /* "cp_tags_capnp_cython.pyx":447
 *                         raise
 *             elif key == "finished":
 *                 try:             # <<<<<<<<<<<<<<
 *                     self._set_finished(val)
 *                 except Exception as e:
 */
        }
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        goto __pyx_L68_try_end;
        __pyx_L61_error:;
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "cp_tags_capnp_cython.pyx":449
 *                 try:
 *                     self._set_finished(val)
 *                 except Exception as e:             # <<<<<<<<<<<<<<
 *                     if 'expected isSetInUnion(field)' in str(e):
 *                         self.init(key)
 */
        __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
        if (__pyx_t_7) {
          __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder.from_dict", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_14, &__pyx_t_5, &__pyx_t_6) < 0) __PYX_ERR(1, 449, __pyx_L63_except_error)
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_XDECREF_SET(__pyx_v_e, __pyx_t_5);

          /* "cp_tags_capnp_cython.pyx":450
 *                     self._set_finished(val)
 *                 except Exception as e:
 *                     if 'expected isSetInUnion(field)' in str(e):             # <<<<<<<<<<<<<<
 *                         self.init(key)
 *                         self._set_finished(val)
 */
          __pyx_t_15 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_e); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 450, __pyx_L63_except_error)
          __Pyx_GOTREF(__pyx_t_15);
          __pyx_t_9 = (__Pyx_PySequence_ContainsTF(__pyx_kp_s_expected_isSetInUnion_field, __pyx_t_15, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(1, 450, __pyx_L63_except_error)
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __pyx_t_8 = (__pyx_t_9 != 0);
          if (likely(__pyx_t_8)) {

            /* "cp_tags_capnp_cython.pyx":451
 *                 except Exception as e:
 *                     if 'expected isSetInUnion(field)' in str(e):
 *                         self.init(key)             # <<<<<<<<<<<<<<
 *                         self._set_finished(val)
 *                     else:
 */
            __pyx_t_15 = ((struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.init(((struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder *)__pyx_v_self), __pyx_v_key, 0, NULL); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 451, __pyx_L63_except_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

            /* "cp_tags_capnp_cython.pyx":452
 *                     if 'expected isSetInUnion(field)' in str(e):
 *                         self.init(key)
 *                         self._set_finished(val)             # <<<<<<<<<<<<<<
 *                     else:
 *                         raise
 */
            __pyx_t_17 = __Pyx_PyObject_IsTrue(__pyx_v_val); if (unlikely((__pyx_t_17 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 452, __pyx_L63_except_error)
            __pyx_t_15 = ((struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self->__pyx_base.__pyx_vtab)->_set_finished(__pyx_v_self, __pyx_t_17, 0); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 452, __pyx_L63_except_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

            /* "cp_tags_capnp_cython.pyx":450
 *                     self._set_finished(val)
 *                 except Exception as e:
 *                     if 'expected isSetInUnion(field)' in str(e):             # <<<<<<<<<<<<<<
 *                         self.init(key)
 *                         self._set_finished(val)
 */
            goto __pyx_L71;
          }

          /* "cp_tags_capnp_cython.pyx":454
 *                         self._set_finished(val)
 *                     else:
 *                         raise             # <<<<<<<<<<<<<<
 *             elif key == "starttag":
 *                 try:
 */
          /*else*/ {
            __Pyx_GIVEREF(__pyx_t_14);
            __Pyx_GIVEREF(__pyx_t_5);
            __Pyx_XGIVEREF(__pyx_t_6);
            __Pyx_ErrRestoreWithState(__pyx_t_14, __pyx_t_5, __pyx_t_6);
            __pyx_t_14 = 0; __pyx_t_5 = 0; __pyx_t_6 = 0; 
            __PYX_ERR(1, 454, __pyx_L63_except_error)
          }
          __pyx_L71:;
          __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          goto __pyx_L62_exception_handled;
        }
        goto __pyx_L63_except_error;
        __pyx_L63_except_error:;

        /* "cp_tags_capnp_cython.pyx":447
 *                         raise
 *             elif key == "finished":
 *                 try:             # <<<<<<<<<<<<<<
 *                     self._set_finished(val)
 *                 except Exception as e:
 */
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_11, __pyx_t_10);
        goto __pyx_L1_error;
        __pyx_L62_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_11, __pyx_t_10);
        __pyx_L68_try_end:;
      }

      /* "cp_tags_capnp_cython.pyx":446
 *                     else:
 *                         raise
 *             elif key == "finished":             # <<<<<<<<<<<<<<
 *                 try:
 *                     self._set_finished(val)
 */
      goto __pyx_L5;
    }

    /* "cp_tags_capnp_cython.pyx":455
 *                     else:
 *                         raise
 *             elif key == "starttag":             # <<<<<<<<<<<<<<
 *                 try:
 *                     self._set_starttag(val)
 */
    __pyx_t_8 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_starttag, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(1, 455, __pyx_L1_error)
    __pyx_t_9 = (__pyx_t_8 != 0);
    if (__pyx_t_9) {

      /* "cp_tags_capnp_cython.pyx":456
 *                         raise
 *             elif key == "starttag":
 *                 try:             # <<<<<<<<<<<<<<
 *                     self._set_starttag(val)
 *                 except Exception as e:
 */
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
        __Pyx_XGOTREF(__pyx_t_10);
        __Pyx_XGOTREF(__pyx_t_11);
        __Pyx_XGOTREF(__pyx_t_12);
        /*try:*/ {

          /* "cp_tags_capnp_cython.pyx":457
 *             elif key == "starttag":
 *                 try:
 *                     self._set_starttag(val)             # <<<<<<<<<<<<<<
 *                 except Exception as e:
 *                     if 'expected isSetInUnion(field)' in str(e):
 */
          __pyx_t_13 = __Pyx_PyInt_As_uint64_t(__pyx_v_val); if (unlikely((__pyx_t_13 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 457, __pyx_L72_error)
          __pyx_t_6 = ((struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self->__pyx_base.__pyx_vtab)->_set_starttag(__pyx_v_self, __pyx_t_13, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 457, __pyx_L72_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

          /* "cp_tags_capnp_cython.pyx":456
 *                         raise
 *             elif key == "starttag":
 *                 try:             # <<<<<<<<<<<<<<
 *                     self._set_starttag(val)
 *                 except Exception as e:
 */
        }
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        goto __pyx_L79_try_end;
        __pyx_L72_error:;
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "cp_tags_capnp_cython.pyx":458
 *                 try:
 *                     self._set_starttag(val)
 *                 except Exception as e:             # <<<<<<<<<<<<<<
 *                     if 'expected isSetInUnion(field)' in str(e):
 *                         self.init(key)
 */
        __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
        if (__pyx_t_7) {
          __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder.from_dict", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_5, &__pyx_t_14) < 0) __PYX_ERR(1, 458, __pyx_L74_except_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_XDECREF_SET(__pyx_v_e, __pyx_t_5);

          /* "cp_tags_capnp_cython.pyx":459
 *                     self._set_starttag(val)
 *                 except Exception as e:
 *                     if 'expected isSetInUnion(field)' in str(e):             # <<<<<<<<<<<<<<
 *                         self.init(key)
 *                         self._set_starttag(val)
 */
          __pyx_t_15 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_e); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 459, __pyx_L74_except_error)
          __Pyx_GOTREF(__pyx_t_15);
          __pyx_t_9 = (__Pyx_PySequence_ContainsTF(__pyx_kp_s_expected_isSetInUnion_field, __pyx_t_15, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(1, 459, __pyx_L74_except_error)
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __pyx_t_8 = (__pyx_t_9 != 0);
          if (likely(__pyx_t_8)) {

            /* "cp_tags_capnp_cython.pyx":460
 *                 except Exception as e:
 *                     if 'expected isSetInUnion(field)' in str(e):
 *                         self.init(key)             # <<<<<<<<<<<<<<
 *                         self._set_starttag(val)
 *                     else:
 */
            __pyx_t_15 = ((struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.init(((struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder *)__pyx_v_self), __pyx_v_key, 0, NULL); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 460, __pyx_L74_except_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

            /* "cp_tags_capnp_cython.pyx":461
 *                     if 'expected isSetInUnion(field)' in str(e):
 *                         self.init(key)
 *                         self._set_starttag(val)             # <<<<<<<<<<<<<<
 *                     else:
 *                         raise
 */
            __pyx_t_13 = __Pyx_PyInt_As_uint64_t(__pyx_v_val); if (unlikely((__pyx_t_13 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 461, __pyx_L74_except_error)
            __pyx_t_15 = ((struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self->__pyx_base.__pyx_vtab)->_set_starttag(__pyx_v_self, __pyx_t_13, 0); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 461, __pyx_L74_except_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

            /* "cp_tags_capnp_cython.pyx":459
 *                     self._set_starttag(val)
 *                 except Exception as e:
 *                     if 'expected isSetInUnion(field)' in str(e):             # <<<<<<<<<<<<<<
 *                         self.init(key)
 *                         self._set_starttag(val)
 */
            goto __pyx_L82;
          }

          /* "cp_tags_capnp_cython.pyx":463
 *                         self._set_starttag(val)
 *                     else:
 *                         raise             # <<<<<<<<<<<<<<
 *             elif key == "stoptag":
 *                 try:
 */
          /*else*/ {
            __Pyx_GIVEREF(__pyx_t_6);
            __Pyx_GIVEREF(__pyx_t_5);
            __Pyx_XGIVEREF(__pyx_t_14);
            __Pyx_ErrRestoreWithState(__pyx_t_6, __pyx_t_5, __pyx_t_14);
            __pyx_t_6 = 0; __pyx_t_5 = 0; __pyx_t_14 = 0; 
            __PYX_ERR(1, 463, __pyx_L74_except_error)
          }
          __pyx_L82:;
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
          goto __pyx_L73_exception_handled;
        }
        goto __pyx_L74_except_error;
        __pyx_L74_except_error:;

        /* "cp_tags_capnp_cython.pyx":456
 *                         raise
 *             elif key == "starttag":
 *                 try:             # <<<<<<<<<<<<<<
 *                     self._set_starttag(val)
 *                 except Exception as e:
 */
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
        goto __pyx_L1_error;
        __pyx_L73_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
        __pyx_L79_try_end:;
      }

      /* "cp_tags_capnp_cython.pyx":455
 *                     else:
 *                         raise
 *             elif key == "starttag":             # <<<<<<<<<<<<<<
 *                 try:
 *                     self._set_starttag(val)
 */
      goto __pyx_L5;
    }

    /* "cp_tags_capnp_cython.pyx":464
 *                     else:
 *                         raise
 *             elif key == "stoptag":             # <<<<<<<<<<<<<<
 *                 try:
 *                     self._set_stoptag(val)
 */
    __pyx_t_8 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_stoptag, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(1, 464, __pyx_L1_error)
    __pyx_t_9 = (__pyx_t_8 != 0);
    if (__pyx_t_9) {

      /* "cp_tags_capnp_cython.pyx":465
 *                         raise
 *             elif key == "stoptag":
 *                 try:             # <<<<<<<<<<<<<<
 *                     self._set_stoptag(val)
 *                 except Exception as e:
 */
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_12, &__pyx_t_11, &__pyx_t_10);
        __Pyx_XGOTREF(__pyx_t_12);
        __Pyx_XGOTREF(__pyx_t_11);
        __Pyx_XGOTREF(__pyx_t_10);
        /*try:*/ {

          /* "cp_tags_capnp_cython.pyx":466
 *             elif key == "stoptag":
 *                 try:
 *                     self._set_stoptag(val)             # <<<<<<<<<<<<<<
 *                 except Exception as e:
 *                     if 'expected isSetInUnion(field)' in str(e):
 */
          __pyx_t_13 = __Pyx_PyInt_As_uint64_t(__pyx_v_val); if (unlikely((__pyx_t_13 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 466, __pyx_L83_error)
          __pyx_t_14 = ((struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self->__pyx_base.__pyx_vtab)->_set_stoptag(__pyx_v_self, __pyx_t_13, 0); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 466, __pyx_L83_error)
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

          /* "cp_tags_capnp_cython.pyx":465
 *                         raise
 *             elif key == "stoptag":
 *                 try:             # <<<<<<<<<<<<<<
 *                     self._set_stoptag(val)
 *                 except Exception as e:
 */
        }
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        goto __pyx_L90_try_end;
        __pyx_L83_error:;
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "cp_tags_capnp_cython.pyx":467
 *                 try:
 *                     self._set_stoptag(val)
 *                 except Exception as e:             # <<<<<<<<<<<<<<
 *                     if 'expected isSetInUnion(field)' in str(e):
 *                         self.init(key)
 */
        __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
        if (__pyx_t_7) {
          __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder.from_dict", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_14, &__pyx_t_5, &__pyx_t_6) < 0) __PYX_ERR(1, 467, __pyx_L85_except_error)
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_XDECREF_SET(__pyx_v_e, __pyx_t_5);

          /* "cp_tags_capnp_cython.pyx":468
 *                     self._set_stoptag(val)
 *                 except Exception as e:
 *                     if 'expected isSetInUnion(field)' in str(e):             # <<<<<<<<<<<<<<
 *                         self.init(key)
 *                         self._set_stoptag(val)
 */
          __pyx_t_15 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_e); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 468, __pyx_L85_except_error)
          __Pyx_GOTREF(__pyx_t_15);
          __pyx_t_9 = (__Pyx_PySequence_ContainsTF(__pyx_kp_s_expected_isSetInUnion_field, __pyx_t_15, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(1, 468, __pyx_L85_except_error)
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __pyx_t_8 = (__pyx_t_9 != 0);
          if (likely(__pyx_t_8)) {

            /* "cp_tags_capnp_cython.pyx":469
 *                 except Exception as e:
 *                     if 'expected isSetInUnion(field)' in str(e):
 *                         self.init(key)             # <<<<<<<<<<<<<<
 *                         self._set_stoptag(val)
 *                     else:
 */
            __pyx_t_15 = ((struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.init(((struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder *)__pyx_v_self), __pyx_v_key, 0, NULL); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 469, __pyx_L85_except_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

            /* "cp_tags_capnp_cython.pyx":470
 *                     if 'expected isSetInUnion(field)' in str(e):
 *                         self.init(key)
 *                         self._set_stoptag(val)             # <<<<<<<<<<<<<<
 *                     else:
 *                         raise
 */
            __pyx_t_13 = __Pyx_PyInt_As_uint64_t(__pyx_v_val); if (unlikely((__pyx_t_13 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 470, __pyx_L85_except_error)
            __pyx_t_15 = ((struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self->__pyx_base.__pyx_vtab)->_set_stoptag(__pyx_v_self, __pyx_t_13, 0); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 470, __pyx_L85_except_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

            /* "cp_tags_capnp_cython.pyx":468
 *                     self._set_stoptag(val)
 *                 except Exception as e:
 *                     if 'expected isSetInUnion(field)' in str(e):             # <<<<<<<<<<<<<<
 *                         self.init(key)
 *                         self._set_stoptag(val)
 */
            goto __pyx_L93;
          }

          /* "cp_tags_capnp_cython.pyx":472
 *                         self._set_stoptag(val)
 *                     else:
 *                         raise             # <<<<<<<<<<<<<<
 *             elif key == "err":
 *                 try:
 */
          /*else*/ {
            __Pyx_GIVEREF(__pyx_t_14);
            __Pyx_GIVEREF(__pyx_t_5);
            __Pyx_XGIVEREF(__pyx_t_6);
            __Pyx_ErrRestoreWithState(__pyx_t_14, __pyx_t_5, __pyx_t_6);
            __pyx_t_14 = 0; __pyx_t_5 = 0; __pyx_t_6 = 0; 
            __PYX_ERR(1, 472, __pyx_L85_except_error)
          }
          __pyx_L93:;
          __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          goto __pyx_L84_exception_handled;
        }
        goto __pyx_L85_except_error;
        __pyx_L85_except_error:;

        /* "cp_tags_capnp_cython.pyx":465
 *                         raise
 *             elif key == "stoptag":
 *                 try:             # <<<<<<<<<<<<<<
 *                     self._set_stoptag(val)
 *                 except Exception as e:
 */
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_11, __pyx_t_10);
        goto __pyx_L1_error;
        __pyx_L84_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_11, __pyx_t_10);
        __pyx_L90_try_end:;
      }

      /* "cp_tags_capnp_cython.pyx":464
 *                     else:
 *                         raise
 *             elif key == "stoptag":             # <<<<<<<<<<<<<<
 *                 try:
 *                     self._set_stoptag(val)
 */
      goto __pyx_L5;
    }

    /* "cp_tags_capnp_cython.pyx":473
 *                     else:
 *                         raise
 *             elif key == "err":             # <<<<<<<<<<<<<<
 *                 try:
 *                     self._set_err(val)
 */
    __pyx_t_8 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_err, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(1, 473, __pyx_L1_error)
    __pyx_t_9 = (__pyx_t_8 != 0);
    if (likely(__pyx_t_9)) {

      /* "cp_tags_capnp_cython.pyx":474
 *                         raise
 *             elif key == "err":
 *                 try:             # <<<<<<<<<<<<<<
 *                     self._set_err(val)
 *                 except Exception as e:
 */
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
        __Pyx_XGOTREF(__pyx_t_10);
        __Pyx_XGOTREF(__pyx_t_11);
        __Pyx_XGOTREF(__pyx_t_12);
        /*try:*/ {

          /* "cp_tags_capnp_cython.pyx":475
 *             elif key == "err":
 *                 try:
 *                     self._set_err(val)             # <<<<<<<<<<<<<<
 *                 except Exception as e:
 *                     if 'expected isSetInUnion(field)' in str(e):
 */
          __pyx_t_6 = ((struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self->__pyx_base.__pyx_vtab)->_set_err(__pyx_v_self, __pyx_v_val, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 475, __pyx_L94_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

          /* "cp_tags_capnp_cython.pyx":474
 *                         raise
 *             elif key == "err":
 *                 try:             # <<<<<<<<<<<<<<
 *                     self._set_err(val)
 *                 except Exception as e:
 */
        }
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        goto __pyx_L101_try_end;
        __pyx_L94_error:;
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "cp_tags_capnp_cython.pyx":476
 *                 try:
 *                     self._set_err(val)
 *                 except Exception as e:             # <<<<<<<<<<<<<<
 *                     if 'expected isSetInUnion(field)' in str(e):
 *                         self.init(key)
 */
        __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
        if (__pyx_t_7) {
          __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder.from_dict", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_5, &__pyx_t_14) < 0) __PYX_ERR(1, 476, __pyx_L96_except_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_XDECREF_SET(__pyx_v_e, __pyx_t_5);

          /* "cp_tags_capnp_cython.pyx":477
 *                     self._set_err(val)
 *                 except Exception as e:
 *                     if 'expected isSetInUnion(field)' in str(e):             # <<<<<<<<<<<<<<
 *                         self.init(key)
 *                         self._set_err(val)
 */
          __pyx_t_15 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_e); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 477, __pyx_L96_except_error)
          __Pyx_GOTREF(__pyx_t_15);
          __pyx_t_9 = (__Pyx_PySequence_ContainsTF(__pyx_kp_s_expected_isSetInUnion_field, __pyx_t_15, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(1, 477, __pyx_L96_except_error)
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __pyx_t_8 = (__pyx_t_9 != 0);
          if (likely(__pyx_t_8)) {

            /* "cp_tags_capnp_cython.pyx":478
 *                 except Exception as e:
 *                     if 'expected isSetInUnion(field)' in str(e):
 *                         self.init(key)             # <<<<<<<<<<<<<<
 *                         self._set_err(val)
 *                     else:
 */
            __pyx_t_15 = ((struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.init(((struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder *)__pyx_v_self), __pyx_v_key, 0, NULL); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 478, __pyx_L96_except_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

            /* "cp_tags_capnp_cython.pyx":479
 *                     if 'expected isSetInUnion(field)' in str(e):
 *                         self.init(key)
 *                         self._set_err(val)             # <<<<<<<<<<<<<<
 *                     else:
 *                         raise
 */
            __pyx_t_15 = ((struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self->__pyx_base.__pyx_vtab)->_set_err(__pyx_v_self, __pyx_v_val, 0); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 479, __pyx_L96_except_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

            /* "cp_tags_capnp_cython.pyx":477
 *                     self._set_err(val)
 *                 except Exception as e:
 *                     if 'expected isSetInUnion(field)' in str(e):             # <<<<<<<<<<<<<<
 *                         self.init(key)
 *                         self._set_err(val)
 */
            goto __pyx_L104;
          }

          /* "cp_tags_capnp_cython.pyx":481
 *                         self._set_err(val)
 *                     else:
 *                         raise             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError('Key not found in struct: ' + key)
 */
          /*else*/ {
            __Pyx_GIVEREF(__pyx_t_6);
            __Pyx_GIVEREF(__pyx_t_5);
            __Pyx_XGIVEREF(__pyx_t_14);
            __Pyx_ErrRestoreWithState(__pyx_t_6, __pyx_t_5, __pyx_t_14);
            __pyx_t_6 = 0; __pyx_t_5 = 0; __pyx_t_14 = 0; 
            __PYX_ERR(1, 481, __pyx_L96_except_error)
          }
          __pyx_L104:;
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
          goto __pyx_L95_exception_handled;
        }
        goto __pyx_L96_except_error;
        __pyx_L96_except_error:;

        /* "cp_tags_capnp_cython.pyx":474
 *                         raise
 *             elif key == "err":
 *                 try:             # <<<<<<<<<<<<<<
 *                     self._set_err(val)
 *                 except Exception as e:
 */
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
        goto __pyx_L1_error;
        __pyx_L95_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
        __pyx_L101_try_end:;
      }

      /* "cp_tags_capnp_cython.pyx":473
 *                     else:
 *                         raise
 *             elif key == "err":             # <<<<<<<<<<<<<<
 *                 try:
 *                     self._set_err(val)
 */
      goto __pyx_L5;
    }

    /* "cp_tags_capnp_cython.pyx":483
 *                         raise
 *             else:
 *                 raise ValueError('Key not found in struct: ' + key)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    /*else*/ {
      __pyx_t_14 = PyNumber_Add(__pyx_kp_s_Key_not_found_in_struct, __pyx_v_key); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 483, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_14); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 483, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(1, 483, __pyx_L1_error)
    }
    __pyx_L5:;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cp_tags_capnp_cython.pyx":396
 *         return ret
 * 
 *     def from_dict(self, dict d):             # <<<<<<<<<<<<<<
 *         cdef str key
 *         for key, val in d.iteritems():
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder.from_dict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_val);
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr,self.thisptr_child cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_43__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_20cp_tags_capnp_cython_11Job_Builder_42__reduce_cython__[] = "Job_Builder.__reduce_cython__(self)";
static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_43__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_20cp_tags_capnp_cython_11Job_Builder_42__reduce_cython__(((struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_20cp_tags_capnp_cython_11Job_Builder_42__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr,self.thisptr_child cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr,self.thisptr_child cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr,self.thisptr_child cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr,self.thisptr_child cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr,self.thisptr_child cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_45__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_20cp_tags_capnp_cython_11Job_Builder_44__setstate_cython__[] = "Job_Builder.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_45__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_20cp_tags_capnp_cython_11Job_Builder_44__setstate_cython__(((struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_20cp_tags_capnp_cython_11Job_Builder_44__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.thisptr,self.thisptr_child cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr,self.thisptr_child cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr,self.thisptr_child cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr,self.thisptr_child cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cp_tags_capnp_cython.Job_Builder.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "capnp/includes/capnp_cpp.pxd":127
 *         VoidPromise afterDelay(Duration delay)
 * 
 * cdef inline Duration Nanoseconds(int64_t nanos):             # <<<<<<<<<<<<<<
 *     return NANOSECONDS * nanos
 * 
 */

static CYTHON_INLINE  ::kj::Duration __pyx_f_5capnp_8includes_9capnp_cpp_Nanoseconds(int64_t __pyx_v_nanos) {
   ::kj::Duration __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Nanoseconds", 0);

  /* "capnp/includes/capnp_cpp.pxd":128
 * 
 * cdef inline Duration Nanoseconds(int64_t nanos):
 *     return NANOSECONDS * nanos             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "kj/async-io.h" namespace " ::kj":
 */
  __pyx_r = ( ::kj::NANOSECONDS * __pyx_v_nanos);
  goto __pyx_L0;

  /* "capnp/includes/capnp_cpp.pxd":127
 *         VoidPromise afterDelay(Duration delay)
 * 
 * cdef inline Duration Nanoseconds(int64_t nanos):             # <<<<<<<<<<<<<<
 *     return NANOSECONDS * nanos
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Reader __pyx_vtable_20cp_tags_capnp_cython_Job_Reader;

static PyObject *__pyx_tp_new_20cp_tags_capnp_cython_Job_Reader(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *p;
  PyObject *o = __pyx_ptype_5capnp_3lib_5capnp__DynamicStructReader->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_5capnp_3lib_5capnp__DynamicStructReader*)__pyx_vtabptr_20cp_tags_capnp_cython_Job_Reader;
  new((void*)&(p->thisptr_child)) Job::Reader();
  return o;
}

static void __pyx_tp_dealloc_20cp_tags_capnp_cython_Job_Reader(PyObject *o) {
  struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *p = (struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->thisptr_child);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_5capnp_3lib_5capnp__DynamicStructReader)) __pyx_ptype_5capnp_3lib_5capnp__DynamicStructReader->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_20cp_tags_capnp_cython_Job_Reader);
}

static int __pyx_tp_traverse_20cp_tags_capnp_cython_Job_Reader(PyObject *o, visitproc v, void *a) {
  int e;
  e = ((likely(__pyx_ptype_5capnp_3lib_5capnp__DynamicStructReader)) ? ((__pyx_ptype_5capnp_3lib_5capnp__DynamicStructReader->tp_traverse) ? __pyx_ptype_5capnp_3lib_5capnp__DynamicStructReader->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_20cp_tags_capnp_cython_Job_Reader)); if (e) return e;
  return 0;
}

static int __pyx_tp_clear_20cp_tags_capnp_cython_Job_Reader(PyObject *o) {
  if (likely(__pyx_ptype_5capnp_3lib_5capnp__DynamicStructReader)) { if (__pyx_ptype_5capnp_3lib_5capnp__DynamicStructReader->tp_clear) __pyx_ptype_5capnp_3lib_5capnp__DynamicStructReader->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_20cp_tags_capnp_cython_Job_Reader);
  return 0;
}

static PyObject *__pyx_getprop_20cp_tags_capnp_cython_10Job_Reader_id(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_20cp_tags_capnp_cython_10Job_Reader_2id_1__get__(o);
}

static PyObject *__pyx_getprop_20cp_tags_capnp_cython_10Job_Reader_patterns(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_20cp_tags_capnp_cython_10Job_Reader_8patterns_1__get__(o);
}

static PyObject *__pyx_getprop_20cp_tags_capnp_cython_10Job_Reader_events(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_20cp_tags_capnp_cython_10Job_Reader_6events_1__get__(o);
}

static PyObject *__pyx_getprop_20cp_tags_capnp_cython_10Job_Reader_window(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_20cp_tags_capnp_cython_10Job_Reader_6window_1__get__(o);
}

static PyObject *__pyx_getprop_20cp_tags_capnp_cython_10Job_Reader_duration(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_20cp_tags_capnp_cython_10Job_Reader_8duration_1__get__(o);
}

static PyObject *__pyx_getprop_20cp_tags_capnp_cython_10Job_Reader_finished(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_20cp_tags_capnp_cython_10Job_Reader_8finished_1__get__(o);
}

static PyObject *__pyx_getprop_20cp_tags_capnp_cython_10Job_Reader_starttag(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_20cp_tags_capnp_cython_10Job_Reader_8starttag_1__get__(o);
}

static PyObject *__pyx_getprop_20cp_tags_capnp_cython_10Job_Reader_stoptag(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_20cp_tags_capnp_cython_10Job_Reader_7stoptag_1__get__(o);
}

static PyObject *__pyx_getprop_20cp_tags_capnp_cython_10Job_Reader_err(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_20cp_tags_capnp_cython_10Job_Reader_3err_1__get__(o);
}

static PyMethodDef __pyx_methods_20cp_tags_capnp_cython_Job_Reader[] = {
  {"_get_id", (PyCFunction)__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_3_get_id, METH_NOARGS, __pyx_doc_20cp_tags_capnp_cython_10Job_Reader_2_get_id},
  {"_get_patterns", (PyCFunction)__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_5_get_patterns, METH_NOARGS, __pyx_doc_20cp_tags_capnp_cython_10Job_Reader_4_get_patterns},
  {"_get_events", (PyCFunction)__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_7_get_events, METH_NOARGS, __pyx_doc_20cp_tags_capnp_cython_10Job_Reader_6_get_events},
  {"_get_window", (PyCFunction)__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_9_get_window, METH_NOARGS, __pyx_doc_20cp_tags_capnp_cython_10Job_Reader_8_get_window},
  {"_get_duration", (PyCFunction)__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_11_get_duration, METH_NOARGS, __pyx_doc_20cp_tags_capnp_cython_10Job_Reader_10_get_duration},
  {"_get_finished", (PyCFunction)__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_13_get_finished, METH_NOARGS, __pyx_doc_20cp_tags_capnp_cython_10Job_Reader_12_get_finished},
  {"_get_starttag", (PyCFunction)__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_15_get_starttag, METH_NOARGS, __pyx_doc_20cp_tags_capnp_cython_10Job_Reader_14_get_starttag},
  {"_get_stoptag", (PyCFunction)__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_17_get_stoptag, METH_NOARGS, __pyx_doc_20cp_tags_capnp_cython_10Job_Reader_16_get_stoptag},
  {"_get_err", (PyCFunction)__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_19_get_err, METH_NOARGS, __pyx_doc_20cp_tags_capnp_cython_10Job_Reader_18_get_err},
  {"to_dict", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_21to_dict, METH_VARARGS|METH_KEYWORDS, __pyx_doc_20cp_tags_capnp_cython_10Job_Reader_20to_dict},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_23__reduce_cython__, METH_NOARGS, __pyx_doc_20cp_tags_capnp_cython_10Job_Reader_22__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_20cp_tags_capnp_cython_10Job_Reader_25__setstate_cython__, METH_O, __pyx_doc_20cp_tags_capnp_cython_10Job_Reader_24__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_20cp_tags_capnp_cython_Job_Reader[] = {
  {(char *)"id", __pyx_getprop_20cp_tags_capnp_cython_10Job_Reader_id, 0, (char *)0, 0},
  {(char *)"patterns", __pyx_getprop_20cp_tags_capnp_cython_10Job_Reader_patterns, 0, (char *)0, 0},
  {(char *)"events", __pyx_getprop_20cp_tags_capnp_cython_10Job_Reader_events, 0, (char *)0, 0},
  {(char *)"window", __pyx_getprop_20cp_tags_capnp_cython_10Job_Reader_window, 0, (char *)0, 0},
  {(char *)"duration", __pyx_getprop_20cp_tags_capnp_cython_10Job_Reader_duration, 0, (char *)0, 0},
  {(char *)"finished", __pyx_getprop_20cp_tags_capnp_cython_10Job_Reader_finished, 0, (char *)0, 0},
  {(char *)"starttag", __pyx_getprop_20cp_tags_capnp_cython_10Job_Reader_starttag, 0, (char *)0, 0},
  {(char *)"stoptag", __pyx_getprop_20cp_tags_capnp_cython_10Job_Reader_stoptag, 0, (char *)0, 0},
  {(char *)"err", __pyx_getprop_20cp_tags_capnp_cython_10Job_Reader_err, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_20cp_tags_capnp_cython_Job_Reader = {
  PyVarObject_HEAD_INIT(0, 0)
  "cp_tags_capnp_cython.Job_Reader", /*tp_name*/
  sizeof(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_20cp_tags_capnp_cython_Job_Reader, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Job_Reader(_DynamicStructReader struct)", /*tp_doc*/
  __pyx_tp_traverse_20cp_tags_capnp_cython_Job_Reader, /*tp_traverse*/
  __pyx_tp_clear_20cp_tags_capnp_cython_Job_Reader, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_20cp_tags_capnp_cython_Job_Reader, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_20cp_tags_capnp_cython_Job_Reader, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_20cp_tags_capnp_cython_10Job_Reader_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_20cp_tags_capnp_cython_Job_Reader, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_20cp_tags_capnp_cython_Job_Builder __pyx_vtable_20cp_tags_capnp_cython_Job_Builder;

static PyObject *__pyx_tp_new_20cp_tags_capnp_cython_Job_Builder(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *p;
  PyObject *o = __pyx_ptype_5capnp_3lib_5capnp__DynamicStructBuilder->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_5capnp_3lib_5capnp__DynamicStructBuilder*)__pyx_vtabptr_20cp_tags_capnp_cython_Job_Builder;
  new((void*)&(p->thisptr_child)) Job::Builder();
  return o;
}

static void __pyx_tp_dealloc_20cp_tags_capnp_cython_Job_Builder(PyObject *o) {
  struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *p = (struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->thisptr_child);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_5capnp_3lib_5capnp__DynamicStructBuilder)) __pyx_ptype_5capnp_3lib_5capnp__DynamicStructBuilder->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_20cp_tags_capnp_cython_Job_Builder);
}

static int __pyx_tp_traverse_20cp_tags_capnp_cython_Job_Builder(PyObject *o, visitproc v, void *a) {
  int e;
  e = ((likely(__pyx_ptype_5capnp_3lib_5capnp__DynamicStructBuilder)) ? ((__pyx_ptype_5capnp_3lib_5capnp__DynamicStructBuilder->tp_traverse) ? __pyx_ptype_5capnp_3lib_5capnp__DynamicStructBuilder->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_20cp_tags_capnp_cython_Job_Builder)); if (e) return e;
  return 0;
}

static int __pyx_tp_clear_20cp_tags_capnp_cython_Job_Builder(PyObject *o) {
  if (likely(__pyx_ptype_5capnp_3lib_5capnp__DynamicStructBuilder)) { if (__pyx_ptype_5capnp_3lib_5capnp__DynamicStructBuilder->tp_clear) __pyx_ptype_5capnp_3lib_5capnp__DynamicStructBuilder->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_20cp_tags_capnp_cython_Job_Builder);
  return 0;
}

static PyObject *__pyx_getprop_20cp_tags_capnp_cython_11Job_Builder_id(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_20cp_tags_capnp_cython_11Job_Builder_2id_1__get__(o);
}

static int __pyx_setprop_20cp_tags_capnp_cython_11Job_Builder_id(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_20cp_tags_capnp_cython_11Job_Builder_2id_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_20cp_tags_capnp_cython_11Job_Builder_patterns(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_20cp_tags_capnp_cython_11Job_Builder_8patterns_1__get__(o);
}

static int __pyx_setprop_20cp_tags_capnp_cython_11Job_Builder_patterns(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_20cp_tags_capnp_cython_11Job_Builder_8patterns_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_20cp_tags_capnp_cython_11Job_Builder_events(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_20cp_tags_capnp_cython_11Job_Builder_6events_1__get__(o);
}

static int __pyx_setprop_20cp_tags_capnp_cython_11Job_Builder_events(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_20cp_tags_capnp_cython_11Job_Builder_6events_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_20cp_tags_capnp_cython_11Job_Builder_window(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_20cp_tags_capnp_cython_11Job_Builder_6window_1__get__(o);
}

static int __pyx_setprop_20cp_tags_capnp_cython_11Job_Builder_window(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_20cp_tags_capnp_cython_11Job_Builder_6window_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_20cp_tags_capnp_cython_11Job_Builder_duration(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_20cp_tags_capnp_cython_11Job_Builder_8duration_1__get__(o);
}

static int __pyx_setprop_20cp_tags_capnp_cython_11Job_Builder_duration(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_20cp_tags_capnp_cython_11Job_Builder_8duration_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_20cp_tags_capnp_cython_11Job_Builder_finished(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_20cp_tags_capnp_cython_11Job_Builder_8finished_1__get__(o);
}

static int __pyx_setprop_20cp_tags_capnp_cython_11Job_Builder_finished(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_20cp_tags_capnp_cython_11Job_Builder_8finished_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_20cp_tags_capnp_cython_11Job_Builder_starttag(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_20cp_tags_capnp_cython_11Job_Builder_8starttag_1__get__(o);
}

static int __pyx_setprop_20cp_tags_capnp_cython_11Job_Builder_starttag(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_20cp_tags_capnp_cython_11Job_Builder_8starttag_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_20cp_tags_capnp_cython_11Job_Builder_stoptag(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_20cp_tags_capnp_cython_11Job_Builder_7stoptag_1__get__(o);
}

static int __pyx_setprop_20cp_tags_capnp_cython_11Job_Builder_stoptag(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_20cp_tags_capnp_cython_11Job_Builder_7stoptag_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_20cp_tags_capnp_cython_11Job_Builder_err(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_20cp_tags_capnp_cython_11Job_Builder_3err_1__get__(o);
}

static int __pyx_setprop_20cp_tags_capnp_cython_11Job_Builder_err(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_20cp_tags_capnp_cython_11Job_Builder_3err_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_20cp_tags_capnp_cython_Job_Builder[] = {
  {"_get_id", (PyCFunction)__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_3_get_id, METH_NOARGS, __pyx_doc_20cp_tags_capnp_cython_11Job_Builder_2_get_id},
  {"_set_id", (PyCFunction)__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_5_set_id, METH_O, __pyx_doc_20cp_tags_capnp_cython_11Job_Builder_4_set_id},
  {"_get_patterns", (PyCFunction)__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_7_get_patterns, METH_NOARGS, __pyx_doc_20cp_tags_capnp_cython_11Job_Builder_6_get_patterns},
  {"_set_patterns", (PyCFunction)__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_9_set_patterns, METH_O, __pyx_doc_20cp_tags_capnp_cython_11Job_Builder_8_set_patterns},
  {"_get_events", (PyCFunction)__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_11_get_events, METH_NOARGS, __pyx_doc_20cp_tags_capnp_cython_11Job_Builder_10_get_events},
  {"_set_events", (PyCFunction)__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_13_set_events, METH_O, __pyx_doc_20cp_tags_capnp_cython_11Job_Builder_12_set_events},
  {"_get_window", (PyCFunction)__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_15_get_window, METH_NOARGS, __pyx_doc_20cp_tags_capnp_cython_11Job_Builder_14_get_window},
  {"_set_window", (PyCFunction)__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_17_set_window, METH_O, __pyx_doc_20cp_tags_capnp_cython_11Job_Builder_16_set_window},
  {"_get_duration", (PyCFunction)__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_19_get_duration, METH_NOARGS, __pyx_doc_20cp_tags_capnp_cython_11Job_Builder_18_get_duration},
  {"_set_duration", (PyCFunction)__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_21_set_duration, METH_O, __pyx_doc_20cp_tags_capnp_cython_11Job_Builder_20_set_duration},
  {"_get_finished", (PyCFunction)__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_23_get_finished, METH_NOARGS, __pyx_doc_20cp_tags_capnp_cython_11Job_Builder_22_get_finished},
  {"_set_finished", (PyCFunction)__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_25_set_finished, METH_O, __pyx_doc_20cp_tags_capnp_cython_11Job_Builder_24_set_finished},
  {"_get_starttag", (PyCFunction)__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_27_get_starttag, METH_NOARGS, __pyx_doc_20cp_tags_capnp_cython_11Job_Builder_26_get_starttag},
  {"_set_starttag", (PyCFunction)__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_29_set_starttag, METH_O, __pyx_doc_20cp_tags_capnp_cython_11Job_Builder_28_set_starttag},
  {"_get_stoptag", (PyCFunction)__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_31_get_stoptag, METH_NOARGS, __pyx_doc_20cp_tags_capnp_cython_11Job_Builder_30_get_stoptag},
  {"_set_stoptag", (PyCFunction)__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_33_set_stoptag, METH_O, __pyx_doc_20cp_tags_capnp_cython_11Job_Builder_32_set_stoptag},
  {"_get_err", (PyCFunction)__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_35_get_err, METH_NOARGS, __pyx_doc_20cp_tags_capnp_cython_11Job_Builder_34_get_err},
  {"_set_err", (PyCFunction)__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_37_set_err, METH_O, __pyx_doc_20cp_tags_capnp_cython_11Job_Builder_36_set_err},
  {"to_dict", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_39to_dict, METH_VARARGS|METH_KEYWORDS, __pyx_doc_20cp_tags_capnp_cython_11Job_Builder_38to_dict},
  {"from_dict", (PyCFunction)__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_41from_dict, METH_O, __pyx_doc_20cp_tags_capnp_cython_11Job_Builder_40from_dict},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_43__reduce_cython__, METH_NOARGS, __pyx_doc_20cp_tags_capnp_cython_11Job_Builder_42__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_20cp_tags_capnp_cython_11Job_Builder_45__setstate_cython__, METH_O, __pyx_doc_20cp_tags_capnp_cython_11Job_Builder_44__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_20cp_tags_capnp_cython_Job_Builder[] = {
  {(char *)"id", __pyx_getprop_20cp_tags_capnp_cython_11Job_Builder_id, __pyx_setprop_20cp_tags_capnp_cython_11Job_Builder_id, (char *)0, 0},
  {(char *)"patterns", __pyx_getprop_20cp_tags_capnp_cython_11Job_Builder_patterns, __pyx_setprop_20cp_tags_capnp_cython_11Job_Builder_patterns, (char *)0, 0},
  {(char *)"events", __pyx_getprop_20cp_tags_capnp_cython_11Job_Builder_events, __pyx_setprop_20cp_tags_capnp_cython_11Job_Builder_events, (char *)0, 0},
  {(char *)"window", __pyx_getprop_20cp_tags_capnp_cython_11Job_Builder_window, __pyx_setprop_20cp_tags_capnp_cython_11Job_Builder_window, (char *)0, 0},
  {(char *)"duration", __pyx_getprop_20cp_tags_capnp_cython_11Job_Builder_duration, __pyx_setprop_20cp_tags_capnp_cython_11Job_Builder_duration, (char *)0, 0},
  {(char *)"finished", __pyx_getprop_20cp_tags_capnp_cython_11Job_Builder_finished, __pyx_setprop_20cp_tags_capnp_cython_11Job_Builder_finished, (char *)0, 0},
  {(char *)"starttag", __pyx_getprop_20cp_tags_capnp_cython_11Job_Builder_starttag, __pyx_setprop_20cp_tags_capnp_cython_11Job_Builder_starttag, (char *)0, 0},
  {(char *)"stoptag", __pyx_getprop_20cp_tags_capnp_cython_11Job_Builder_stoptag, __pyx_setprop_20cp_tags_capnp_cython_11Job_Builder_stoptag, (char *)0, 0},
  {(char *)"err", __pyx_getprop_20cp_tags_capnp_cython_11Job_Builder_err, __pyx_setprop_20cp_tags_capnp_cython_11Job_Builder_err, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_20cp_tags_capnp_cython_Job_Builder = {
  PyVarObject_HEAD_INIT(0, 0)
  "cp_tags_capnp_cython.Job_Builder", /*tp_name*/
  sizeof(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_20cp_tags_capnp_cython_Job_Builder, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Job_Builder(_DynamicStructBuilder struct)", /*tp_doc*/
  __pyx_tp_traverse_20cp_tags_capnp_cython_Job_Builder, /*tp_traverse*/
  __pyx_tp_clear_20cp_tags_capnp_cython_Job_Builder, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_20cp_tags_capnp_cython_Job_Builder, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_20cp_tags_capnp_cython_Job_Builder, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_20cp_tags_capnp_cython_11Job_Builder_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_20cp_tags_capnp_cython_Job_Builder, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_cp_tags_capnp_cython(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_cp_tags_capnp_cython},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "cp_tags_capnp_cython",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_Job, __pyx_k_Job, sizeof(__pyx_k_Job), 0, 0, 1, 1},
  {&__pyx_n_s_Job_Builder, __pyx_k_Job_Builder, sizeof(__pyx_k_Job_Builder), 0, 0, 1, 1},
  {&__pyx_n_s_Job_Reader, __pyx_k_Job_Reader, sizeof(__pyx_k_Job_Reader), 0, 0, 1, 1},
  {&__pyx_n_s_Job_Schema, __pyx_k_Job_Schema, sizeof(__pyx_k_Job_Schema), 0, 0, 1, 1},
  {&__pyx_kp_s_Key_not_found_in_struct, __pyx_k_Key_not_found_in_struct, sizeof(__pyx_k_Key_not_found_in_struct), 0, 0, 1, 0},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_as_struct, __pyx_k_as_struct, sizeof(__pyx_k_as_struct), 0, 0, 1, 1},
  {&__pyx_n_s_capnp, __pyx_k_capnp, sizeof(__pyx_k_capnp), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_cp_tags_capnp, __pyx_k_cp_tags_capnp, sizeof(__pyx_k_cp_tags_capnp), 0, 0, 1, 1},
  {&__pyx_n_s_duration, __pyx_k_duration, sizeof(__pyx_k_duration), 0, 0, 1, 1},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_err, __pyx_k_err, sizeof(__pyx_k_err), 0, 0, 1, 1},
  {&__pyx_n_s_events, __pyx_k_events, sizeof(__pyx_k_events), 0, 0, 1, 1},
  {&__pyx_kp_s_expected_isSetInUnion_field, __pyx_k_expected_isSetInUnion_field, sizeof(__pyx_k_expected_isSetInUnion_field), 0, 0, 1, 0},
  {&__pyx_n_s_finished, __pyx_k_finished, sizeof(__pyx_k_finished), 0, 0, 1, 1},
  {&__pyx_n_s_get_duration, __pyx_k_get_duration, sizeof(__pyx_k_get_duration), 0, 0, 1, 1},
  {&__pyx_n_s_get_err, __pyx_k_get_err, sizeof(__pyx_k_get_err), 0, 0, 1, 1},
  {&__pyx_n_s_get_events, __pyx_k_get_events, sizeof(__pyx_k_get_events), 0, 0, 1, 1},
  {&__pyx_n_s_get_finished, __pyx_k_get_finished, sizeof(__pyx_k_get_finished), 0, 0, 1, 1},
  {&__pyx_n_s_get_id, __pyx_k_get_id, sizeof(__pyx_k_get_id), 0, 0, 1, 1},
  {&__pyx_n_s_get_patterns, __pyx_k_get_patterns, sizeof(__pyx_k_get_patterns), 0, 0, 1, 1},
  {&__pyx_n_s_get_starttag, __pyx_k_get_starttag, sizeof(__pyx_k_get_starttag), 0, 0, 1, 1},
  {&__pyx_n_s_get_stoptag, __pyx_k_get_stoptag, sizeof(__pyx_k_get_stoptag), 0, 0, 1, 1},
  {&__pyx_n_s_get_window, __pyx_k_get_window, sizeof(__pyx_k_get_window), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_id, __pyx_k_id, sizeof(__pyx_k_id), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_iteritems, __pyx_k_iteritems, sizeof(__pyx_k_iteritems), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_ordered, __pyx_k_ordered, sizeof(__pyx_k_ordered), 0, 0, 1, 1},
  {&__pyx_n_s_patterns, __pyx_k_patterns, sizeof(__pyx_k_patterns), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_register_type, __pyx_k_register_type, sizeof(__pyx_k_register_type), 0, 0, 1, 1},
  {&__pyx_n_s_schema, __pyx_k_schema, sizeof(__pyx_k_schema), 0, 0, 1, 1},
  {&__pyx_kp_s_self_thisptr_self_thisptr_child, __pyx_k_self_thisptr_self_thisptr_child, sizeof(__pyx_k_self_thisptr_self_thisptr_child), 0, 0, 1, 0},
  {&__pyx_n_s_set_duration, __pyx_k_set_duration, sizeof(__pyx_k_set_duration), 0, 0, 1, 1},
  {&__pyx_n_s_set_err, __pyx_k_set_err, sizeof(__pyx_k_set_err), 0, 0, 1, 1},
  {&__pyx_n_s_set_events, __pyx_k_set_events, sizeof(__pyx_k_set_events), 0, 0, 1, 1},
  {&__pyx_n_s_set_finished, __pyx_k_set_finished, sizeof(__pyx_k_set_finished), 0, 0, 1, 1},
  {&__pyx_n_s_set_id, __pyx_k_set_id, sizeof(__pyx_k_set_id), 0, 0, 1, 1},
  {&__pyx_n_s_set_patterns, __pyx_k_set_patterns, sizeof(__pyx_k_set_patterns), 0, 0, 1, 1},
  {&__pyx_n_s_set_starttag, __pyx_k_set_starttag, sizeof(__pyx_k_set_starttag), 0, 0, 1, 1},
  {&__pyx_n_s_set_stoptag, __pyx_k_set_stoptag, sizeof(__pyx_k_set_stoptag), 0, 0, 1, 1},
  {&__pyx_n_s_set_window, __pyx_k_set_window, sizeof(__pyx_k_set_window), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_starttag, __pyx_k_starttag, sizeof(__pyx_k_starttag), 0, 0, 1, 1},
  {&__pyx_n_s_stoptag, __pyx_k_stoptag, sizeof(__pyx_k_stoptag), 0, 0, 1, 1},
  {&__pyx_n_s_struct, __pyx_k_struct, sizeof(__pyx_k_struct), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_kp_s_utf_8, __pyx_k_utf_8, sizeof(__pyx_k_utf_8), 0, 0, 1, 0},
  {&__pyx_n_s_verbose, __pyx_k_verbose, sizeof(__pyx_k_verbose), 0, 0, 1, 1},
  {&__pyx_n_s_window, __pyx_k_window, sizeof(__pyx_k_window), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(1, 483, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr,self.thisptr_child cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr,self.thisptr_child cannot be converted to a Python object for pickling")
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_self_thisptr_self_thisptr_child); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "(tree fragment)":4
 *     raise TypeError("self.thisptr,self.thisptr_child cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr,self.thisptr_child cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_self_thisptr_self_thisptr_child); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr,self.thisptr_child cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr,self.thisptr_child cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_self_thisptr_self_thisptr_child); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "(tree fragment)":4
 *     raise TypeError("self.thisptr,self.thisptr_child cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr,self.thisptr_child cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_self_thisptr_self_thisptr_child); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(1, 1, __pyx_L1_error);
  __pyx_int_10252874616994876655 = PyInt_FromString((char *)"10252874616994876655", 0, 0); if (unlikely(!__pyx_int_10252874616994876655)) __PYX_ERR(1, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_t_1 = PyImport_ImportModule("capnp.lib.capnp"); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5capnp_3lib_5capnp__DynamicStructReader = __Pyx_ImportType(__pyx_t_1, "capnp.lib.capnp", "_DynamicStructReader", sizeof(struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructReader), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5capnp_3lib_5capnp__DynamicStructReader) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_vtabptr_5capnp_3lib_5capnp__DynamicStructReader = (struct __pyx_vtabstruct_5capnp_3lib_5capnp__DynamicStructReader*)__Pyx_GetVtable(__pyx_ptype_5capnp_3lib_5capnp__DynamicStructReader->tp_dict); if (unlikely(!__pyx_vtabptr_5capnp_3lib_5capnp__DynamicStructReader)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_vtabptr_20cp_tags_capnp_cython_Job_Reader = &__pyx_vtable_20cp_tags_capnp_cython_Job_Reader;
  __pyx_vtable_20cp_tags_capnp_cython_Job_Reader.__pyx_base = *__pyx_vtabptr_5capnp_3lib_5capnp__DynamicStructReader;
  __pyx_vtable_20cp_tags_capnp_cython_Job_Reader._get_id = (PyObject *(*)(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *, int __pyx_skip_dispatch))__pyx_f_20cp_tags_capnp_cython_10Job_Reader__get_id;
  __pyx_vtable_20cp_tags_capnp_cython_Job_Reader._get_patterns = (PyObject *(*)(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *, int __pyx_skip_dispatch))__pyx_f_20cp_tags_capnp_cython_10Job_Reader__get_patterns;
  __pyx_vtable_20cp_tags_capnp_cython_Job_Reader._get_events = (PyObject *(*)(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *, int __pyx_skip_dispatch))__pyx_f_20cp_tags_capnp_cython_10Job_Reader__get_events;
  __pyx_vtable_20cp_tags_capnp_cython_Job_Reader._get_window = (PyObject *(*)(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *, int __pyx_skip_dispatch))__pyx_f_20cp_tags_capnp_cython_10Job_Reader__get_window;
  __pyx_vtable_20cp_tags_capnp_cython_Job_Reader._get_duration = (PyObject *(*)(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *, int __pyx_skip_dispatch))__pyx_f_20cp_tags_capnp_cython_10Job_Reader__get_duration;
  __pyx_vtable_20cp_tags_capnp_cython_Job_Reader._get_finished = (PyObject *(*)(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *, int __pyx_skip_dispatch))__pyx_f_20cp_tags_capnp_cython_10Job_Reader__get_finished;
  __pyx_vtable_20cp_tags_capnp_cython_Job_Reader._get_starttag = (PyObject *(*)(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *, int __pyx_skip_dispatch))__pyx_f_20cp_tags_capnp_cython_10Job_Reader__get_starttag;
  __pyx_vtable_20cp_tags_capnp_cython_Job_Reader._get_stoptag = (PyObject *(*)(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *, int __pyx_skip_dispatch))__pyx_f_20cp_tags_capnp_cython_10Job_Reader__get_stoptag;
  __pyx_vtable_20cp_tags_capnp_cython_Job_Reader._get_err = (PyObject *(*)(struct __pyx_obj_20cp_tags_capnp_cython_Job_Reader *, int __pyx_skip_dispatch))__pyx_f_20cp_tags_capnp_cython_10Job_Reader__get_err;
  __pyx_type_20cp_tags_capnp_cython_Job_Reader.tp_base = __pyx_ptype_5capnp_3lib_5capnp__DynamicStructReader;
  if (PyType_Ready(&__pyx_type_20cp_tags_capnp_cython_Job_Reader) < 0) __PYX_ERR(1, 106, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_20cp_tags_capnp_cython_Job_Reader.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_20cp_tags_capnp_cython_Job_Reader.tp_dictoffset && __pyx_type_20cp_tags_capnp_cython_Job_Reader.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_20cp_tags_capnp_cython_Job_Reader.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_20cp_tags_capnp_cython_Job_Reader.tp_dict, __pyx_vtabptr_20cp_tags_capnp_cython_Job_Reader) < 0) __PYX_ERR(1, 106, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Job_Reader, (PyObject *)&__pyx_type_20cp_tags_capnp_cython_Job_Reader) < 0) __PYX_ERR(1, 106, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_20cp_tags_capnp_cython_Job_Reader) < 0) __PYX_ERR(1, 106, __pyx_L1_error)
  __pyx_ptype_20cp_tags_capnp_cython_Job_Reader = &__pyx_type_20cp_tags_capnp_cython_Job_Reader;
  __pyx_ptype_5capnp_3lib_5capnp__DynamicStructBuilder = __Pyx_ImportType(__pyx_t_1, "capnp.lib.capnp", "_DynamicStructBuilder", sizeof(struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5capnp_3lib_5capnp__DynamicStructBuilder) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_vtabptr_5capnp_3lib_5capnp__DynamicStructBuilder = (struct __pyx_vtabstruct_5capnp_3lib_5capnp__DynamicStructBuilder*)__Pyx_GetVtable(__pyx_ptype_5capnp_3lib_5capnp__DynamicStructBuilder->tp_dict); if (unlikely(!__pyx_vtabptr_5capnp_3lib_5capnp__DynamicStructBuilder)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_vtabptr_20cp_tags_capnp_cython_Job_Builder = &__pyx_vtable_20cp_tags_capnp_cython_Job_Builder;
  __pyx_vtable_20cp_tags_capnp_cython_Job_Builder.__pyx_base = *__pyx_vtabptr_5capnp_3lib_5capnp__DynamicStructBuilder;
  __pyx_vtable_20cp_tags_capnp_cython_Job_Builder._get_id = (PyObject *(*)(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *, int __pyx_skip_dispatch))__pyx_f_20cp_tags_capnp_cython_11Job_Builder__get_id;
  __pyx_vtable_20cp_tags_capnp_cython_Job_Builder._set_id = (PyObject *(*)(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *, uint64_t, int __pyx_skip_dispatch))__pyx_f_20cp_tags_capnp_cython_11Job_Builder__set_id;
  __pyx_vtable_20cp_tags_capnp_cython_Job_Builder._get_patterns = (PyObject *(*)(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *, int __pyx_skip_dispatch))__pyx_f_20cp_tags_capnp_cython_11Job_Builder__get_patterns;
  __pyx_vtable_20cp_tags_capnp_cython_Job_Builder._set_patterns = (PyObject *(*)(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *, PyObject *, int __pyx_skip_dispatch))__pyx_f_20cp_tags_capnp_cython_11Job_Builder__set_patterns;
  __pyx_vtable_20cp_tags_capnp_cython_Job_Builder._get_events = (PyObject *(*)(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *, int __pyx_skip_dispatch))__pyx_f_20cp_tags_capnp_cython_11Job_Builder__get_events;
  __pyx_vtable_20cp_tags_capnp_cython_Job_Builder._set_events = (PyObject *(*)(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *, PyObject *, int __pyx_skip_dispatch))__pyx_f_20cp_tags_capnp_cython_11Job_Builder__set_events;
  __pyx_vtable_20cp_tags_capnp_cython_Job_Builder._get_window = (PyObject *(*)(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *, int __pyx_skip_dispatch))__pyx_f_20cp_tags_capnp_cython_11Job_Builder__get_window;
  __pyx_vtable_20cp_tags_capnp_cython_Job_Builder._set_window = (PyObject *(*)(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *, uint16_t, int __pyx_skip_dispatch))__pyx_f_20cp_tags_capnp_cython_11Job_Builder__set_window;
  __pyx_vtable_20cp_tags_capnp_cython_Job_Builder._get_duration = (PyObject *(*)(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *, int __pyx_skip_dispatch))__pyx_f_20cp_tags_capnp_cython_11Job_Builder__get_duration;
  __pyx_vtable_20cp_tags_capnp_cython_Job_Builder._set_duration = (PyObject *(*)(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *, PyObject *, int __pyx_skip_dispatch))__pyx_f_20cp_tags_capnp_cython_11Job_Builder__set_duration;
  __pyx_vtable_20cp_tags_capnp_cython_Job_Builder._get_finished = (PyObject *(*)(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *, int __pyx_skip_dispatch))__pyx_f_20cp_tags_capnp_cython_11Job_Builder__get_finished;
  __pyx_vtable_20cp_tags_capnp_cython_Job_Builder._set_finished = (PyObject *(*)(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *, bool, int __pyx_skip_dispatch))__pyx_f_20cp_tags_capnp_cython_11Job_Builder__set_finished;
  __pyx_vtable_20cp_tags_capnp_cython_Job_Builder._get_starttag = (PyObject *(*)(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *, int __pyx_skip_dispatch))__pyx_f_20cp_tags_capnp_cython_11Job_Builder__get_starttag;
  __pyx_vtable_20cp_tags_capnp_cython_Job_Builder._set_starttag = (PyObject *(*)(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *, uint64_t, int __pyx_skip_dispatch))__pyx_f_20cp_tags_capnp_cython_11Job_Builder__set_starttag;
  __pyx_vtable_20cp_tags_capnp_cython_Job_Builder._get_stoptag = (PyObject *(*)(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *, int __pyx_skip_dispatch))__pyx_f_20cp_tags_capnp_cython_11Job_Builder__get_stoptag;
  __pyx_vtable_20cp_tags_capnp_cython_Job_Builder._set_stoptag = (PyObject *(*)(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *, uint64_t, int __pyx_skip_dispatch))__pyx_f_20cp_tags_capnp_cython_11Job_Builder__set_stoptag;
  __pyx_vtable_20cp_tags_capnp_cython_Job_Builder._get_err = (PyObject *(*)(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *, int __pyx_skip_dispatch))__pyx_f_20cp_tags_capnp_cython_11Job_Builder__get_err;
  __pyx_vtable_20cp_tags_capnp_cython_Job_Builder._set_err = (PyObject *(*)(struct __pyx_obj_20cp_tags_capnp_cython_Job_Builder *, PyObject *, int __pyx_skip_dispatch))__pyx_f_20cp_tags_capnp_cython_11Job_Builder__set_err;
  __pyx_type_20cp_tags_capnp_cython_Job_Builder.tp_base = __pyx_ptype_5capnp_3lib_5capnp__DynamicStructBuilder;
  if (PyType_Ready(&__pyx_type_20cp_tags_capnp_cython_Job_Builder) < 0) __PYX_ERR(1, 225, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_20cp_tags_capnp_cython_Job_Builder.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_20cp_tags_capnp_cython_Job_Builder.tp_dictoffset && __pyx_type_20cp_tags_capnp_cython_Job_Builder.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_20cp_tags_capnp_cython_Job_Builder.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_20cp_tags_capnp_cython_Job_Builder.tp_dict, __pyx_vtabptr_20cp_tags_capnp_cython_Job_Builder) < 0) __PYX_ERR(1, 225, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Job_Builder, (PyObject *)&__pyx_type_20cp_tags_capnp_cython_Job_Builder) < 0) __PYX_ERR(1, 225, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_20cp_tags_capnp_cython_Job_Builder) < 0) __PYX_ERR(1, 225, __pyx_L1_error)
  __pyx_ptype_20cp_tags_capnp_cython_Job_Builder = &__pyx_type_20cp_tags_capnp_cython_Job_Builder;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(2, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("capnp.lib.capnp"); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5capnp_3lib_5capnp__StructSchemaField = __Pyx_ImportType(__pyx_t_1, "capnp.lib.capnp", "_StructSchemaField", sizeof(struct __pyx_obj_5capnp_3lib_5capnp__StructSchemaField), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5capnp_3lib_5capnp__StructSchemaField) __PYX_ERR(3, 23, __pyx_L1_error)
  __pyx_vtabptr_5capnp_3lib_5capnp__StructSchemaField = (struct __pyx_vtabstruct_5capnp_3lib_5capnp__StructSchemaField*)__Pyx_GetVtable(__pyx_ptype_5capnp_3lib_5capnp__StructSchemaField->tp_dict); if (unlikely(!__pyx_vtabptr_5capnp_3lib_5capnp__StructSchemaField)) __PYX_ERR(3, 23, __pyx_L1_error)
  __pyx_ptype_5capnp_3lib_5capnp__StringArrayPtr = __Pyx_ImportType(__pyx_t_1, "capnp.lib.capnp", "_StringArrayPtr", sizeof(struct __pyx_obj_5capnp_3lib_5capnp__StringArrayPtr), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5capnp_3lib_5capnp__StringArrayPtr) __PYX_ERR(3, 28, __pyx_L1_error)
  __pyx_vtabptr_5capnp_3lib_5capnp__StringArrayPtr = (struct __pyx_vtabstruct_5capnp_3lib_5capnp__StringArrayPtr*)__Pyx_GetVtable(__pyx_ptype_5capnp_3lib_5capnp__StringArrayPtr->tp_dict); if (unlikely(!__pyx_vtabptr_5capnp_3lib_5capnp__StringArrayPtr)) __PYX_ERR(3, 28, __pyx_L1_error)
  __pyx_ptype_5capnp_3lib_5capnp_SchemaParser = __Pyx_ImportType(__pyx_t_1, "capnp.lib.capnp", "SchemaParser", sizeof(struct __pyx_obj_5capnp_3lib_5capnp_SchemaParser), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5capnp_3lib_5capnp_SchemaParser) __PYX_ERR(3, 34, __pyx_L1_error)
  __pyx_vtabptr_5capnp_3lib_5capnp_SchemaParser = (struct __pyx_vtabstruct_5capnp_3lib_5capnp_SchemaParser*)__Pyx_GetVtable(__pyx_ptype_5capnp_3lib_5capnp_SchemaParser->tp_dict); if (unlikely(!__pyx_vtabptr_5capnp_3lib_5capnp_SchemaParser)) __PYX_ERR(3, 34, __pyx_L1_error)
  __pyx_ptype_5capnp_3lib_5capnp__DynamicOrphan = __Pyx_ImportType(__pyx_t_1, "capnp.lib.capnp", "_DynamicOrphan", sizeof(struct __pyx_obj_5capnp_3lib_5capnp__DynamicOrphan), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5capnp_3lib_5capnp__DynamicOrphan) __PYX_ERR(3, 41, __pyx_L1_error)
  __pyx_vtabptr_5capnp_3lib_5capnp__DynamicOrphan = (struct __pyx_vtabstruct_5capnp_3lib_5capnp__DynamicOrphan*)__Pyx_GetVtable(__pyx_ptype_5capnp_3lib_5capnp__DynamicOrphan->tp_dict); if (unlikely(!__pyx_vtabptr_5capnp_3lib_5capnp__DynamicOrphan)) __PYX_ERR(3, 41, __pyx_L1_error)
  __pyx_ptype_5capnp_3lib_5capnp__DynamicEnumField = __Pyx_ImportType(__pyx_t_1, "capnp.lib.capnp", "_DynamicEnumField", sizeof(struct __pyx_obj_5capnp_3lib_5capnp__DynamicEnumField), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5capnp_3lib_5capnp__DynamicEnumField) __PYX_ERR(3, 102, __pyx_L1_error)
  __pyx_vtabptr_5capnp_3lib_5capnp__DynamicEnumField = (struct __pyx_vtabstruct_5capnp_3lib_5capnp__DynamicEnumField*)__Pyx_GetVtable(__pyx_ptype_5capnp_3lib_5capnp__DynamicEnumField->tp_dict); if (unlikely(!__pyx_vtabptr_5capnp_3lib_5capnp__DynamicEnumField)) __PYX_ERR(3, 102, __pyx_L1_error)
  __pyx_ptype_5capnp_3lib_5capnp__Schema = __Pyx_ImportType(__pyx_t_1, "capnp.lib.capnp", "_Schema", sizeof(struct __pyx_obj_5capnp_3lib_5capnp__Schema), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5capnp_3lib_5capnp__Schema) __PYX_ERR(3, 108, __pyx_L1_error)
  __pyx_vtabptr_5capnp_3lib_5capnp__Schema = (struct __pyx_vtabstruct_5capnp_3lib_5capnp__Schema*)__Pyx_GetVtable(__pyx_ptype_5capnp_3lib_5capnp__Schema->tp_dict); if (unlikely(!__pyx_vtabptr_5capnp_3lib_5capnp__Schema)) __PYX_ERR(3, 108, __pyx_L1_error)
  __pyx_ptype_5capnp_3lib_5capnp__InterfaceSchema = __Pyx_ImportType(__pyx_t_1, "capnp.lib.capnp", "_InterfaceSchema", sizeof(struct __pyx_obj_5capnp_3lib_5capnp__InterfaceSchema), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5capnp_3lib_5capnp__InterfaceSchema) __PYX_ERR(3, 119, __pyx_L1_error)
  __pyx_vtabptr_5capnp_3lib_5capnp__InterfaceSchema = (struct __pyx_vtabstruct_5capnp_3lib_5capnp__InterfaceSchema*)__Pyx_GetVtable(__pyx_ptype_5capnp_3lib_5capnp__InterfaceSchema->tp_dict); if (unlikely(!__pyx_vtabptr_5capnp_3lib_5capnp__InterfaceSchema)) __PYX_ERR(3, 119, __pyx_L1_error)
  __pyx_ptype_5capnp_3lib_5capnp__DynamicEnum = __Pyx_ImportType(__pyx_t_1, "capnp.lib.capnp", "_DynamicEnum", sizeof(struct __pyx_obj_5capnp_3lib_5capnp__DynamicEnum), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5capnp_3lib_5capnp__DynamicEnum) __PYX_ERR(3, 124, __pyx_L1_error)
  __pyx_vtabptr_5capnp_3lib_5capnp__DynamicEnum = (struct __pyx_vtabstruct_5capnp_3lib_5capnp__DynamicEnum*)__Pyx_GetVtable(__pyx_ptype_5capnp_3lib_5capnp__DynamicEnum->tp_dict); if (unlikely(!__pyx_vtabptr_5capnp_3lib_5capnp__DynamicEnum)) __PYX_ERR(3, 124, __pyx_L1_error)
  __pyx_ptype_5capnp_3lib_5capnp__DynamicListBuilder = __Pyx_ImportType(__pyx_t_1, "capnp.lib.capnp", "_DynamicListBuilder", sizeof(struct __pyx_obj_5capnp_3lib_5capnp__DynamicListBuilder), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5capnp_3lib_5capnp__DynamicListBuilder) __PYX_ERR(3, 131, __pyx_L1_error)
  __pyx_vtabptr_5capnp_3lib_5capnp__DynamicListBuilder = (struct __pyx_vtabstruct_5capnp_3lib_5capnp__DynamicListBuilder*)__Pyx_GetVtable(__pyx_ptype_5capnp_3lib_5capnp__DynamicListBuilder->tp_dict); if (unlikely(!__pyx_vtabptr_5capnp_3lib_5capnp__DynamicListBuilder)) __PYX_ERR(3, 131, __pyx_L1_error)
  __pyx_ptype_5capnp_3lib_5capnp__MessageBuilder = __Pyx_ImportType(__pyx_t_1, "capnp.lib.capnp", "_MessageBuilder", sizeof(struct __pyx_obj_5capnp_3lib_5capnp__MessageBuilder), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5capnp_3lib_5capnp__MessageBuilder) __PYX_ERR(3, 144, __pyx_L1_error)
  __pyx_vtabptr_5capnp_3lib_5capnp__MessageBuilder = (struct __pyx_vtabstruct_5capnp_3lib_5capnp__MessageBuilder*)__Pyx_GetVtable(__pyx_ptype_5capnp_3lib_5capnp__MessageBuilder->tp_dict); if (unlikely(!__pyx_vtabptr_5capnp_3lib_5capnp__MessageBuilder)) __PYX_ERR(3, 144, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __pyx_t_1 = PyImport_ImportModule("capnp.lib.capnp"); if (!__pyx_t_1) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportFunction(__pyx_t_1, "to_python_reader", (void (**)(void))&__pyx_f_5capnp_3lib_5capnp_to_python_reader, "PyObject *( ::capnp::DynamicValue::Reader, PyObject *)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "to_python_builder", (void (**)(void))&__pyx_f_5capnp_3lib_5capnp_to_python_builder, "PyObject *( ::capnp::DynamicValue::Builder, PyObject *)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_to_dict", (void (**)(void))&__pyx_f_5capnp_3lib_5capnp__to_dict, "PyObject *(PyObject *, int, int)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_setDynamicFieldStatic", (void (**)(void))&__pyx_f_5capnp_3lib_5capnp__setDynamicFieldStatic, "PyObject *( ::capnp::DynamicStruct::Builder, PyObject *, PyObject *, PyObject *)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initcp_tags_capnp_cython(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initcp_tags_capnp_cython(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_cp_tags_capnp_cython(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_cp_tags_capnp_cython(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_cp_tags_capnp_cython(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'cp_tags_capnp_cython' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_cp_tags_capnp_cython(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(1, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("cp_tags_capnp_cython", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(1, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(1, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(1, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(1, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_cp_tags_capnp_cython) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(1, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "cp_tags_capnp_cython")) {
      if (unlikely(PyDict_SetItemString(modules, "cp_tags_capnp_cython", __pyx_m) < 0)) __PYX_ERR(1, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(1, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_type_import_code() < 0)) __PYX_ERR(1, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  if (unlikely(__Pyx_modinit_function_import_code() < 0)) __PYX_ERR(1, 1, __pyx_L1_error)
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif

  /* "cp_tags_capnp_cython.pyx":19
 * 
 * 
 * import capnp             # <<<<<<<<<<<<<<
 * import cp_tags_capnp
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_capnp, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_capnp, __pyx_t_1) < 0) __PYX_ERR(1, 19, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cp_tags_capnp_cython.pyx":20
 * 
 * import capnp
 * import cp_tags_capnp             # <<<<<<<<<<<<<<
 * 
 * from capnp.includes.types cimport *
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_cp_tags_capnp, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_cp_tags_capnp, __pyx_t_1) < 0) __PYX_ERR(1, 20, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cp_tags_capnp_cython.pyx":103
 *         Job.Builder asJob"as<Job>"()
 * 
 * _Job_Schema = _Schema()._init(getJobSchema()).as_struct()             # <<<<<<<<<<<<<<
 * cp_tags_capnp.Job.schema = _Job_Schema
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5capnp_3lib_5capnp__Schema)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((struct __pyx_vtabstruct_5capnp_3lib_5capnp__Schema *)((struct __pyx_obj_5capnp_3lib_5capnp__Schema *)__pyx_t_1)->__pyx_vtab)->_init(((struct __pyx_obj_5capnp_3lib_5capnp__Schema *)__pyx_t_1), capnp::Schema::from<Job>()); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_as_struct); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Job_Schema, __pyx_t_2) < 0) __PYX_ERR(1, 103, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cp_tags_capnp_cython.pyx":104
 * 
 * _Job_Schema = _Schema()._init(getJobSchema()).as_struct()
 * cp_tags_capnp.Job.schema = _Job_Schema             # <<<<<<<<<<<<<<
 * 
 * cdef class Job_Reader(_DynamicStructReader):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Job_Schema); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_cp_tags_capnp); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Job); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_t_3, __pyx_n_s_schema, __pyx_t_2) < 0) __PYX_ERR(1, 104, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cp_tags_capnp_cython.pyx":486
 * 
 * 
 * capnp.register_type(10252874616994876655, (Job_Reader, Job_Builder))             # <<<<<<<<<<<<<<
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_capnp); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 486, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_register_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 486, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 486, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_20cp_tags_capnp_cython_Job_Reader));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_20cp_tags_capnp_cython_Job_Reader));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_ptype_20cp_tags_capnp_cython_Job_Reader));
  __Pyx_INCREF(((PyObject *)__pyx_ptype_20cp_tags_capnp_cython_Job_Builder));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_20cp_tags_capnp_cython_Job_Builder));
  PyTuple_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_ptype_20cp_tags_capnp_cython_Job_Builder));
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 486, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_int_10252874616994876655);
  __Pyx_GIVEREF(__pyx_int_10252874616994876655);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_int_10252874616994876655);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 486, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cp_tags_capnp_cython.pyx":1
 * # addressbook_fast.pyx             # <<<<<<<<<<<<<<
 * # distutils: language = c++
 * # distutils: include_dirs = /usr/local/lib/python3.9/dist-packages
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_3) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "capnp/includes/capnp_cpp.pxd":127
 *         VoidPromise afterDelay(Duration delay)
 * 
 * cdef inline Duration Nanoseconds(int64_t nanos):             # <<<<<<<<<<<<<<
 *     return NANOSECONDS * nanos
 * 
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init cp_tags_capnp_cython", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init cp_tags_capnp_cython");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* SetItemInt */
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v, int is_list,
                                               CYTHON_NCP_UNUSED int wraparound, CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return -1;
                    PyErr_Clear();
                }
            }
            return m->sq_ass_item(o, i, v);
        }
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (is_list || (PySequence_Check(o) && !PyDict_Check(o)))
#else
    if (is_list || PySequence_Check(o))
#endif
    {
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod0 */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* RaiseNoneIterError */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* UnpackTupleError */
static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

/* UnpackTuple2 */
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
        PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2, int decref_tuple) {
    PyObject *value1 = NULL, *value2 = NULL;
#if CYTHON_COMPILING_IN_PYPY
    value1 = PySequence_ITEM(tuple, 0);  if (unlikely(!value1)) goto bad;
    value2 = PySequence_ITEM(tuple, 1);  if (unlikely(!value2)) goto bad;
#else
    value1 = PyTuple_GET_ITEM(tuple, 0);  Py_INCREF(value1);
    value2 = PyTuple_GET_ITEM(tuple, 1);  Py_INCREF(value2);
#endif
    if (decref_tuple) {
        Py_DECREF(tuple);
    }
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
#if CYTHON_COMPILING_IN_PYPY
bad:
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
#endif
}
static int __Pyx_unpack_tuple2_generic(PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2,
                                       int has_known_size, int decref_tuple) {
    Py_ssize_t index;
    PyObject *value1 = NULL, *value2 = NULL, *iter = NULL;
    iternextfunc iternext;
    iter = PyObject_GetIter(tuple);
    if (unlikely(!iter)) goto bad;
    if (decref_tuple) { Py_DECREF(tuple); tuple = NULL; }
    iternext = Py_TYPE(iter)->tp_iternext;
    value1 = iternext(iter); if (unlikely(!value1)) { index = 0; goto unpacking_failed; }
    value2 = iternext(iter); if (unlikely(!value2)) { index = 1; goto unpacking_failed; }
    if (!has_known_size && unlikely(__Pyx_IternextUnpackEndCheck(iternext(iter), 2))) goto bad;
    Py_DECREF(iter);
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
unpacking_failed:
    if (!has_known_size && __Pyx_IterFinish() == 0)
        __Pyx_RaiseNeedMoreValuesError(index);
bad:
    Py_XDECREF(iter);
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
}

/* dict_iter */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* iterable, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_source_is_dict) {
    is_dict = is_dict || likely(PyDict_CheckExact(iterable));
    *p_source_is_dict = is_dict;
    if (is_dict) {
#if !CYTHON_COMPILING_IN_PYPY
        *p_orig_length = PyDict_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
#elif PY_MAJOR_VERSION >= 3
        static PyObject *py_items = NULL, *py_keys = NULL, *py_values = NULL;
        PyObject **pp = NULL;
        if (method_name) {
            const char *name = PyUnicode_AsUTF8(method_name);
            if (strcmp(name, "iteritems") == 0) pp = &py_items;
            else if (strcmp(name, "iterkeys") == 0) pp = &py_keys;
            else if (strcmp(name, "itervalues") == 0) pp = &py_values;
            if (pp) {
                if (!*pp) {
                    *pp = PyUnicode_FromString(name + 4);
                    if (!*pp)
                        return NULL;
                }
                method_name = *pp;
            }
        }
#endif
    }
    *p_orig_length = 0;
    if (method_name) {
        PyObject* iter;
        iterable = __Pyx_PyObject_CallMethod0(iterable, method_name);
        if (!iterable)
            return NULL;
#if !CYTHON_COMPILING_IN_PYPY
        if (PyTuple_CheckExact(iterable) || PyList_CheckExact(iterable))
            return iterable;
#endif
        iter = PyObject_GetIter(iterable);
        Py_DECREF(iterable);
        return iter;
    }
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_dict_iter_next(
        PyObject* iter_obj, CYTHON_NCP_UNUSED Py_ssize_t orig_length, CYTHON_NCP_UNUSED Py_ssize_t* ppos,
        PyObject** pkey, PyObject** pvalue, PyObject** pitem, int source_is_dict) {
    PyObject* next_item;
#if !CYTHON_COMPILING_IN_PYPY
    if (source_is_dict) {
        PyObject *key, *value;
        if (unlikely(orig_length != PyDict_Size(iter_obj))) {
            PyErr_SetString(PyExc_RuntimeError, "dictionary changed size during iteration");
            return -1;
        }
        if (unlikely(!PyDict_Next(iter_obj, ppos, &key, &value))) {
            return 0;
        }
        if (pitem) {
            PyObject* tuple = PyTuple_New(2);
            if (unlikely(!tuple)) {
                return -1;
            }
            Py_INCREF(key);
            Py_INCREF(value);
            PyTuple_SET_ITEM(tuple, 0, key);
            PyTuple_SET_ITEM(tuple, 1, value);
            *pitem = tuple;
        } else {
            if (pkey) {
                Py_INCREF(key);
                *pkey = key;
            }
            if (pvalue) {
                Py_INCREF(value);
                *pvalue = value;
            }
        }
        return 1;
    } else if (PyTuple_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyTuple_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyTuple_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else if (PyList_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyList_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyList_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else
#endif
    {
        next_item = PyIter_Next(iter_obj);
        if (unlikely(!next_item)) {
            return __Pyx_IterFinish();
        }
    }
    if (pitem) {
        *pitem = next_item;
    } else if (pkey && pvalue) {
        if (__Pyx_unpack_tuple2(next_item, pkey, pvalue, source_is_dict, source_is_dict, 1))
            return -1;
    } else if (pkey) {
        *pkey = next_item;
    } else {
        *pvalue = next_item;
    }
    return 1;
}

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* CallNextTpDealloc */
static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_dealloc != current_tp_dealloc)
        type = type->tp_base;
    while (type && type->tp_dealloc == current_tp_dealloc)
        type = type->tp_base;
    if (type)
        type->tp_dealloc(obj);
}

/* CallNextTpTraverse */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_traverse != current_tp_traverse)
        type = type->tp_base;
    while (type && type->tp_traverse == current_tp_traverse)
        type = type->tp_base;
    if (type && type->tp_traverse)
        return type->tp_traverse(obj, v, a);
    return 0;
}

/* CallNextTpClear */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_clear) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_clear != current_tp_clear)
        type = type->tp_base;
    while (type && type->tp_clear == current_tp_clear)
        type = type->tp_base;
    if (type && type->tp_clear)
        type->tp_clear(obj);
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* GetVTable */
static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* PyObjectGetAttrStrNoError */
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint64_t(uint64_t value) {
    const uint64_t neg_one = (uint64_t) ((uint64_t) 0 - (uint64_t) 1), const_zero = (uint64_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(uint64_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint64_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint64_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(uint64_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint64_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(uint64_t),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value) {
    const unsigned int neg_one = (unsigned int) ((unsigned int) 0 - (unsigned int) 1), const_zero = (unsigned int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint16_t(uint16_t value) {
    const uint16_t neg_one = (uint16_t) ((uint16_t) 0 - (uint16_t) 1), const_zero = (uint16_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(uint16_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint16_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint16_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(uint16_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint16_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(uint16_t),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE uint64_t __Pyx_PyInt_As_uint64_t(PyObject *x) {
    const uint64_t neg_one = (uint64_t) ((uint64_t) 0 - (uint64_t) 1), const_zero = (uint64_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(uint64_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(uint64_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (uint64_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint64_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(uint64_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(uint64_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) >= 2 * PyLong_SHIFT) {
                            return (uint64_t) (((((uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint64_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) >= 3 * PyLong_SHIFT) {
                            return (uint64_t) (((((((uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint64_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) >= 4 * PyLong_SHIFT) {
                            return (uint64_t) (((((((((uint64_t)digits[3]) << PyLong_SHIFT) | (uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (uint64_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(uint64_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(uint64_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint64_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(uint64_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(uint64_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(uint64_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint64_t) (((uint64_t)-1)*(((((uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(uint64_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint64_t) ((((((uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(uint64_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint64_t) (((uint64_t)-1)*(((((((uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint64_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint64_t) ((((((((uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(uint64_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint64_t) (((uint64_t)-1)*(((((((((uint64_t)digits[3]) << PyLong_SHIFT) | (uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint64_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint64_t) ((((((((((uint64_t)digits[3]) << PyLong_SHIFT) | (uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(uint64_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(uint64_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            uint64_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (uint64_t) -1;
        }
    } else {
        uint64_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (uint64_t) -1;
        val = __Pyx_PyInt_As_uint64_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to uint64_t");
    return (uint64_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to uint64_t");
    return (uint64_t) -1;
}

/* CIntFromPy */
static CYTHON_INLINE uint16_t __Pyx_PyInt_As_uint16_t(PyObject *x) {
    const uint16_t neg_one = (uint16_t) ((uint16_t) 0 - (uint16_t) 1), const_zero = (uint16_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(uint16_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(uint16_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (uint16_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint16_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(uint16_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(uint16_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint16_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint16_t) >= 2 * PyLong_SHIFT) {
                            return (uint16_t) (((((uint16_t)digits[1]) << PyLong_SHIFT) | (uint16_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint16_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint16_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint16_t) >= 3 * PyLong_SHIFT) {
                            return (uint16_t) (((((((uint16_t)digits[2]) << PyLong_SHIFT) | (uint16_t)digits[1]) << PyLong_SHIFT) | (uint16_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint16_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint16_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint16_t) >= 4 * PyLong_SHIFT) {
                            return (uint16_t) (((((((((uint16_t)digits[3]) << PyLong_SHIFT) | (uint16_t)digits[2]) << PyLong_SHIFT) | (uint16_t)digits[1]) << PyLong_SHIFT) | (uint16_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (uint16_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(uint16_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint16_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(uint16_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint16_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint16_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(uint16_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(uint16_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(uint16_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint16_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint16_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint16_t) (((uint16_t)-1)*(((((uint16_t)digits[1]) << PyLong_SHIFT) | (uint16_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(uint16_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint16_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint16_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint16_t) ((((((uint16_t)digits[1]) << PyLong_SHIFT) | (uint16_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(uint16_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint16_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint16_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint16_t) (((uint16_t)-1)*(((((((uint16_t)digits[2]) << PyLong_SHIFT) | (uint16_t)digits[1]) << PyLong_SHIFT) | (uint16_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint16_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint16_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint16_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint16_t) ((((((((uint16_t)digits[2]) << PyLong_SHIFT) | (uint16_t)digits[1]) << PyLong_SHIFT) | (uint16_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(uint16_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint16_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint16_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint16_t) (((uint16_t)-1)*(((((((((uint16_t)digits[3]) << PyLong_SHIFT) | (uint16_t)digits[2]) << PyLong_SHIFT) | (uint16_t)digits[1]) << PyLong_SHIFT) | (uint16_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint16_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint16_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint16_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint16_t) ((((((((((uint16_t)digits[3]) << PyLong_SHIFT) | (uint16_t)digits[2]) << PyLong_SHIFT) | (uint16_t)digits[1]) << PyLong_SHIFT) | (uint16_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(uint16_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint16_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(uint16_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint16_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            uint16_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (uint16_t) -1;
        }
    } else {
        uint16_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (uint16_t) -1;
        val = __Pyx_PyInt_As_uint16_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to uint16_t");
    return (uint16_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to uint16_t");
    return (uint16_t) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* FunctionImport */
#ifndef __PYX_HAVE_RT_ImportFunction
#define __PYX_HAVE_RT_ImportFunction
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C function %.200s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, desc);
        goto bad;
    }
    tmp.p = PyCObject_AsVoidPtr(cobj);}
#endif
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
