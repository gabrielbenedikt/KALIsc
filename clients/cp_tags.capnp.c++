// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: cp_tags.capnp

#include "cp_tags.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<165> b_8e49872460994cef = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    239,  76, 153,  96,  36, 135,  73, 142,
     14,   0,   0,   0,   1,   0,   5,   0,
    236,  94,  25,  61, 196,  89,  63, 217,
      3,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 146,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0, 255,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 112,  95, 116,  97, 103, 115,  46,
     99,  97, 112, 110, 112,  58,  74, 111,
     98,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     36,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    237,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    232,   0,   0,   0,   3,   0,   1,   0,
    244,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    241,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    240,   0,   0,   0,   3,   0,   1,   0,
     12,   1,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   1,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   1,   0,   0,   3,   0,   1,   0,
     32,   1,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   4,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   1,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     24,   1,   0,   0,   3,   0,   1,   0,
     36,   1,   0,   0,   2,   0,   1,   0,
      4,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   1,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     32,   1,   0,   0,   3,   0,   1,   0,
     44,   1,   0,   0,   2,   0,   1,   0,
      5,   0,   0,   0,  80,   0,   0,   0,
      0,   0,   1,   0,   5,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     41,   1,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   1,   0,   0,   3,   0,   1,   0,
     52,   1,   0,   0,   2,   0,   1,   0,
      6,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   6,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   1,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     48,   1,   0,   0,   3,   0,   1,   0,
     60,   1,   0,   0,   2,   0,   1,   0,
      7,   0,   0,   0,   4,   0,   0,   0,
      0,   0,   1,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     57,   1,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     52,   1,   0,   0,   3,   0,   1,   0,
     64,   1,   0,   0,   2,   0,   1,   0,
      8,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   8,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     61,   1,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     56,   1,   0,   0,   3,   0,   1,   0,
     68,   1,   0,   0,   2,   0,   1,   0,
    105, 100,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97, 116, 116, 101, 114, 110, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 118, 101, 110, 116, 115,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    119, 105, 110, 100, 111, 119,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 117, 114,  97, 116, 105, 111, 110,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102, 105, 110, 105, 115, 104, 101, 100,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116,  97, 114, 116, 116,  97, 103,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 111, 112, 116,  97, 103,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 114, 114,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  10,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8e49872460994cef = b_8e49872460994cef.words;
#if !CAPNP_LITE
static const uint16_t m_8e49872460994cef[] = {4, 8, 2, 5, 0, 1, 6, 7, 3};
static const uint16_t i_8e49872460994cef[] = {0, 1, 2, 3, 4, 5, 6, 7, 8};
const ::capnp::_::RawSchema s_8e49872460994cef = {
  0x8e49872460994cef, b_8e49872460994cef.words, 165, nullptr, m_8e49872460994cef,
  0, 9, i_8e49872460994cef, nullptr, nullptr, { &s_8e49872460994cef, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<84> b_89a6049e6dde0d97 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    151,  13, 222, 109, 158,   4, 166, 137,
     14,   0,   0,   0,   3,   0,   0,   0,
    236,  94,  25,  61, 196,  89,  63, 217,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 170,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0, 135,   1,   0,   0,
     33,   1,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 112,  95, 116,  97, 103, 115,  46,
     99,  97, 112, 110, 112,  58,  84,  97,
    103, 103, 101, 114,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     24,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     34,  35,  78, 158, 185, 177, 196, 196,
     51, 206, 184, 222,  63, 221,  94, 255,
    177,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    169,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    190, 214,  40,  45, 176,  35, 200, 212,
     53,  54, 180, 241,   7, 173, 242, 225,
    157,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    149,   0,   0,   0,   7,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
    193, 139, 164,  95, 247,   5,  21, 133,
    247, 146, 211,  30, 128, 171, 199, 139,
    137,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    129,   0,   0,   0,   7,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
     95, 144, 159,  57,  65,  55,  86, 230,
    211, 116, 200, 220,   6, 159, 163, 202,
    117,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,   0,   0,   0,   7,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
     12, 220, 144, 249, 211, 101, 133, 205,
    240, 233, 144,  51, 212, 178, 125, 153,
     97,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     89,   0,   0,   0,   7,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
     13, 132, 206,  46,  26, 176, 180, 158,
    211, 159,  76, 144,  52,  22, 129, 193,
     77,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,   7,   0,   0,   0,
    115,  97, 118, 101, 116,  97, 103, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 117,  98, 109, 105, 116, 106, 111,
     98,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    113, 117, 101, 114, 121, 106, 111,  98,
    100, 111, 110, 101,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    103, 101, 116, 114, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 101, 116, 116, 104, 114, 101, 115,
    104, 111, 108, 100,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 101, 116, 100, 101, 108,  97, 121,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_89a6049e6dde0d97 = b_89a6049e6dde0d97.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_89a6049e6dde0d97[] = {
  &s_851505f75fa48bc1,
  &s_8bc7ab801ed392f7,
  &s_997db2d43390e9f0,
  &s_9eb4b01a2ece840d,
  &s_c1811634904c9fd3,
  &s_c4c4b1b99e4e2322,
  &s_caa39f06dcc874d3,
  &s_cd8565d3f990dc0c,
  &s_d4c823b02d28d6be,
  &s_e1f2ad07f1b43635,
  &s_e6563741399f905f,
  &s_ff5edd3fdeb8ce33,
};
static const uint16_t m_89a6049e6dde0d97[] = {3, 2, 0, 5, 4, 1};
const ::capnp::_::RawSchema s_89a6049e6dde0d97 = {
  0x89a6049e6dde0d97, b_89a6049e6dde0d97.words, 84, d_89a6049e6dde0d97, m_89a6049e6dde0d97,
  12, 6, nullptr, nullptr, nullptr, { &s_89a6049e6dde0d97, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<69> b_c4c4b1b99e4e2322 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     34,  35,  78, 158, 185, 177, 196, 196,
     21,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 112,  95, 116,  97, 103, 115,  46,
     99,  97, 112, 110, 112,  58,  84,  97,
    103, 103, 101, 114,  46, 115,  97, 118,
    101, 116,  97, 103, 115,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     72,   0,   0,   0,   3,   0,   1,   0,
    100,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
    102, 105, 108, 101, 110,  97, 109, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 104,  97, 110, 115,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 117, 114,  97, 116, 105, 111, 110,
      0,   0,   0,   0,   0,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c4c4b1b99e4e2322 = b_c4c4b1b99e4e2322.words;
#if !CAPNP_LITE
static const uint16_t m_c4c4b1b99e4e2322[] = {1, 2, 0};
static const uint16_t i_c4c4b1b99e4e2322[] = {0, 1, 2};
const ::capnp::_::RawSchema s_c4c4b1b99e4e2322 = {
  0xc4c4b1b99e4e2322, b_c4c4b1b99e4e2322.words, 69, nullptr, m_c4c4b1b99e4e2322,
  0, 3, i_c4c4b1b99e4e2322, nullptr, nullptr, { &s_c4c4b1b99e4e2322, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_ff5edd3fdeb8ce33 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     51, 206, 184, 222,  63, 221,  94, 255,
     21,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  50,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 112,  95, 116,  97, 103, 115,  46,
     99,  97, 112, 110, 112,  58,  84,  97,
    103, 103, 101, 114,  46, 115,  97, 118,
    101, 116,  97, 103, 115,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    106, 111,  98, 105, 100,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ff5edd3fdeb8ce33 = b_ff5edd3fdeb8ce33.words;
#if !CAPNP_LITE
static const uint16_t m_ff5edd3fdeb8ce33[] = {0};
static const uint16_t i_ff5edd3fdeb8ce33[] = {0};
const ::capnp::_::RawSchema s_ff5edd3fdeb8ce33 = {
  0xff5edd3fdeb8ce33, b_ff5edd3fdeb8ce33.words, 33, nullptr, m_ff5edd3fdeb8ce33,
  0, 1, i_ff5edd3fdeb8ce33, nullptr, nullptr, { &s_ff5edd3fdeb8ce33, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_d4c823b02d28d6be = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    190, 214,  40,  45, 176,  35, 200, 212,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  50,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 112,  95, 116,  97, 103, 115,  46,
     99,  97, 112, 110, 112,  58,  84,  97,
    103, 103, 101, 114,  46, 115, 117,  98,
    109, 105, 116, 106, 111,  98,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    106, 111,  98,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    239,  76, 153,  96,  36, 135,  73, 142,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d4c823b02d28d6be = b_d4c823b02d28d6be.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d4c823b02d28d6be[] = {
  &s_8e49872460994cef,
};
static const uint16_t m_d4c823b02d28d6be[] = {0};
static const uint16_t i_d4c823b02d28d6be[] = {0};
const ::capnp::_::RawSchema s_d4c823b02d28d6be = {
  0xd4c823b02d28d6be, b_d4c823b02d28d6be.words, 33, d_d4c823b02d28d6be, m_d4c823b02d28d6be,
  1, 1, i_d4c823b02d28d6be, nullptr, nullptr, { &s_d4c823b02d28d6be, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_e1f2ad07f1b43635 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     53,  54, 180, 241,   7, 173, 242, 225,
     21,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  58,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 112,  95, 116,  97, 103, 115,  46,
     99,  97, 112, 110, 112,  58,  84,  97,
    103, 103, 101, 114,  46, 115, 117,  98,
    109, 105, 116, 106, 111,  98,  36,  82,
    101, 115, 117, 108, 116, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    106, 111,  98, 105, 100,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e1f2ad07f1b43635 = b_e1f2ad07f1b43635.words;
#if !CAPNP_LITE
static const uint16_t m_e1f2ad07f1b43635[] = {0};
static const uint16_t i_e1f2ad07f1b43635[] = {0};
const ::capnp::_::RawSchema s_e1f2ad07f1b43635 = {
  0xe1f2ad07f1b43635, b_e1f2ad07f1b43635.words, 33, nullptr, m_e1f2ad07f1b43635,
  0, 1, i_e1f2ad07f1b43635, nullptr, nullptr, { &s_e1f2ad07f1b43635, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_851505f75fa48bc1 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    193, 139, 164,  95, 247,   5,  21, 133,
     21,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 112,  95, 116,  97, 103, 115,  46,
     99,  97, 112, 110, 112,  58,  84,  97,
    103, 103, 101, 114,  46, 113, 117, 101,
    114, 121, 106, 111,  98, 100, 111, 110,
    101,  36,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    106, 111,  98, 105, 100,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_851505f75fa48bc1 = b_851505f75fa48bc1.words;
#if !CAPNP_LITE
static const uint16_t m_851505f75fa48bc1[] = {0};
static const uint16_t i_851505f75fa48bc1[] = {0};
const ::capnp::_::RawSchema s_851505f75fa48bc1 = {
  0x851505f75fa48bc1, b_851505f75fa48bc1.words, 34, nullptr, m_851505f75fa48bc1,
  0, 1, i_851505f75fa48bc1, nullptr, nullptr, { &s_851505f75fa48bc1, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_8bc7ab801ed392f7 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    247, 146, 211,  30, 128, 171, 199, 139,
     21,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 112,  95, 116,  97, 103, 115,  46,
     99,  97, 112, 110, 112,  58,  84,  97,
    103, 103, 101, 114,  46, 113, 117, 101,
    114, 121, 106, 111,  98, 100, 111, 110,
    101,  36,  82, 101, 115, 117, 108, 116,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 116,   0,   0,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8bc7ab801ed392f7 = b_8bc7ab801ed392f7.words;
#if !CAPNP_LITE
static const uint16_t m_8bc7ab801ed392f7[] = {0};
static const uint16_t i_8bc7ab801ed392f7[] = {0};
const ::capnp::_::RawSchema s_8bc7ab801ed392f7 = {
  0x8bc7ab801ed392f7, b_8bc7ab801ed392f7.words, 34, nullptr, m_8bc7ab801ed392f7,
  0, 1, i_8bc7ab801ed392f7, nullptr, nullptr, { &s_8bc7ab801ed392f7, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_e6563741399f905f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     95, 144, 159,  57,  65,  55,  86, 230,
     21,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  58,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 112,  95, 116,  97, 103, 115,  46,
     99,  97, 112, 110, 112,  58,  84,  97,
    103, 103, 101, 114,  46, 103, 101, 116,
    114, 101, 115, 117, 108, 116, 115,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    106, 111,  98, 105, 100,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e6563741399f905f = b_e6563741399f905f.words;
#if !CAPNP_LITE
static const uint16_t m_e6563741399f905f[] = {0};
static const uint16_t i_e6563741399f905f[] = {0};
const ::capnp::_::RawSchema s_e6563741399f905f = {
  0xe6563741399f905f, b_e6563741399f905f.words, 33, nullptr, m_e6563741399f905f,
  0, 1, i_e6563741399f905f, nullptr, nullptr, { &s_e6563741399f905f, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_caa39f06dcc874d3 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    211, 116, 200, 220,   6, 159, 163, 202,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  66,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 112,  95, 116,  97, 103, 115,  46,
     99,  97, 112, 110, 112,  58,  84,  97,
    103, 103, 101, 114,  46, 103, 101, 116,
    114, 101, 115, 117, 108, 116, 115,  36,
     82, 101, 115, 117, 108, 116, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    112,  97, 121, 108, 111,  97, 100,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    239,  76, 153,  96,  36, 135,  73, 142,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_caa39f06dcc874d3 = b_caa39f06dcc874d3.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_caa39f06dcc874d3[] = {
  &s_8e49872460994cef,
};
static const uint16_t m_caa39f06dcc874d3[] = {0};
static const uint16_t i_caa39f06dcc874d3[] = {0};
const ::capnp::_::RawSchema s_caa39f06dcc874d3 = {
  0xcaa39f06dcc874d3, b_caa39f06dcc874d3.words, 33, d_caa39f06dcc874d3, m_caa39f06dcc874d3,
  1, 1, i_caa39f06dcc874d3, nullptr, nullptr, { &s_caa39f06dcc874d3, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<49> b_cd8565d3f990dc0c = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     12, 220, 144, 249, 211, 101, 133, 205,
     21,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 112,  95, 116,  97, 103, 115,  46,
     99,  97, 112, 110, 112,  58,  84,  97,
    103, 103, 101, 114,  46, 115, 101, 116,
    116, 104, 114, 101, 115, 104, 111, 108,
    100,  36,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
     99, 104,  97, 110,   0,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118, 111, 108, 116,  97, 103, 101,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cd8565d3f990dc0c = b_cd8565d3f990dc0c.words;
#if !CAPNP_LITE
static const uint16_t m_cd8565d3f990dc0c[] = {0, 1};
static const uint16_t i_cd8565d3f990dc0c[] = {0, 1};
const ::capnp::_::RawSchema s_cd8565d3f990dc0c = {
  0xcd8565d3f990dc0c, b_cd8565d3f990dc0c.words, 49, nullptr, m_cd8565d3f990dc0c,
  0, 2, i_cd8565d3f990dc0c, nullptr, nullptr, { &s_cd8565d3f990dc0c, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_997db2d43390e9f0 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    240, 233, 144,  51, 212, 178, 125, 153,
     21,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 112,  95, 116,  97, 103, 115,  46,
     99,  97, 112, 110, 112,  58,  84,  97,
    103, 103, 101, 114,  46, 115, 101, 116,
    116, 104, 114, 101, 115, 104, 111, 108,
    100,  36,  82, 101, 115, 117, 108, 116,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 116,   0,   0,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_997db2d43390e9f0 = b_997db2d43390e9f0.words;
#if !CAPNP_LITE
static const uint16_t m_997db2d43390e9f0[] = {0};
static const uint16_t i_997db2d43390e9f0[] = {0};
const ::capnp::_::RawSchema s_997db2d43390e9f0 = {
  0x997db2d43390e9f0, b_997db2d43390e9f0.words, 34, nullptr, m_997db2d43390e9f0,
  0, 1, i_997db2d43390e9f0, nullptr, nullptr, { &s_997db2d43390e9f0, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<48> b_9eb4b01a2ece840d = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     13, 132, 206,  46,  26, 176, 180, 158,
     21,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 112,  95, 116,  97, 103, 115,  46,
     99,  97, 112, 110, 112,  58,  84,  97,
    103, 103, 101, 114,  46, 115, 101, 116,
    100, 101, 108,  97, 121,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
     99, 104,  97, 110,   0,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 101, 108,  97, 121,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9eb4b01a2ece840d = b_9eb4b01a2ece840d.words;
#if !CAPNP_LITE
static const uint16_t m_9eb4b01a2ece840d[] = {0, 1};
static const uint16_t i_9eb4b01a2ece840d[] = {0, 1};
const ::capnp::_::RawSchema s_9eb4b01a2ece840d = {
  0x9eb4b01a2ece840d, b_9eb4b01a2ece840d.words, 48, nullptr, m_9eb4b01a2ece840d,
  0, 2, i_9eb4b01a2ece840d, nullptr, nullptr, { &s_9eb4b01a2ece840d, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_c1811634904c9fd3 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    211, 159,  76, 144,  52,  22, 129, 193,
     21,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  50,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 112,  95, 116,  97, 103, 115,  46,
     99,  97, 112, 110, 112,  58,  84,  97,
    103, 103, 101, 114,  46, 115, 101, 116,
    100, 101, 108,  97, 121,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 116,   0,   0,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c1811634904c9fd3 = b_c1811634904c9fd3.words;
#if !CAPNP_LITE
static const uint16_t m_c1811634904c9fd3[] = {0};
static const uint16_t i_c1811634904c9fd3[] = {0};
const ::capnp::_::RawSchema s_c1811634904c9fd3 = {
  0xc1811634904c9fd3, b_c1811634904c9fd3.words, 33, nullptr, m_c1811634904c9fd3,
  0, 1, i_c1811634904c9fd3, nullptr, nullptr, { &s_c1811634904c9fd3, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


// Job
constexpr uint16_t Job::_capnpPrivate::dataWordSize;
constexpr uint16_t Job::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Job::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Job::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::Tagger::SavetagsParams,  ::Tagger::SavetagsResults>
Tagger::Client::savetagsRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::Tagger::SavetagsParams,  ::Tagger::SavetagsResults>(
      0x89a6049e6dde0d97ull, 0, sizeHint);
}
::kj::Promise<void> Tagger::Server::savetags(SavetagsContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "cp_tags.capnp:Tagger", "savetags",
      0x89a6049e6dde0d97ull, 0);
}
::capnp::Request< ::Tagger::SubmitjobParams,  ::Tagger::SubmitjobResults>
Tagger::Client::submitjobRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::Tagger::SubmitjobParams,  ::Tagger::SubmitjobResults>(
      0x89a6049e6dde0d97ull, 1, sizeHint);
}
::kj::Promise<void> Tagger::Server::submitjob(SubmitjobContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "cp_tags.capnp:Tagger", "submitjob",
      0x89a6049e6dde0d97ull, 1);
}
::capnp::Request< ::Tagger::QueryjobdoneParams,  ::Tagger::QueryjobdoneResults>
Tagger::Client::queryjobdoneRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::Tagger::QueryjobdoneParams,  ::Tagger::QueryjobdoneResults>(
      0x89a6049e6dde0d97ull, 2, sizeHint);
}
::kj::Promise<void> Tagger::Server::queryjobdone(QueryjobdoneContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "cp_tags.capnp:Tagger", "queryjobdone",
      0x89a6049e6dde0d97ull, 2);
}
::capnp::Request< ::Tagger::GetresultsParams,  ::Tagger::GetresultsResults>
Tagger::Client::getresultsRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::Tagger::GetresultsParams,  ::Tagger::GetresultsResults>(
      0x89a6049e6dde0d97ull, 3, sizeHint);
}
::kj::Promise<void> Tagger::Server::getresults(GetresultsContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "cp_tags.capnp:Tagger", "getresults",
      0x89a6049e6dde0d97ull, 3);
}
::capnp::Request< ::Tagger::SetthresholdParams,  ::Tagger::SetthresholdResults>
Tagger::Client::setthresholdRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::Tagger::SetthresholdParams,  ::Tagger::SetthresholdResults>(
      0x89a6049e6dde0d97ull, 4, sizeHint);
}
::kj::Promise<void> Tagger::Server::setthreshold(SetthresholdContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "cp_tags.capnp:Tagger", "setthreshold",
      0x89a6049e6dde0d97ull, 4);
}
::capnp::Request< ::Tagger::SetdelayParams,  ::Tagger::SetdelayResults>
Tagger::Client::setdelayRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::Tagger::SetdelayParams,  ::Tagger::SetdelayResults>(
      0x89a6049e6dde0d97ull, 5, sizeHint);
}
::kj::Promise<void> Tagger::Server::setdelay(SetdelayContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "cp_tags.capnp:Tagger", "setdelay",
      0x89a6049e6dde0d97ull, 5);
}
::capnp::Capability::Server::DispatchCallResult Tagger::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0x89a6049e6dde0d97ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("cp_tags.capnp:Tagger", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult Tagger::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        savetags(::capnp::Capability::Server::internalGetTypedContext<
             ::Tagger::SavetagsParams,  ::Tagger::SavetagsResults>(context)),
        false
      };
    case 1:
      return {
        submitjob(::capnp::Capability::Server::internalGetTypedContext<
             ::Tagger::SubmitjobParams,  ::Tagger::SubmitjobResults>(context)),
        false
      };
    case 2:
      return {
        queryjobdone(::capnp::Capability::Server::internalGetTypedContext<
             ::Tagger::QueryjobdoneParams,  ::Tagger::QueryjobdoneResults>(context)),
        false
      };
    case 3:
      return {
        getresults(::capnp::Capability::Server::internalGetTypedContext<
             ::Tagger::GetresultsParams,  ::Tagger::GetresultsResults>(context)),
        false
      };
    case 4:
      return {
        setthreshold(::capnp::Capability::Server::internalGetTypedContext<
             ::Tagger::SetthresholdParams,  ::Tagger::SetthresholdResults>(context)),
        false
      };
    case 5:
      return {
        setdelay(::capnp::Capability::Server::internalGetTypedContext<
             ::Tagger::SetdelayParams,  ::Tagger::SetdelayResults>(context)),
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "cp_tags.capnp:Tagger",
          0x89a6049e6dde0d97ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Tagger
#if !CAPNP_LITE
constexpr ::capnp::Kind Tagger::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Tagger::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Tagger::SavetagsParams
constexpr uint16_t Tagger::SavetagsParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Tagger::SavetagsParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Tagger::SavetagsParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Tagger::SavetagsParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Tagger::SavetagsResults
constexpr uint16_t Tagger::SavetagsResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Tagger::SavetagsResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Tagger::SavetagsResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Tagger::SavetagsResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Tagger::SubmitjobParams
constexpr uint16_t Tagger::SubmitjobParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Tagger::SubmitjobParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Tagger::SubmitjobParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Tagger::SubmitjobParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Tagger::SubmitjobResults
constexpr uint16_t Tagger::SubmitjobResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Tagger::SubmitjobResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Tagger::SubmitjobResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Tagger::SubmitjobResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Tagger::QueryjobdoneParams
constexpr uint16_t Tagger::QueryjobdoneParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Tagger::QueryjobdoneParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Tagger::QueryjobdoneParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Tagger::QueryjobdoneParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Tagger::QueryjobdoneResults
constexpr uint16_t Tagger::QueryjobdoneResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Tagger::QueryjobdoneResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Tagger::QueryjobdoneResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Tagger::QueryjobdoneResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Tagger::GetresultsParams
constexpr uint16_t Tagger::GetresultsParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Tagger::GetresultsParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Tagger::GetresultsParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Tagger::GetresultsParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Tagger::GetresultsResults
constexpr uint16_t Tagger::GetresultsResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Tagger::GetresultsResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Tagger::GetresultsResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Tagger::GetresultsResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Tagger::SetthresholdParams
constexpr uint16_t Tagger::SetthresholdParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Tagger::SetthresholdParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Tagger::SetthresholdParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Tagger::SetthresholdParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Tagger::SetthresholdResults
constexpr uint16_t Tagger::SetthresholdResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Tagger::SetthresholdResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Tagger::SetthresholdResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Tagger::SetthresholdResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Tagger::SetdelayParams
constexpr uint16_t Tagger::SetdelayParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Tagger::SetdelayParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Tagger::SetdelayParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Tagger::SetdelayParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Tagger::SetdelayResults
constexpr uint16_t Tagger::SetdelayResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Tagger::SetdelayResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Tagger::SetdelayResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Tagger::SetdelayResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE



